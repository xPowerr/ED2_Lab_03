

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Aug 02 22:41:41 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    36                           	dabs	1,0x7E,2
    37     0000                     
    38                           ; Version 2.40
    39                           ; Generated 04/07/2022 GMT
    40                           ; 
    41                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F887 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73     0000                     	;# 
    74     0001                     	;# 
    75     0002                     	;# 
    76     0003                     	;# 
    77     0004                     	;# 
    78     0005                     	;# 
    79     0006                     	;# 
    80     0007                     	;# 
    81     0008                     	;# 
    82     0009                     	;# 
    83     000A                     	;# 
    84     000B                     	;# 
    85     000C                     	;# 
    86     000D                     	;# 
    87     000E                     	;# 
    88     000E                     	;# 
    89     000F                     	;# 
    90     0010                     	;# 
    91     0011                     	;# 
    92     0012                     	;# 
    93     0013                     	;# 
    94     0014                     	;# 
    95     0015                     	;# 
    96     0015                     	;# 
    97     0016                     	;# 
    98     0017                     	;# 
    99     0018                     	;# 
   100     0019                     	;# 
   101     001A                     	;# 
   102     001B                     	;# 
   103     001B                     	;# 
   104     001C                     	;# 
   105     001D                     	;# 
   106     001E                     	;# 
   107     001F                     	;# 
   108     0081                     	;# 
   109     0085                     	;# 
   110     0086                     	;# 
   111     0087                     	;# 
   112     0088                     	;# 
   113     0089                     	;# 
   114     008C                     	;# 
   115     008D                     	;# 
   116     008E                     	;# 
   117     008F                     	;# 
   118     0090                     	;# 
   119     0091                     	;# 
   120     0092                     	;# 
   121     0093                     	;# 
   122     0093                     	;# 
   123     0093                     	;# 
   124     0094                     	;# 
   125     0095                     	;# 
   126     0096                     	;# 
   127     0097                     	;# 
   128     0098                     	;# 
   129     0099                     	;# 
   130     009A                     	;# 
   131     009B                     	;# 
   132     009C                     	;# 
   133     009D                     	;# 
   134     009E                     	;# 
   135     009F                     	;# 
   136     0105                     	;# 
   137     0107                     	;# 
   138     0108                     	;# 
   139     0109                     	;# 
   140     010C                     	;# 
   141     010C                     	;# 
   142     010D                     	;# 
   143     010E                     	;# 
   144     010F                     	;# 
   145     0185                     	;# 
   146     0187                     	;# 
   147     0188                     	;# 
   148     0189                     	;# 
   149     018C                     	;# 
   150     018D                     	;# 
   151     0000                     	;# 
   152     0001                     	;# 
   153     0002                     	;# 
   154     0003                     	;# 
   155     0004                     	;# 
   156     0005                     	;# 
   157     0006                     	;# 
   158     0007                     	;# 
   159     0008                     	;# 
   160     0009                     	;# 
   161     000A                     	;# 
   162     000B                     	;# 
   163     000C                     	;# 
   164     000D                     	;# 
   165     000E                     	;# 
   166     000E                     	;# 
   167     000F                     	;# 
   168     0010                     	;# 
   169     0011                     	;# 
   170     0012                     	;# 
   171     0013                     	;# 
   172     0014                     	;# 
   173     0015                     	;# 
   174     0015                     	;# 
   175     0016                     	;# 
   176     0017                     	;# 
   177     0018                     	;# 
   178     0019                     	;# 
   179     001A                     	;# 
   180     001B                     	;# 
   181     001B                     	;# 
   182     001C                     	;# 
   183     001D                     	;# 
   184     001E                     	;# 
   185     001F                     	;# 
   186     0081                     	;# 
   187     0085                     	;# 
   188     0086                     	;# 
   189     0087                     	;# 
   190     0088                     	;# 
   191     0089                     	;# 
   192     008C                     	;# 
   193     008D                     	;# 
   194     008E                     	;# 
   195     008F                     	;# 
   196     0090                     	;# 
   197     0091                     	;# 
   198     0092                     	;# 
   199     0093                     	;# 
   200     0093                     	;# 
   201     0093                     	;# 
   202     0094                     	;# 
   203     0095                     	;# 
   204     0096                     	;# 
   205     0097                     	;# 
   206     0098                     	;# 
   207     0099                     	;# 
   208     009A                     	;# 
   209     009B                     	;# 
   210     009C                     	;# 
   211     009D                     	;# 
   212     009E                     	;# 
   213     009F                     	;# 
   214     0105                     	;# 
   215     0107                     	;# 
   216     0108                     	;# 
   217     0109                     	;# 
   218     010C                     	;# 
   219     010C                     	;# 
   220     010D                     	;# 
   221     010E                     	;# 
   222     010F                     	;# 
   223     0185                     	;# 
   224     0187                     	;# 
   225     0188                     	;# 
   226     0189                     	;# 
   227     018C                     	;# 
   228     018D                     	;# 
   229     0000                     	;# 
   230     0001                     	;# 
   231     0002                     	;# 
   232     0003                     	;# 
   233     0004                     	;# 
   234     0005                     	;# 
   235     0006                     	;# 
   236     0007                     	;# 
   237     0008                     	;# 
   238     0009                     	;# 
   239     000A                     	;# 
   240     000B                     	;# 
   241     000C                     	;# 
   242     000D                     	;# 
   243     000E                     	;# 
   244     000E                     	;# 
   245     000F                     	;# 
   246     0010                     	;# 
   247     0011                     	;# 
   248     0012                     	;# 
   249     0013                     	;# 
   250     0014                     	;# 
   251     0015                     	;# 
   252     0015                     	;# 
   253     0016                     	;# 
   254     0017                     	;# 
   255     0018                     	;# 
   256     0019                     	;# 
   257     001A                     	;# 
   258     001B                     	;# 
   259     001B                     	;# 
   260     001C                     	;# 
   261     001D                     	;# 
   262     001E                     	;# 
   263     001F                     	;# 
   264     0081                     	;# 
   265     0085                     	;# 
   266     0086                     	;# 
   267     0087                     	;# 
   268     0088                     	;# 
   269     0089                     	;# 
   270     008C                     	;# 
   271     008D                     	;# 
   272     008E                     	;# 
   273     008F                     	;# 
   274     0090                     	;# 
   275     0091                     	;# 
   276     0092                     	;# 
   277     0093                     	;# 
   278     0093                     	;# 
   279     0093                     	;# 
   280     0094                     	;# 
   281     0095                     	;# 
   282     0096                     	;# 
   283     0097                     	;# 
   284     0098                     	;# 
   285     0099                     	;# 
   286     009A                     	;# 
   287     009B                     	;# 
   288     009C                     	;# 
   289     009D                     	;# 
   290     009E                     	;# 
   291     009F                     	;# 
   292     0105                     	;# 
   293     0107                     	;# 
   294     0108                     	;# 
   295     0109                     	;# 
   296     010C                     	;# 
   297     010C                     	;# 
   298     010D                     	;# 
   299     010E                     	;# 
   300     010F                     	;# 
   301     0185                     	;# 
   302     0187                     	;# 
   303     0188                     	;# 
   304     0189                     	;# 
   305     018C                     	;# 
   306     018D                     	;# 
   307     0000                     	;# 
   308     0001                     	;# 
   309     0002                     	;# 
   310     0003                     	;# 
   311     0004                     	;# 
   312     0005                     	;# 
   313     0006                     	;# 
   314     0007                     	;# 
   315     0008                     	;# 
   316     0009                     	;# 
   317     000A                     	;# 
   318     000B                     	;# 
   319     000C                     	;# 
   320     000D                     	;# 
   321     000E                     	;# 
   322     000E                     	;# 
   323     000F                     	;# 
   324     0010                     	;# 
   325     0011                     	;# 
   326     0012                     	;# 
   327     0013                     	;# 
   328     0014                     	;# 
   329     0015                     	;# 
   330     0015                     	;# 
   331     0016                     	;# 
   332     0017                     	;# 
   333     0018                     	;# 
   334     0019                     	;# 
   335     001A                     	;# 
   336     001B                     	;# 
   337     001B                     	;# 
   338     001C                     	;# 
   339     001D                     	;# 
   340     001E                     	;# 
   341     001F                     	;# 
   342     0081                     	;# 
   343     0085                     	;# 
   344     0086                     	;# 
   345     0087                     	;# 
   346     0088                     	;# 
   347     0089                     	;# 
   348     008C                     	;# 
   349     008D                     	;# 
   350     008E                     	;# 
   351     008F                     	;# 
   352     0090                     	;# 
   353     0091                     	;# 
   354     0092                     	;# 
   355     0093                     	;# 
   356     0093                     	;# 
   357     0093                     	;# 
   358     0094                     	;# 
   359     0095                     	;# 
   360     0096                     	;# 
   361     0097                     	;# 
   362     0098                     	;# 
   363     0099                     	;# 
   364     009A                     	;# 
   365     009B                     	;# 
   366     009C                     	;# 
   367     009D                     	;# 
   368     009E                     	;# 
   369     009F                     	;# 
   370     0105                     	;# 
   371     0107                     	;# 
   372     0108                     	;# 
   373     0109                     	;# 
   374     010C                     	;# 
   375     010C                     	;# 
   376     010D                     	;# 
   377     010E                     	;# 
   378     010F                     	;# 
   379     0185                     	;# 
   380     0187                     	;# 
   381     0188                     	;# 
   382     0189                     	;# 
   383     018C                     	;# 
   384     018D                     	;# 
   385                           
   386                           	psect	strings
   387     0664                     __pstrings:
   388     0664                     stringtab:
   389     0664                     __stringtab:
   390                           
   391                           ;	String table - string pointers are 1 byte each
   392     0664  1BFF               	btfsc	btemp+1,7
   393     0665  2E6E               	ljmp	stringcode
   394     0666  1383               	bcf	3,7
   395     0667  187F               	btfsc	btemp+1,0
   396     0668  1783               	bsf	3,7
   397     0669  0800               	movf	0,w
   398     066A  0A84               	incf	4,f
   399     066B  1903               	skipnz
   400     066C  0AFF               	incf	btemp+1,f
   401     066D  0008               	return
   402     066E                     stringcode:
   403     066E                     stringdir:
   404     066E  3006               	movlw	high stringdir
   405     066F  008A               	movwf	10
   406     0670  0804               	movf	4,w
   407     0671  0A84               	incf	4,f
   408     0672  0782               	addwf	2,f
   409     0673                     __stringbase:
   410     0673  3400               	retlw	0
   411     0674                     __end_of__stringtab:
   412     0674                     _dpowers:
   413     0674  3401               	retlw	1
   414     0675  3400               	retlw	0
   415     0676  340A               	retlw	10
   416     0677  3400               	retlw	0
   417     0678  3464               	retlw	100
   418     0679  3400               	retlw	0
   419     067A  34E8               	retlw	232
   420     067B  3403               	retlw	3
   421     067C  3410               	retlw	16
   422     067D  3427               	retlw	39
   423     067E                     __end_of_dpowers:
   424     0006                     _PORTBbits	set	6
   425     0008                     _PORTDbits	set	8
   426     0013                     _SSPBUF	set	19
   427     0014                     _SSPCON	set	20
   428     0009                     _PORTE	set	9
   429     0008                     _PORTD	set	8
   430     0007                     _PORTC	set	7
   431     0006                     _PORTB	set	6
   432     0005                     _PORTA	set	5
   433     0007                     _PORTCbits	set	7
   434     0094                     _SSPSTATbits	set	148
   435     0094                     _SSPSTAT	set	148
   436     008F                     _OSCCONbits	set	143
   437     0088                     _TRISD	set	136
   438     0087                     _TRISCbits	set	135
   439     0086                     _TRISB	set	134
   440     043B                     _TRISC3	set	1083
   441     043D                     _TRISC5	set	1085
   442     0189                     _ANSELH	set	393
   443     0188                     _ANSEL	set	392
   444     067E                     STR_4:
   445     067E  3425               	retlw	37	;'%'
   446     067F  3464               	retlw	100	;'d'
   447     0680  342E               	retlw	46	;'.'
   448     0681  3425               	retlw	37	;'%'
   449     0682  3464               	retlw	100	;'d'
   450     0683  3425               	retlw	37	;'%'
   451     0684  3464               	retlw	100	;'d'
   452     0685  3456               	retlw	86	;'V'
   453     0686  3400               	retlw	0
   454     0687                     STR_6:
   455     0687  3425               	retlw	37	;'%'
   456     0688  3430               	retlw	48	;'0'
   457     0689  3433               	retlw	51	;'3'
   458     068A  3464               	retlw	100	;'d'
   459     068B  3400               	retlw	0
   460     068C                     STR_2:
   461     068C  3453               	retlw	83	;'S'
   462     068D  3431               	retlw	49	;'1'
   463     068E  343A               	retlw	58	;':'
   464     068F  3400               	retlw	0
   465     0690                     STR_1:
   466     0690  3453               	retlw	83	;'S'
   467     0691  3432               	retlw	50	;'2'
   468     0692  343A               	retlw	58	;':'
   469     0693  3400               	retlw	0
   470     0694                     STR_3:
   471     0694  3453               	retlw	83	;'S'
   472     0695  3433               	retlw	51	;'3'
   473     0696  343A               	retlw	58	;':'
   474     0697  3400               	retlw	0
   475     067E                     
   476                           	psect	cinit
   477     000F                     start_initialization:	
   478                           ; #config settings
   479                           
   480     000F                     __initialization:
   481                           
   482                           ; Clear objects allocated to BANK0
   483     000F  1383               	bcf	3,7	;select IRP bank0
   484     0010  3020               	movlw	low __pbssBANK0
   485     0011  0084               	movwf	4
   486     0012  3047               	movlw	low (__pbssBANK0+39)
   487     0013  120A  118A  276F  120A  118A  	fcall	clear_ram0
   488                           
   489                           ; Clear objects allocated to BANK1
   490     0018  30A0               	movlw	low __pbssBANK1
   491     0019  0084               	movwf	4
   492     001A  30C8               	movlw	low (__pbssBANK1+40)
   493     001B  120A  118A  276F  120A  118A  	fcall	clear_ram0
   494     0020                     end_of_initialization:	
   495                           ;End of C runtime variable initialization code
   496                           
   497     0020                     __end_of__initialization:
   498     0020  0183               	clrf	3
   499     0021  120A  118A  2824   	ljmp	_main	;jump to C main() function
   500                           
   501                           	psect	bssBANK0
   502     0020                     __pbssBANK0:
   503     0020                     _centesima2:
   504     0020                     	ds	2
   505     0022                     _decima2:
   506     0022                     	ds	2
   507     0024                     _unidad2:
   508     0024                     	ds	2
   509     0026                     _centesima1:
   510     0026                     	ds	2
   511     0028                     _decima1:
   512     0028                     	ds	2
   513     002A                     _unidad1:
   514     002A                     	ds	2
   515     002C                     _vol2:
   516     002C                     	ds	2
   517     002E                     _vol1:
   518     002E                     	ds	2
   519     0030                     _contador:
   520     0030                     	ds	1
   521     0031                     _voltaje2:
   522     0031                     	ds	1
   523     0032                     _voltaje1:
   524     0032                     	ds	1
   525     0033                     _buffer:
   526     0033                     	ds	20
   527                           
   528                           	psect	bssBANK1
   529     00A0                     __pbssBANK1:
   530     00A0                     _buffer2:
   531     00A0                     	ds	20
   532     00B4                     _buffer1:
   533     00B4                     	ds	20
   534                           
   535                           	psect	clrtext
   536     076F                     clear_ram0:	
   537                           ;	Called with FSR containing the base address, and
   538                           ;	W with the last address+1
   539                           
   540     076F  0064               	clrwdt	;clear the watchdog before getting into this loop
   541     0770                     clrloop0:
   542     0770  0180               	clrf	0	;clear RAM location pointed to by FSR
   543     0771  0A84               	incf	4,f	;increment pointer
   544     0772  0604               	xorwf	4,w	;XOR with final address
   545     0773  1903               	btfsc	3,2	;have we reached the end yet?
   546     0774  3400               	retlw	0	;all done for this memory range, return
   547     0775  0604               	xorwf	4,w	;XOR again to restore value
   548     0776  2F70               	goto	clrloop0	;do the next byte
   549                           
   550                           	psect	cstackCOMMON
   551     0070                     __pcstackCOMMON:
   552     0070                     ?_isdigit:
   553     0070                     ?_setup:	
   554                           ; 1 bit 
   555                           
   556     0070                     ?_Lcd_Init:	
   557                           ; 1 bytes @ 0x0
   558                           
   559     0070                     ?_Lcd_Clear:	
   560                           ; 1 bytes @ 0x0
   561                           
   562     0070                     ?_spiWrite:	
   563                           ; 1 bytes @ 0x0
   564                           
   565     0070                     ?_spiRead:	
   566                           ; 1 bytes @ 0x0
   567                           
   568     0070                     ?_main:	
   569                           ; 1 bytes @ 0x0
   570                           
   571     0070                     ?_isr:	
   572                           ; 1 bytes @ 0x0
   573                           
   574     0070                     ??_isr:	
   575                           ; 1 bytes @ 0x0
   576                           
   577     0070                     ?_spiReceiveWait:	
   578                           ; 1 bytes @ 0x0
   579                           
   580     0070                     ?_Lcd_Port:	
   581                           ; 1 bytes @ 0x0
   582                           
   583     0070                     ?_Lcd_Cmd:	
   584                           ; 1 bytes @ 0x0
   585                           
   586     0070                     ?_Lcd_Write_Char:	
   587                           ; 1 bytes @ 0x0
   588                           
   589                           
   590                           ; 1 bytes @ 0x0
   591     0070                     	ds	2
   592     0072                     ??_spiWrite:
   593     0072                     ??_spiRead:	
   594                           ; 1 bytes @ 0x2
   595                           
   596     0072                     ?_spiInit:	
   597                           ; 1 bytes @ 0x2
   598                           
   599     0072                     ??_isdigit:	
   600                           ; 1 bytes @ 0x2
   601                           
   602     0072                     ??_spiReceiveWait:	
   603                           ; 1 bytes @ 0x2
   604                           
   605     0072                     ??_Lcd_Port:	
   606                           ; 1 bytes @ 0x2
   607                           
   608     0072                     ?___wmul:	
   609                           ; 1 bytes @ 0x2
   610                           
   611     0072                     ?___lwdiv:	
   612                           ; 2 bytes @ 0x2
   613                           
   614     0072                     spiInit@sDataSample:	
   615                           ; 2 bytes @ 0x2
   616                           
   617     0072                     spiWrite@dat:	
   618                           ; 1 bytes @ 0x2
   619                           
   620     0072                     Lcd_Port@a:	
   621                           ; 1 bytes @ 0x2
   622                           
   623     0072                     _isdigit$912:	
   624                           ; 1 bytes @ 0x2
   625                           
   626     0072                     ___wmul@multiplier:	
   627                           ; 1 bytes @ 0x2
   628                           
   629     0072                     ___lwdiv@divisor:	
   630                           ; 2 bytes @ 0x2
   631                           
   632                           
   633                           ; 2 bytes @ 0x2
   634     0072                     	ds	1
   635     0073                     ??_Lcd_Cmd:
   636     0073                     ??_Lcd_Write_Char:	
   637                           ; 1 bytes @ 0x3
   638                           
   639     0073                     spiInit@sClockIdle:	
   640                           ; 1 bytes @ 0x3
   641                           
   642     0073                     isdigit@c:	
   643                           ; 1 bytes @ 0x3
   644                           
   645                           
   646                           ; 1 bytes @ 0x3
   647     0073                     	ds	1
   648     0074                     spiInit@sTransmitEdge:
   649     0074                     Lcd_Write_Char@a:	
   650                           ; 1 bytes @ 0x4
   651                           
   652     0074                     ___wmul@multiplicand:	
   653                           ; 1 bytes @ 0x4
   654                           
   655     0074                     ___lwdiv@dividend:	
   656                           ; 2 bytes @ 0x4
   657                           
   658                           
   659                           ; 2 bytes @ 0x4
   660     0074                     	ds	1
   661     0075                     ?_Lcd_Write_String:
   662     0075                     ??_spiInit:	
   663                           ; 1 bytes @ 0x5
   664                           
   665     0075                     spiInit@sType:	
   666                           ; 1 bytes @ 0x5
   667                           
   668     0075                     Lcd_Cmd@a:	
   669                           ; 1 bytes @ 0x5
   670                           
   671     0075                     Lcd_Write_String@a:	
   672                           ; 1 bytes @ 0x5
   673                           
   674                           
   675                           ; 2 bytes @ 0x5
   676     0075                     	ds	1
   677     0076                     ??_setup:
   678     0076                     ??_Lcd_Init:	
   679                           ; 1 bytes @ 0x6
   680                           
   681     0076                     ??_Lcd_Clear:	
   682                           ; 1 bytes @ 0x6
   683                           
   684     0076                     ?_Lcd_Set_Cursor:	
   685                           ; 1 bytes @ 0x6
   686                           
   687     0076                     ??___wmul:	
   688                           ; 1 bytes @ 0x6
   689                           
   690     0076                     ??___lwdiv:	
   691                           ; 1 bytes @ 0x6
   692                           
   693     0076                     Lcd_Set_Cursor@b:	
   694                           ; 1 bytes @ 0x6
   695                           
   696     0076                     ___wmul@product:	
   697                           ; 1 bytes @ 0x6
   698                           
   699                           
   700                           ; 2 bytes @ 0x6
   701     0076                     	ds	1
   702     0077                     ??_Lcd_Set_Cursor:
   703     0077                     ??_Lcd_Write_String:	
   704                           ; 1 bytes @ 0x7
   705                           
   706     0077                     Lcd_Set_Cursor@a:	
   707                           ; 1 bytes @ 0x7
   708                           
   709     0077                     ___lwdiv@quotient:	
   710                           ; 1 bytes @ 0x7
   711                           
   712                           
   713                           ; 2 bytes @ 0x7
   714     0077                     	ds	1
   715     0078                     ?___awdiv:
   716     0078                     Lcd_Set_Cursor@temp:	
   717                           ; 2 bytes @ 0x8
   718                           
   719     0078                     ___awdiv@divisor:	
   720                           ; 1 bytes @ 0x8
   721                           
   722                           
   723                           ; 2 bytes @ 0x8
   724     0078                     	ds	1
   725     0079                     ___lwdiv@counter:
   726                           
   727                           ; 1 bytes @ 0x9
   728     0079                     	ds	1
   729     007A                     ??___lwmod:
   730     007A                     Lcd_Write_String@i:	
   731                           ; 1 bytes @ 0xA
   732                           
   733     007A                     ___awdiv@dividend:	
   734                           ; 2 bytes @ 0xA
   735                           
   736                           
   737                           ; 2 bytes @ 0xA
   738     007A                     	ds	1
   739     007B                     ___lwmod@counter:
   740                           
   741                           ; 1 bytes @ 0xB
   742     007B                     	ds	1
   743                           
   744                           	psect	cstackBANK0
   745     0047                     __pcstackBANK0:
   746     0047                     ??___awdiv:
   747     0047                     ?___lwmod:	
   748                           ; 1 bytes @ 0x0
   749                           
   750     0047                     ___lwmod@divisor:	
   751                           ; 2 bytes @ 0x0
   752                           
   753                           
   754                           ; 2 bytes @ 0x0
   755     0047                     	ds	1
   756     0048                     ___awdiv@counter:
   757                           
   758                           ; 1 bytes @ 0x1
   759     0048                     	ds	1
   760     0049                     ___awdiv@sign:
   761     0049                     ___lwmod@dividend:	
   762                           ; 1 bytes @ 0x2
   763                           
   764                           
   765                           ; 2 bytes @ 0x2
   766     0049                     	ds	1
   767     004A                     ___awdiv@quotient:
   768                           
   769                           ; 2 bytes @ 0x3
   770     004A                     	ds	1
   771     004B                     ?_sprintf:
   772     004B                     sprintf@f:	
   773                           ; 2 bytes @ 0x4
   774                           
   775                           
   776                           ; 1 bytes @ 0x4
   777     004B                     	ds	1
   778     004C                     ?_map:
   779     004C                     ?___awmod:	
   780                           ; 2 bytes @ 0x5
   781                           
   782     004C                     map@inputmin:	
   783                           ; 2 bytes @ 0x5
   784                           
   785     004C                     ___awmod@divisor:	
   786                           ; 2 bytes @ 0x5
   787                           
   788                           
   789                           ; 2 bytes @ 0x5
   790     004C                     	ds	2
   791     004E                     map@inputmax:
   792     004E                     ___awmod@dividend:	
   793                           ; 2 bytes @ 0x7
   794                           
   795                           
   796                           ; 2 bytes @ 0x7
   797     004E                     	ds	2
   798     0050                     ??___awmod:
   799     0050                     map@outmin:	
   800                           ; 1 bytes @ 0x9
   801                           
   802                           
   803                           ; 2 bytes @ 0x9
   804     0050                     	ds	1
   805     0051                     ___awmod@counter:
   806                           
   807                           ; 1 bytes @ 0xA
   808     0051                     	ds	1
   809     0052                     ??_sprintf:
   810     0052                     ___awmod@sign:	
   811                           ; 1 bytes @ 0xB
   812                           
   813     0052                     map@outmax:	
   814                           ; 1 bytes @ 0xB
   815                           
   816                           
   817                           ; 2 bytes @ 0xB
   818     0052                     	ds	2
   819     0054                     ??_map:
   820                           
   821                           ; 1 bytes @ 0xD
   822     0054                     	ds	1
   823     0055                     map@value:
   824     0055                     sprintf@ap:	
   825                           ; 1 bytes @ 0xE
   826                           
   827                           
   828                           ; 1 bytes @ 0xE
   829     0055                     	ds	1
   830     0056                     sprintf@prec:
   831                           
   832                           ; 1 bytes @ 0xF
   833     0056                     	ds	1
   834     0057                     sprintf@val:
   835                           
   836                           ; 2 bytes @ 0x10
   837     0057                     	ds	2
   838     0059                     sprintf@flag:
   839                           
   840                           ; 1 bytes @ 0x12
   841     0059                     	ds	1
   842     005A                     sprintf@width:
   843                           
   844                           ; 2 bytes @ 0x13
   845     005A                     	ds	2
   846     005C                     sprintf@sp:
   847                           
   848                           ; 1 bytes @ 0x15
   849     005C                     	ds	1
   850     005D                     sprintf@c:
   851                           
   852                           ; 1 bytes @ 0x16
   853     005D                     	ds	1
   854     005E                     ??_main:
   855                           
   856                           ; 1 bytes @ 0x17
   857     005E                     	ds	2
   858                           
   859                           	psect	maintext
   860     0024                     __pmaintext:	
   861 ;;
   862 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   863 ;;
   864 ;; *************** function _main *****************
   865 ;; Defined at:
   866 ;;		line 62 in file "main.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : B00/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   880 ;;      Params:         0       0       0       0       0
   881 ;;      Locals:         0       0       0       0       0
   882 ;;      Temps:          0       2       0       0       0
   883 ;;      Totals:         0       2       0       0       0
   884 ;;Total ram usage:        2 bytes
   885 ;; Hardware stack levels required when called: 4
   886 ;; This function calls:
   887 ;;		_Lcd_Clear
   888 ;;		_Lcd_Init
   889 ;;		_Lcd_Set_Cursor
   890 ;;		_Lcd_Write_String
   891 ;;		___awdiv
   892 ;;		___awmod
   893 ;;		___wmul
   894 ;;		_map
   895 ;;		_setup
   896 ;;		_spiRead
   897 ;;		_spiWrite
   898 ;;		_sprintf
   899 ;; This function is called by:
   900 ;;		Startup code after reset
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904     0024                     _main:	
   905                           ;psect for function _main
   906                           
   907     0024                     l1708:	
   908                           ;incstack = 0
   909                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   910                           
   911                           
   912                           ;main.c: 63:     setup();
   913     0024  120A  118A  2698  120A  118A  	fcall	_setup
   914                           
   915                           ;main.c: 66:     Lcd_Init();
   916     0029  120A  118A  24DE  120A  118A  	fcall	_Lcd_Init
   917                           
   918                           ;main.c: 67:     Lcd_Clear();
   919     002E  120A  118A  2759  120A  118A  	fcall	_Lcd_Clear
   920                           
   921                           ;main.c: 69:     Lcd_Set_Cursor(1,7);
   922     0033  3007               	movlw	7
   923     0034  00F6               	movwf	Lcd_Set_Cursor@b
   924     0035  3001               	movlw	1
   925     0036  120A  118A  26E2  120A  118A  	fcall	_Lcd_Set_Cursor
   926     003B                     l1710:
   927                           
   928                           ;main.c: 70:     Lcd_Write_String("S2:");
   929     003B  301D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   930     003C  00F5               	movwf	Lcd_Write_String@a
   931     003D  3080               	movlw	128
   932     003E  00F6               	movwf	Lcd_Write_String@a+1
   933     003F  120A  118A  2573  120A  118A  	fcall	_Lcd_Write_String
   934     0044                     l1712:
   935                           
   936                           ;main.c: 72:     Lcd_Set_Cursor(1,1);
   937     0044  01F6               	clrf	Lcd_Set_Cursor@b
   938     0045  0AF6               	incf	Lcd_Set_Cursor@b,f
   939     0046  3001               	movlw	1
   940     0047  120A  118A  26E2  120A  118A  	fcall	_Lcd_Set_Cursor
   941                           
   942                           ;main.c: 73:     Lcd_Write_String("S1:");
   943     004C  3019               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   944     004D  00F5               	movwf	Lcd_Write_String@a
   945     004E  3080               	movlw	128
   946     004F  00F6               	movwf	Lcd_Write_String@a+1
   947     0050  120A  118A  2573  120A  118A  	fcall	_Lcd_Write_String
   948     0055                     l1714:
   949                           
   950                           ;main.c: 75:     Lcd_Set_Cursor(1,14);
   951     0055  300E               	movlw	14
   952     0056  00F6               	movwf	Lcd_Set_Cursor@b
   953     0057  3001               	movlw	1
   954     0058  120A  118A  26E2  120A  118A  	fcall	_Lcd_Set_Cursor
   955     005D                     l1716:
   956                           
   957                           ;main.c: 76:     Lcd_Write_String("S3:");
   958     005D  3021               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   959     005E  00F5               	movwf	Lcd_Write_String@a
   960     005F  3080               	movlw	128
   961     0060  00F6               	movwf	Lcd_Write_String@a+1
   962     0061  120A  118A  2573  120A  118A  	fcall	_Lcd_Write_String
   963     0066                     l1718:
   964                           
   965                           ;main.c: 79:          PORTCbits.RC2 = 0;
   966     0066  1283               	bcf	3,5	;RP0=0, select bank0
   967     0067  1303               	bcf	3,6	;RP1=0, select bank0
   968     0068  1107               	bcf	7,2	;volatile
   969     0069                     l1720:
   970                           
   971                           ;main.c: 80:         _delay((unsigned long)((1)*(4000000/4000.0)));
   972     0069  30C7               	movlw	199
   973     006A  1283               	bcf	3,5	;RP0=0, select bank0
   974     006B  1303               	bcf	3,6	;RP1=0, select bank0
   975     006C  00DE               	movwf	??_main
   976     006D                     u1437:
   977     006D  286E               	nop2
   978     006E  0BDE               	decfsz	??_main,f
   979     006F  286D               	goto	u1437
   980     0070  2871               	nop2
   981     0071                     l1722:
   982                           
   983                           ;main.c: 82:         spiWrite(1);
   984     0071  3001               	movlw	1
   985     0072  120A  118A  2785  120A  118A  	fcall	_spiWrite
   986     0077                     l1724:
   987                           
   988                           ;main.c: 83:         voltaje1 = spiRead();
   989     0077  120A  118A  2766  120A  118A  	fcall	_spiRead
   990     007C  1283               	bcf	3,5	;RP0=0, select bank0
   991     007D  1303               	bcf	3,6	;RP1=0, select bank0
   992     007E  00B2               	movwf	_voltaje1
   993     007F                     l1726:
   994                           
   995                           ;main.c: 85:         _delay((unsigned long)((1)*(4000000/4000.0)));
   996     007F  30C7               	movlw	199
   997     0080  1283               	bcf	3,5	;RP0=0, select bank0
   998     0081  1303               	bcf	3,6	;RP1=0, select bank0
   999     0082  00DE               	movwf	??_main
  1000     0083                     u1447:
  1001     0083  2884               	nop2
  1002     0084  0BDE               	decfsz	??_main,f
  1003     0085  2883               	goto	u1447
  1004     0086  2887               	nop2
  1005     0087                     l1728:
  1006                           
  1007                           ;main.c: 86:         PORTCbits.RC2 = 1;
  1008     0087  1283               	bcf	3,5	;RP0=0, select bank0
  1009     0088  1303               	bcf	3,6	;RP1=0, select bank0
  1010     0089  1507               	bsf	7,2	;volatile
  1011     008A                     l1730:
  1012                           
  1013                           ;main.c: 88:         PORTCbits.RC2 = 0;
  1014     008A  1107               	bcf	7,2	;volatile
  1015     008B                     l1732:
  1016                           
  1017                           ;main.c: 89:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1018     008B  30C7               	movlw	199
  1019     008C  1283               	bcf	3,5	;RP0=0, select bank0
  1020     008D  1303               	bcf	3,6	;RP1=0, select bank0
  1021     008E  00DE               	movwf	??_main
  1022     008F                     u1457:
  1023     008F  2890               	nop2
  1024     0090  0BDE               	decfsz	??_main,f
  1025     0091  288F               	goto	u1457
  1026     0092  2893               	nop2
  1027     0093                     l1734:
  1028                           
  1029                           ;main.c: 91:         spiWrite(3);
  1030     0093  3003               	movlw	3
  1031     0094  120A  118A  2785  120A  118A  	fcall	_spiWrite
  1032     0099                     l1736:
  1033                           
  1034                           ;main.c: 92:         contador = spiRead();
  1035     0099  120A  118A  2766  120A  118A  	fcall	_spiRead
  1036     009E  1283               	bcf	3,5	;RP0=0, select bank0
  1037     009F  1303               	bcf	3,6	;RP1=0, select bank0
  1038     00A0  00B0               	movwf	_contador
  1039     00A1                     l1738:
  1040                           
  1041                           ;main.c: 94:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1042     00A1  30C7               	movlw	199
  1043     00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1044     00A3  1303               	bcf	3,6	;RP1=0, select bank0
  1045     00A4  00DE               	movwf	??_main
  1046     00A5                     u1467:
  1047     00A5  28A6               	nop2
  1048     00A6  0BDE               	decfsz	??_main,f
  1049     00A7  28A5               	goto	u1467
  1050     00A8  28A9               	nop2
  1051     00A9                     l1740:
  1052                           
  1053                           ;main.c: 95:         PORTCbits.RC2 = 1;
  1054     00A9  1283               	bcf	3,5	;RP0=0, select bank0
  1055     00AA  1303               	bcf	3,6	;RP1=0, select bank0
  1056     00AB  1507               	bsf	7,2	;volatile
  1057     00AC                     l1742:
  1058                           
  1059                           ;main.c: 97:         PORTCbits.RC1 = 0;
  1060     00AC  1087               	bcf	7,1	;volatile
  1061     00AD                     l1744:
  1062                           
  1063                           ;main.c: 98:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1064     00AD  30C7               	movlw	199
  1065     00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1066     00AF  1303               	bcf	3,6	;RP1=0, select bank0
  1067     00B0  00DE               	movwf	??_main
  1068     00B1                     u1477:
  1069     00B1  28B2               	nop2
  1070     00B2  0BDE               	decfsz	??_main,f
  1071     00B3  28B1               	goto	u1477
  1072     00B4  28B5               	nop2
  1073     00B5                     l1746:
  1074                           
  1075                           ;main.c: 100:         spiWrite(2);
  1076     00B5  3002               	movlw	2
  1077     00B6  120A  118A  2785  120A  118A  	fcall	_spiWrite
  1078     00BB                     l1748:
  1079                           
  1080                           ;main.c: 101:         voltaje2 = spiRead();
  1081     00BB  120A  118A  2766  120A  118A  	fcall	_spiRead
  1082     00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1083     00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1084     00C2  00B1               	movwf	_voltaje2
  1085     00C3                     l1750:
  1086                           
  1087                           ;main.c: 103:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1088     00C3  30C7               	movlw	199
  1089     00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1090     00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1091     00C6  00DE               	movwf	??_main
  1092     00C7                     u1487:
  1093     00C7  28C8               	nop2
  1094     00C8  0BDE               	decfsz	??_main,f
  1095     00C9  28C7               	goto	u1487
  1096     00CA  28CB               	nop2
  1097     00CB                     l1752:
  1098                           
  1099                           ;main.c: 104:         PORTCbits.RC1 = 1;
  1100     00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1101     00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1102     00CD  1487               	bsf	7,1	;volatile
  1103                           
  1104                           ;main.c: 107:         vol1 = map(voltaje1, 0, 255, 0, 100);
  1105     00CE  3000               	movlw	0
  1106     00CF  00CC               	movwf	map@inputmin
  1107     00D0  00CD               	movwf	map@inputmin+1
  1108     00D1  30FF               	movlw	255
  1109     00D2  00CE               	movwf	map@inputmax
  1110     00D3  3000               	movlw	0
  1111     00D4  00CF               	movwf	map@inputmax+1
  1112     00D5  3000               	movlw	0
  1113     00D6  00D0               	movwf	map@outmin
  1114     00D7  00D1               	movwf	map@outmin+1
  1115     00D8  3064               	movlw	100
  1116     00D9  00D2               	movwf	map@outmax
  1117     00DA  3000               	movlw	0
  1118     00DB  00D3               	movwf	map@outmax+1
  1119     00DC  0832               	movf	_voltaje1,w
  1120     00DD  120A  118A  262F  120A  118A  	fcall	_map
  1121     00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1122     00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1123     00E4  084D               	movf	?_map+1,w
  1124     00E5  00AF               	movwf	_vol1+1
  1125     00E6  084C               	movf	?_map,w
  1126     00E7  00AE               	movwf	_vol1
  1127                           
  1128                           ;main.c: 108:         unidad1 = (vol1*5)/100;
  1129     00E8  3064               	movlw	100
  1130     00E9  00F8               	movwf	___awdiv@divisor
  1131     00EA  3000               	movlw	0
  1132     00EB  00F9               	movwf	___awdiv@divisor+1
  1133     00EC  082F               	movf	_vol1+1,w
  1134     00ED  00F3               	movwf	___wmul@multiplier+1
  1135     00EE  082E               	movf	_vol1,w
  1136     00EF  00F2               	movwf	___wmul@multiplier
  1137     00F0  3005               	movlw	5
  1138     00F1  00F4               	movwf	___wmul@multiplicand
  1139     00F2  3000               	movlw	0
  1140     00F3  00F5               	movwf	___wmul@multiplicand+1
  1141     00F4  120A  118A  26BD  120A  118A  	fcall	___wmul
  1142     00F9  0873               	movf	?___wmul+1,w
  1143     00FA  00FB               	movwf	___awdiv@dividend+1
  1144     00FB  0872               	movf	?___wmul,w
  1145     00FC  00FA               	movwf	___awdiv@dividend
  1146     00FD  120A  118A  241A  120A  118A  	fcall	___awdiv
  1147     0102  0879               	movf	?___awdiv+1,w
  1148     0103  1283               	bcf	3,5	;RP0=0, select bank0
  1149     0104  1303               	bcf	3,6	;RP1=0, select bank0
  1150     0105  00AB               	movwf	_unidad1+1
  1151     0106  0878               	movf	?___awdiv,w
  1152     0107  00AA               	movwf	_unidad1
  1153                           
  1154                           ;main.c: 109:         decima1 = ((vol1*5)/10)%10;
  1155     0108  300A               	movlw	10
  1156     0109  00CC               	movwf	___awmod@divisor
  1157     010A  3000               	movlw	0
  1158     010B  00CD               	movwf	___awmod@divisor+1
  1159     010C  300A               	movlw	10
  1160     010D  00F8               	movwf	___awdiv@divisor
  1161     010E  3000               	movlw	0
  1162     010F  00F9               	movwf	___awdiv@divisor+1
  1163     0110  082F               	movf	_vol1+1,w
  1164     0111  00F3               	movwf	___wmul@multiplier+1
  1165     0112  082E               	movf	_vol1,w
  1166     0113  00F2               	movwf	___wmul@multiplier
  1167     0114  3005               	movlw	5
  1168     0115  00F4               	movwf	___wmul@multiplicand
  1169     0116  3000               	movlw	0
  1170     0117  00F5               	movwf	___wmul@multiplicand+1
  1171     0118  120A  118A  26BD  120A  118A  	fcall	___wmul
  1172     011D  0873               	movf	?___wmul+1,w
  1173     011E  00FB               	movwf	___awdiv@dividend+1
  1174     011F  0872               	movf	?___wmul,w
  1175     0120  00FA               	movwf	___awdiv@dividend
  1176     0121  120A  118A  241A  120A  118A  	fcall	___awdiv
  1177     0126  0879               	movf	?___awdiv+1,w
  1178     0127  1283               	bcf	3,5	;RP0=0, select bank0
  1179     0128  1303               	bcf	3,6	;RP1=0, select bank0
  1180     0129  00CF               	movwf	___awmod@dividend+1
  1181     012A  0878               	movf	?___awdiv,w
  1182     012B  00CE               	movwf	___awmod@dividend
  1183     012C  120A  118A  2483  120A  118A  	fcall	___awmod
  1184     0131  1283               	bcf	3,5	;RP0=0, select bank0
  1185     0132  1303               	bcf	3,6	;RP1=0, select bank0
  1186     0133  084D               	movf	?___awmod+1,w
  1187     0134  00A9               	movwf	_decima1+1
  1188     0135  084C               	movf	?___awmod,w
  1189     0136  00A8               	movwf	_decima1
  1190                           
  1191                           ;main.c: 110:         centesima1 = (vol1*5)%10;
  1192     0137  300A               	movlw	10
  1193     0138  00CC               	movwf	___awmod@divisor
  1194     0139  3000               	movlw	0
  1195     013A  00CD               	movwf	___awmod@divisor+1
  1196     013B  082F               	movf	_vol1+1,w
  1197     013C  00F3               	movwf	___wmul@multiplier+1
  1198     013D  082E               	movf	_vol1,w
  1199     013E  00F2               	movwf	___wmul@multiplier
  1200     013F  3005               	movlw	5
  1201     0140  00F4               	movwf	___wmul@multiplicand
  1202     0141  3000               	movlw	0
  1203     0142  00F5               	movwf	___wmul@multiplicand+1
  1204     0143  120A  118A  26BD  120A  118A  	fcall	___wmul
  1205     0148  0873               	movf	?___wmul+1,w
  1206     0149  1283               	bcf	3,5	;RP0=0, select bank0
  1207     014A  1303               	bcf	3,6	;RP1=0, select bank0
  1208     014B  00CF               	movwf	___awmod@dividend+1
  1209     014C  0872               	movf	?___wmul,w
  1210     014D  00CE               	movwf	___awmod@dividend
  1211     014E  120A  118A  2483  120A  118A  	fcall	___awmod
  1212     0153  1283               	bcf	3,5	;RP0=0, select bank0
  1213     0154  1303               	bcf	3,6	;RP1=0, select bank0
  1214     0155  084D               	movf	?___awmod+1,w
  1215     0156  00A7               	movwf	_centesima1+1
  1216     0157  084C               	movf	?___awmod,w
  1217     0158  00A6               	movwf	_centesima1
  1218                           
  1219                           ;main.c: 111:         Lcd_Set_Cursor(2,1);
  1220     0159  01F6               	clrf	Lcd_Set_Cursor@b
  1221     015A  0AF6               	incf	Lcd_Set_Cursor@b,f
  1222     015B  3002               	movlw	2
  1223     015C  120A  118A  26E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1224     0161                     l1754:
  1225                           
  1226                           ;main.c: 112:         sprintf(buffer, "%d.%d%dV" , unidad1 , decima1 , centesima1 );
  1227     0161  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1228     0162  1283               	bcf	3,5	;RP0=0, select bank0
  1229     0163  1303               	bcf	3,6	;RP1=0, select bank0
  1230     0164  00CB               	movwf	sprintf@f
  1231     0165  082B               	movf	_unidad1+1,w
  1232     0166  00CD               	movwf	?_sprintf+2
  1233     0167  082A               	movf	_unidad1,w
  1234     0168  00CC               	movwf	?_sprintf+1
  1235     0169  0829               	movf	_decima1+1,w
  1236     016A  00CF               	movwf	?_sprintf+4
  1237     016B  0828               	movf	_decima1,w
  1238     016C  00CE               	movwf	?_sprintf+3
  1239     016D  0827               	movf	_centesima1+1,w
  1240     016E  00D1               	movwf	?_sprintf+6
  1241     016F  0826               	movf	_centesima1,w
  1242     0170  00D0               	movwf	?_sprintf+5
  1243     0171  3033               	movlw	(low (_buffer| 0))& (0+255)
  1244     0172  120A  118A  225A  120A  118A  	fcall	_sprintf
  1245     0177                     l1756:
  1246                           
  1247                           ;main.c: 113:         Lcd_Write_String(buffer);
  1248     0177  3033               	movlw	(low (_buffer| 0))& (0+255)
  1249     0178  00F5               	movwf	Lcd_Write_String@a
  1250     0179  3000               	movlw	0
  1251     017A  00F6               	movwf	Lcd_Write_String@a+1
  1252     017B  120A  118A  2573  120A  118A  	fcall	_Lcd_Write_String
  1253                           
  1254                           ;main.c: 115:         vol2 = map(voltaje2, 0, 255, 0, 100);
  1255     0180  3000               	movlw	0
  1256     0181  1283               	bcf	3,5	;RP0=0, select bank0
  1257     0182  1303               	bcf	3,6	;RP1=0, select bank0
  1258     0183  00CC               	movwf	map@inputmin
  1259     0184  00CD               	movwf	map@inputmin+1
  1260     0185  30FF               	movlw	255
  1261     0186  00CE               	movwf	map@inputmax
  1262     0187  3000               	movlw	0
  1263     0188  00CF               	movwf	map@inputmax+1
  1264     0189  3000               	movlw	0
  1265     018A  00D0               	movwf	map@outmin
  1266     018B  00D1               	movwf	map@outmin+1
  1267     018C  3064               	movlw	100
  1268     018D  00D2               	movwf	map@outmax
  1269     018E  3000               	movlw	0
  1270     018F  00D3               	movwf	map@outmax+1
  1271     0190  0831               	movf	_voltaje2,w
  1272     0191  120A  118A  262F  120A  118A  	fcall	_map
  1273     0196  1283               	bcf	3,5	;RP0=0, select bank0
  1274     0197  1303               	bcf	3,6	;RP1=0, select bank0
  1275     0198  084D               	movf	?_map+1,w
  1276     0199  00AD               	movwf	_vol2+1
  1277     019A  084C               	movf	?_map,w
  1278     019B  00AC               	movwf	_vol2
  1279                           
  1280                           ;main.c: 116:         unidad2 = (vol2*5)/100;
  1281     019C  3064               	movlw	100
  1282     019D  00F8               	movwf	___awdiv@divisor
  1283     019E  3000               	movlw	0
  1284     019F  00F9               	movwf	___awdiv@divisor+1
  1285     01A0  082D               	movf	_vol2+1,w
  1286     01A1  00F3               	movwf	___wmul@multiplier+1
  1287     01A2  082C               	movf	_vol2,w
  1288     01A3  00F2               	movwf	___wmul@multiplier
  1289     01A4  3005               	movlw	5
  1290     01A5  00F4               	movwf	___wmul@multiplicand
  1291     01A6  3000               	movlw	0
  1292     01A7  00F5               	movwf	___wmul@multiplicand+1
  1293     01A8  120A  118A  26BD  120A  118A  	fcall	___wmul
  1294     01AD  0873               	movf	?___wmul+1,w
  1295     01AE  00FB               	movwf	___awdiv@dividend+1
  1296     01AF  0872               	movf	?___wmul,w
  1297     01B0  00FA               	movwf	___awdiv@dividend
  1298     01B1  120A  118A  241A  120A  118A  	fcall	___awdiv
  1299     01B6  0879               	movf	?___awdiv+1,w
  1300     01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1301     01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1302     01B9  00A5               	movwf	_unidad2+1
  1303     01BA  0878               	movf	?___awdiv,w
  1304     01BB  00A4               	movwf	_unidad2
  1305                           
  1306                           ;main.c: 117:         decima2 = ((vol2*5)/10)%10;
  1307     01BC  300A               	movlw	10
  1308     01BD  00CC               	movwf	___awmod@divisor
  1309     01BE  3000               	movlw	0
  1310     01BF  00CD               	movwf	___awmod@divisor+1
  1311     01C0  300A               	movlw	10
  1312     01C1  00F8               	movwf	___awdiv@divisor
  1313     01C2  3000               	movlw	0
  1314     01C3  00F9               	movwf	___awdiv@divisor+1
  1315     01C4  082D               	movf	_vol2+1,w
  1316     01C5  00F3               	movwf	___wmul@multiplier+1
  1317     01C6  082C               	movf	_vol2,w
  1318     01C7  00F2               	movwf	___wmul@multiplier
  1319     01C8  3005               	movlw	5
  1320     01C9  00F4               	movwf	___wmul@multiplicand
  1321     01CA  3000               	movlw	0
  1322     01CB  00F5               	movwf	___wmul@multiplicand+1
  1323     01CC  120A  118A  26BD  120A  118A  	fcall	___wmul
  1324     01D1  0873               	movf	?___wmul+1,w
  1325     01D2  00FB               	movwf	___awdiv@dividend+1
  1326     01D3  0872               	movf	?___wmul,w
  1327     01D4  00FA               	movwf	___awdiv@dividend
  1328     01D5  120A  118A  241A  120A  118A  	fcall	___awdiv
  1329     01DA  0879               	movf	?___awdiv+1,w
  1330     01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1331     01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1332     01DD  00CF               	movwf	___awmod@dividend+1
  1333     01DE  0878               	movf	?___awdiv,w
  1334     01DF  00CE               	movwf	___awmod@dividend
  1335     01E0  120A  118A  2483  120A  118A  	fcall	___awmod
  1336     01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1337     01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1338     01E7  084D               	movf	?___awmod+1,w
  1339     01E8  00A3               	movwf	_decima2+1
  1340     01E9  084C               	movf	?___awmod,w
  1341     01EA  00A2               	movwf	_decima2
  1342                           
  1343                           ;main.c: 118:         centesima2 = (vol2*5)%10;
  1344     01EB  300A               	movlw	10
  1345     01EC  00CC               	movwf	___awmod@divisor
  1346     01ED  3000               	movlw	0
  1347     01EE  00CD               	movwf	___awmod@divisor+1
  1348     01EF  082D               	movf	_vol2+1,w
  1349     01F0  00F3               	movwf	___wmul@multiplier+1
  1350     01F1  082C               	movf	_vol2,w
  1351     01F2  00F2               	movwf	___wmul@multiplier
  1352     01F3  3005               	movlw	5
  1353     01F4  00F4               	movwf	___wmul@multiplicand
  1354     01F5  3000               	movlw	0
  1355     01F6  00F5               	movwf	___wmul@multiplicand+1
  1356     01F7  120A  118A  26BD  120A  118A  	fcall	___wmul
  1357     01FC  0873               	movf	?___wmul+1,w
  1358     01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1359     01FE  1303               	bcf	3,6	;RP1=0, select bank0
  1360     01FF  00CF               	movwf	___awmod@dividend+1
  1361     0200  0872               	movf	?___wmul,w
  1362     0201  00CE               	movwf	___awmod@dividend
  1363     0202  120A  118A  2483  120A  118A  	fcall	___awmod
  1364     0207  1283               	bcf	3,5	;RP0=0, select bank0
  1365     0208  1303               	bcf	3,6	;RP1=0, select bank0
  1366     0209  084D               	movf	?___awmod+1,w
  1367     020A  00A1               	movwf	_centesima2+1
  1368     020B  084C               	movf	?___awmod,w
  1369     020C  00A0               	movwf	_centesima2
  1370                           
  1371                           ;main.c: 119:         Lcd_Set_Cursor(2,7);
  1372     020D  3007               	movlw	7
  1373     020E  00F6               	movwf	Lcd_Set_Cursor@b
  1374     020F  3002               	movlw	2
  1375     0210  120A  118A  26E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1376     0215                     l1758:
  1377                           
  1378                           ;main.c: 120:         sprintf(buffer1, "%d.%d%dV" , unidad2 , decima2 , centesima2 );
  1379     0215  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1380     0216  1283               	bcf	3,5	;RP0=0, select bank0
  1381     0217  1303               	bcf	3,6	;RP1=0, select bank0
  1382     0218  00CB               	movwf	sprintf@f
  1383     0219  0825               	movf	_unidad2+1,w
  1384     021A  00CD               	movwf	?_sprintf+2
  1385     021B  0824               	movf	_unidad2,w
  1386     021C  00CC               	movwf	?_sprintf+1
  1387     021D  0823               	movf	_decima2+1,w
  1388     021E  00CF               	movwf	?_sprintf+4
  1389     021F  0822               	movf	_decima2,w
  1390     0220  00CE               	movwf	?_sprintf+3
  1391     0221  0821               	movf	_centesima2+1,w
  1392     0222  00D1               	movwf	?_sprintf+6
  1393     0223  0820               	movf	_centesima2,w
  1394     0224  00D0               	movwf	?_sprintf+5
  1395     0225  30B4               	movlw	(low (_buffer1| 0))& (0+255)
  1396     0226  120A  118A  225A  120A  118A  	fcall	_sprintf
  1397     022B                     l1760:
  1398                           
  1399                           ;main.c: 121:         Lcd_Write_String(buffer1);
  1400     022B  30B4               	movlw	(low (_buffer1| 0))& (0+255)
  1401     022C  00F5               	movwf	Lcd_Write_String@a
  1402     022D  3000               	movlw	0
  1403     022E  00F6               	movwf	Lcd_Write_String@a+1
  1404     022F  120A  118A  2573  120A  118A  	fcall	_Lcd_Write_String
  1405                           
  1406                           ;main.c: 123:         Lcd_Set_Cursor(2,14);
  1407     0234  300E               	movlw	14
  1408     0235  00F6               	movwf	Lcd_Set_Cursor@b
  1409     0236  3002               	movlw	2
  1410     0237  120A  118A  26E2  120A  118A  	fcall	_Lcd_Set_Cursor
  1411     023C                     l1762:
  1412                           
  1413                           ;main.c: 124:         sprintf(buffer2, "%03d" , contador);
  1414     023C  3014               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1415     023D  1283               	bcf	3,5	;RP0=0, select bank0
  1416     023E  1303               	bcf	3,6	;RP1=0, select bank0
  1417     023F  00CB               	movwf	sprintf@f
  1418     0240  0830               	movf	_contador,w
  1419     0241  00DE               	movwf	??_main
  1420     0242  01DF               	clrf	??_main+1
  1421     0243  085E               	movf	??_main,w
  1422     0244  00CC               	movwf	?_sprintf+1
  1423     0245  085F               	movf	??_main+1,w
  1424     0246  00CD               	movwf	?_sprintf+2
  1425     0247  30A0               	movlw	(low (_buffer2| 0))& (0+255)
  1426     0248  120A  118A  225A  120A  118A  	fcall	_sprintf
  1427     024D                     l1764:
  1428                           
  1429                           ;main.c: 125:         Lcd_Write_String(buffer2);
  1430     024D  30A0               	movlw	(low (_buffer2| 0))& (0+255)
  1431     024E  00F5               	movwf	Lcd_Write_String@a
  1432     024F  3000               	movlw	0
  1433     0250  00F6               	movwf	Lcd_Write_String@a+1
  1434     0251  120A  118A  2573  120A  118A  	fcall	_Lcd_Write_String
  1435     0256  2866               	goto	l1718
  1436     0257  120A  118A  280C   	ljmp	start
  1437     025A                     __end_of_main:
  1438                           
  1439                           	psect	text1
  1440     025A                     __ptext1:	
  1441 ;; *************** function _sprintf *****************
  1442 ;; Defined at:
  1443 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  sp              1    wreg     PTR unsigned char 
  1446 ;;		 -> buffer2(20), buffer1(20), buffer(20), 
  1447 ;;  f               1    4[BANK0 ] PTR const unsigned char 
  1448 ;;		 -> STR_6(5), STR_5(9), STR_4(9), 
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;  sp              1   21[BANK0 ] PTR unsigned char 
  1451 ;;		 -> buffer2(20), buffer1(20), buffer(20), 
  1452 ;;  tmpval          4    0        struct .
  1453 ;;  width           2   19[BANK0 ] int 
  1454 ;;  val             2   16[BANK0 ] unsigned int 
  1455 ;;  cp              2    0        PTR const unsigned char 
  1456 ;;  len             2    0        unsigned int 
  1457 ;;  c               1   22[BANK0 ] unsigned char 
  1458 ;;  flag            1   18[BANK0 ] unsigned char 
  1459 ;;  prec            1   15[BANK0 ] char 
  1460 ;;  ap              1   14[BANK0 ] PTR void [1]
  1461 ;;		 -> ?_sprintf(2), 
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  2    4[BANK0 ] int 
  1464 ;; Registers used:
  1465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1471 ;;      Params:         0       7       0       0       0
  1472 ;;      Locals:         0       9       0       0       0
  1473 ;;      Temps:          0       3       0       0       0
  1474 ;;      Totals:         0      19       0       0       0
  1475 ;;Total ram usage:       19 bytes
  1476 ;; Hardware stack levels used: 1
  1477 ;; Hardware stack levels required when called: 2
  1478 ;; This function calls:
  1479 ;;		___lwdiv
  1480 ;;		___lwmod
  1481 ;;		___wmul
  1482 ;;		_isdigit
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488     025A                     _sprintf:	
  1489                           ;psect for function _sprintf
  1490                           
  1491                           
  1492                           ;incstack = 0
  1493                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1494                           ;sprintf@sp stored from wreg
  1495     025A  1283               	bcf	3,5	;RP0=0, select bank0
  1496     025B  1303               	bcf	3,6	;RP1=0, select bank0
  1497     025C  00DC               	movwf	sprintf@sp
  1498     025D                     l1552:
  1499                           
  1500                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1501     025D  304C               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1502     025E  00D5               	movwf	sprintf@ap
  1503                           
  1504                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1505     025F  2C05               	goto	l1656
  1506     0260                     l1554:
  1507                           
  1508                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1509     0260  3025               	movlw	37
  1510     0261  065D               	xorwf	sprintf@c,w
  1511     0262  1903               	btfsc	3,2
  1512     0263  2A65               	goto	u1161
  1513     0264  2A66               	goto	u1160
  1514     0265                     u1161:
  1515     0265  2A70               	goto	l1560
  1516     0266                     u1160:
  1517     0266                     l1556:
  1518                           
  1519                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1520     0266  085C               	movf	sprintf@sp,w
  1521     0267  0084               	movwf	4
  1522     0268  085D               	movf	sprintf@c,w
  1523     0269  1383               	bcf	3,7	;select IRP bank0
  1524     026A  0080               	movwf	0
  1525     026B                     l1558:
  1526     026B  3001               	movlw	1
  1527     026C  00D2               	movwf	??_sprintf
  1528     026D  0852               	movf	??_sprintf,w
  1529     026E  07DC               	addwf	sprintf@sp,f
  1530                           
  1531                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1532     026F  2C05               	goto	l1656
  1533     0270                     l1560:
  1534                           
  1535                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1536     0270  01DA               	clrf	sprintf@width
  1537     0271  01DB               	clrf	sprintf@width+1
  1538                           
  1539                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1540     0272  01D9               	clrf	sprintf@flag
  1541     0273  2A79               	goto	l1566
  1542     0274                     l278:	
  1543                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 596:    case '0':
  1544                           
  1545                           
  1546                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  1547     0274  1559               	bsf	sprintf@flag,2
  1548     0275                     l1562:
  1549                           
  1550                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 598:     f++;
  1551     0275  3001               	movlw	1
  1552     0276  00D2               	movwf	??_sprintf
  1553     0277  0852               	movf	??_sprintf,w
  1554     0278  07CB               	addwf	sprintf@f,f
  1555     0279                     l1566:	
  1556                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  1557                           
  1558     0279  084B               	movf	sprintf@f,w
  1559     027A  0084               	movwf	4
  1560     027B  120A  118A  266E  120A  118A  	fcall	stringdir
  1561     0280  00D2               	movwf	??_sprintf
  1562     0281  01D3               	clrf	??_sprintf+1
  1563                           
  1564                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1565                           ; Switch size 1, requested type "simple"
  1566                           ; Number of cases is 1, Range of values is 0 to 0
  1567                           ; switch strategies available:
  1568                           ; Name         Instructions Cycles
  1569                           ; simple_byte            4     3 (average)
  1570                           ; direct_byte           11     8 (fixed)
  1571                           ; jumptable            260     6 (fixed)
  1572                           ;	Chosen strategy is simple_byte
  1573     0282  0853               	movf	??_sprintf+1,w
  1574     0283  3A00               	xorlw	0	; case 0
  1575     0284  1903               	skipnz
  1576     0285  2A87               	goto	l1810
  1577     0286  2A8C               	goto	l1568
  1578     0287                     l1810:
  1579                           
  1580                           ; Switch size 1, requested type "simple"
  1581                           ; Number of cases is 1, Range of values is 48 to 48
  1582                           ; switch strategies available:
  1583                           ; Name         Instructions Cycles
  1584                           ; simple_byte            4     3 (average)
  1585                           ; direct_byte           14    11 (fixed)
  1586                           ; jumptable            263     9 (fixed)
  1587                           ;	Chosen strategy is simple_byte
  1588     0287  0852               	movf	??_sprintf,w
  1589     0288  3A30               	xorlw	48	; case 48
  1590     0289  1903               	skipnz
  1591     028A  2A74               	goto	l278
  1592     028B  2A8C               	goto	l1568
  1593     028C                     l1568:
  1594                           
  1595                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1596     028C  084B               	movf	sprintf@f,w
  1597     028D  0084               	movwf	4
  1598     028E  120A  118A  266E  120A  118A  	fcall	stringdir
  1599     0293  120A  118A  2747  120A  118A  	fcall	_isdigit
  1600     0298  1C03               	btfss	3,0
  1601     0299  2A9B               	goto	u1171
  1602     029A  2A9C               	goto	u1170
  1603     029B                     u1171:
  1604     029B  2ADC               	goto	l1582
  1605     029C                     u1170:
  1606     029C                     l1570:
  1607                           
  1608                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1609     029C  1283               	bcf	3,5	;RP0=0, select bank0
  1610     029D  1303               	bcf	3,6	;RP1=0, select bank0
  1611     029E  01DA               	clrf	sprintf@width
  1612     029F  01DB               	clrf	sprintf@width+1
  1613     02A0                     l1572:
  1614                           
  1615                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1616     02A0  300A               	movlw	10
  1617     02A1  00F2               	movwf	___wmul@multiplier
  1618     02A2  3000               	movlw	0
  1619     02A3  00F3               	movwf	___wmul@multiplier+1
  1620     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  1621     02A5  1303               	bcf	3,6	;RP1=0, select bank0
  1622     02A6  085B               	movf	sprintf@width+1,w
  1623     02A7  00F5               	movwf	___wmul@multiplicand+1
  1624     02A8  085A               	movf	sprintf@width,w
  1625     02A9  00F4               	movwf	___wmul@multiplicand
  1626     02AA  120A  118A  26BD  120A  118A  	fcall	___wmul
  1627     02AF  0873               	movf	?___wmul+1,w
  1628     02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1629     02B1  1303               	bcf	3,6	;RP1=0, select bank0
  1630     02B2  00DB               	movwf	sprintf@width+1
  1631     02B3  0872               	movf	?___wmul,w
  1632     02B4  00DA               	movwf	sprintf@width
  1633     02B5                     l1574:
  1634                           
  1635                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1636     02B5  084B               	movf	sprintf@f,w
  1637     02B6  0084               	movwf	4
  1638     02B7  120A  118A  266E  120A  118A  	fcall	stringdir
  1639     02BC  3ED0               	addlw	208
  1640     02BD  00D2               	movwf	??_sprintf
  1641     02BE  30FF               	movlw	255
  1642     02BF  1803               	skipnc
  1643     02C0  3000               	movlw	0
  1644     02C1  00D3               	movwf	??_sprintf+1
  1645     02C2  0852               	movf	??_sprintf,w
  1646     02C3  07DA               	addwf	sprintf@width,f
  1647     02C4  1803               	skipnc
  1648     02C5  0ADB               	incf	sprintf@width+1,f
  1649     02C6  0853               	movf	??_sprintf+1,w
  1650     02C7  07DB               	addwf	sprintf@width+1,f
  1651     02C8                     l1576:
  1652     02C8  3001               	movlw	1
  1653     02C9  00D2               	movwf	??_sprintf
  1654     02CA  0852               	movf	??_sprintf,w
  1655     02CB  07CB               	addwf	sprintf@f,f
  1656     02CC                     l1578:
  1657                           
  1658                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1659     02CC  084B               	movf	sprintf@f,w
  1660     02CD  0084               	movwf	4
  1661     02CE  120A  118A  266E  120A  118A  	fcall	stringdir
  1662     02D3  120A  118A  2747  120A  118A  	fcall	_isdigit
  1663     02D8  1803               	btfsc	3,0
  1664     02D9  2ADB               	goto	u1181
  1665     02DA  2ADC               	goto	u1180
  1666     02DB                     u1181:
  1667     02DB  2AA0               	goto	l1572
  1668     02DC                     u1180:
  1669     02DC                     l1582:
  1670     02DC  3001               	movlw	1
  1671     02DD  1283               	bcf	3,5	;RP0=0, select bank0
  1672     02DE  1303               	bcf	3,6	;RP1=0, select bank0
  1673     02DF  07CB               	addwf	sprintf@f,f
  1674     02E0  30FF               	movlw	-1
  1675     02E1  074B               	addwf	sprintf@f,w
  1676     02E2  0084               	movwf	4
  1677     02E3  120A  118A  266E  120A  118A  	fcall	stringdir
  1678     02E8  00DD               	movwf	sprintf@c
  1679     02E9  00D2               	movwf	??_sprintf
  1680     02EA  01D3               	clrf	??_sprintf+1
  1681                           
  1682                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1683                           ; Switch size 1, requested type "simple"
  1684                           ; Number of cases is 1, Range of values is 0 to 0
  1685                           ; switch strategies available:
  1686                           ; Name         Instructions Cycles
  1687                           ; simple_byte            4     3 (average)
  1688                           ; direct_byte           11     8 (fixed)
  1689                           ; jumptable            260     6 (fixed)
  1690                           ;	Chosen strategy is simple_byte
  1691     02EB  0853               	movf	??_sprintf+1,w
  1692     02EC  3A00               	xorlw	0	; case 0
  1693     02ED  1903               	skipnz
  1694     02EE  2AF0               	goto	l1812
  1695     02EF  2C05               	goto	l1656
  1696     02F0                     l1812:
  1697                           
  1698                           ; Switch size 1, requested type "simple"
  1699                           ; Number of cases is 3, Range of values is 0 to 105
  1700                           ; switch strategies available:
  1701                           ; Name         Instructions Cycles
  1702                           ; simple_byte           10     6 (average)
  1703                           ; jumptable            260     6 (fixed)
  1704                           ;	Chosen strategy is simple_byte
  1705     02F0  0852               	movf	??_sprintf,w
  1706     02F1  3A00               	xorlw	0	; case 0
  1707     02F2  1903               	skipnz
  1708     02F3  2C15               	goto	l1658
  1709     02F4  3A64               	xorlw	100	; case 100
  1710     02F5  1903               	skipnz
  1711     02F6  2AFB               	goto	l1584
  1712     02F7  3A0D               	xorlw	13	; case 105
  1713     02F8  1903               	skipnz
  1714     02F9  2AFB               	goto	l1584
  1715     02FA  2C05               	goto	l1656
  1716     02FB                     l1584:
  1717                           
  1718                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1719     02FB  0855               	movf	sprintf@ap,w
  1720     02FC  0084               	movwf	4
  1721     02FD  1383               	bcf	3,7	;select IRP bank0
  1722     02FE  0800               	movf	0,w
  1723     02FF  00D7               	movwf	sprintf@val
  1724     0300  0A84               	incf	4,f
  1725     0301  0800               	movf	0,w
  1726     0302  00D8               	movwf	sprintf@val+1
  1727     0303                     l1586:
  1728     0303  3002               	movlw	2
  1729     0304  00D2               	movwf	??_sprintf
  1730     0305  0852               	movf	??_sprintf,w
  1731     0306  07D5               	addwf	sprintf@ap,f
  1732     0307                     l1588:
  1733                           
  1734                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1735     0307  1FD8               	btfss	sprintf@val+1,7
  1736     0308  2B0A               	goto	u1191
  1737     0309  2B0B               	goto	u1190
  1738     030A                     u1191:
  1739     030A  2B14               	goto	l1594
  1740     030B                     u1190:
  1741     030B                     l1590:
  1742                           
  1743                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1744     030B  3003               	movlw	3
  1745     030C  00D2               	movwf	??_sprintf
  1746     030D  0852               	movf	??_sprintf,w
  1747     030E  04D9               	iorwf	sprintf@flag,f
  1748     030F                     l1592:
  1749                           
  1750                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1751     030F  09D7               	comf	sprintf@val,f
  1752     0310  09D8               	comf	sprintf@val+1,f
  1753     0311  0AD7               	incf	sprintf@val,f
  1754     0312  1903               	skipnz
  1755     0313  0AD8               	incf	sprintf@val+1,f
  1756     0314                     l1594:
  1757                           
  1758                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1759     0314  01DD               	clrf	sprintf@c
  1760     0315  0ADD               	incf	sprintf@c,f
  1761     0316                     l1600:
  1762                           
  1763                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1764     0316  085D               	movf	sprintf@c,w
  1765     0317  00D2               	movwf	??_sprintf
  1766     0318  0752               	addwf	??_sprintf,w
  1767     0319  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1768     031A  0084               	movwf	4
  1769     031B  120A  118A  266E  120A  118A  	fcall	stringdir
  1770     0320  00D3               	movwf	??_sprintf+1
  1771     0321  120A  118A  266E  120A  118A  	fcall	stringdir
  1772     0326  00D4               	movwf	??_sprintf+2
  1773     0327  0854               	movf	??_sprintf+2,w
  1774     0328  0258               	subwf	sprintf@val+1,w
  1775     0329  1D03               	skipz
  1776     032A  2B2D               	goto	u1205
  1777     032B  0853               	movf	??_sprintf+1,w
  1778     032C  0257               	subwf	sprintf@val,w
  1779     032D                     u1205:
  1780     032D  1803               	skipnc
  1781     032E  2B30               	goto	u1201
  1782     032F  2B31               	goto	u1200
  1783     0330                     u1201:
  1784     0330  2B32               	goto	l1604
  1785     0331                     u1200:
  1786     0331  2B3C               	goto	l1606
  1787     0332                     l1604:
  1788     0332  3001               	movlw	1
  1789     0333  00D2               	movwf	??_sprintf
  1790     0334  0852               	movf	??_sprintf,w
  1791     0335  07DD               	addwf	sprintf@c,f
  1792     0336  3005               	movlw	5
  1793     0337  065D               	xorwf	sprintf@c,w
  1794     0338  1D03               	btfss	3,2
  1795     0339  2B3B               	goto	u1211
  1796     033A  2B3C               	goto	u1210
  1797     033B                     u1211:
  1798     033B  2B16               	goto	l1600
  1799     033C                     u1210:
  1800     033C                     l1606:
  1801                           
  1802                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1803     033C  085A               	movf	sprintf@width,w
  1804     033D  045B               	iorwf	sprintf@width+1,w
  1805     033E  1903               	btfsc	3,2
  1806     033F  2B41               	goto	u1221
  1807     0340  2B42               	goto	u1220
  1808     0341                     u1221:
  1809     0341  2B4E               	goto	l296
  1810     0342                     u1220:
  1811     0342                     l1608:
  1812     0342  0859               	movf	sprintf@flag,w
  1813     0343  3903               	andlw	3
  1814     0344  1903               	btfsc	3,2
  1815     0345  2B47               	goto	u1231
  1816     0346  2B48               	goto	u1230
  1817     0347                     u1231:
  1818     0347  2B4E               	goto	l296
  1819     0348                     u1230:
  1820     0348                     l1610:
  1821                           
  1822                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1823     0348  30FF               	movlw	255
  1824     0349  07DA               	addwf	sprintf@width,f
  1825     034A  1803               	skipnc
  1826     034B  0ADB               	incf	sprintf@width+1,f
  1827     034C  30FF               	movlw	255
  1828     034D  07DB               	addwf	sprintf@width+1,f
  1829     034E                     l296:
  1830                           
  1831                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1832     034E  085B               	movf	sprintf@width+1,w
  1833     034F  3A80               	xorlw	128
  1834     0350  3C80               	sublw	128
  1835     0351  1D03               	skipz
  1836     0352  2B55               	goto	u1245
  1837     0353  085A               	movf	sprintf@width,w
  1838     0354  025D               	subwf	sprintf@c,w
  1839     0355                     u1245:
  1840     0355  1803               	skipnc
  1841     0356  2B58               	goto	u1241
  1842     0357  2B59               	goto	u1240
  1843     0358                     u1241:
  1844     0358  2B65               	goto	l1614
  1845     0359                     u1240:
  1846     0359                     l1612:
  1847                           
  1848                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1849     0359  1283               	bcf	3,5	;RP0=0, select bank0
  1850     035A  1303               	bcf	3,6	;RP1=0, select bank0
  1851     035B  085D               	movf	sprintf@c,w
  1852     035C  00D2               	movwf	??_sprintf
  1853     035D  01D3               	clrf	??_sprintf+1
  1854     035E  0852               	movf	??_sprintf,w
  1855     035F  02DA               	subwf	sprintf@width,f
  1856     0360  0853               	movf	??_sprintf+1,w
  1857     0361  1C03               	skipc
  1858     0362  03DB               	decf	sprintf@width+1,f
  1859     0363  02DB               	subwf	sprintf@width+1,f
  1860     0364  2B69               	goto	l1616
  1861     0365                     l1614:
  1862                           
  1863                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1864     0365  1283               	bcf	3,5	;RP0=0, select bank0
  1865     0366  1303               	bcf	3,6	;RP1=0, select bank0
  1866     0367  01DA               	clrf	sprintf@width
  1867     0368  01DB               	clrf	sprintf@width+1
  1868     0369                     l1616:
  1869                           
  1870                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1871     0369  1D59               	btfss	sprintf@flag,2
  1872     036A  2B6C               	goto	u1251
  1873     036B  2B6D               	goto	u1250
  1874     036C                     u1251:
  1875     036C  2B98               	goto	l1632
  1876     036D                     u1250:
  1877     036D                     l1618:
  1878                           
  1879                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1880     036D  0859               	movf	sprintf@flag,w
  1881     036E  3903               	andlw	3
  1882     036F  1903               	btfsc	3,2
  1883     0370  2B72               	goto	u1261
  1884     0371  2B73               	goto	u1260
  1885     0372                     u1261:
  1886     0372  2B7C               	goto	l1624
  1887     0373                     u1260:
  1888     0373                     l1620:
  1889                           
  1890                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1891     0373  085C               	movf	sprintf@sp,w
  1892     0374  0084               	movwf	4
  1893     0375  302D               	movlw	45
  1894     0376  1383               	bcf	3,7	;select IRP bank0
  1895     0377  0080               	movwf	0
  1896     0378                     l1622:
  1897     0378  3001               	movlw	1
  1898     0379  00D2               	movwf	??_sprintf
  1899     037A  0852               	movf	??_sprintf,w
  1900     037B  07DC               	addwf	sprintf@sp,f
  1901     037C                     l1624:
  1902                           
  1903                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1904     037C  085A               	movf	sprintf@width,w
  1905     037D  045B               	iorwf	sprintf@width+1,w
  1906     037E  1903               	btfsc	3,2
  1907     037F  2B81               	goto	u1271
  1908     0380  2B82               	goto	u1270
  1909     0381                     u1271:
  1910     0381  2BC2               	goto	l1646
  1911     0382                     u1270:
  1912     0382                     l1626:
  1913                           
  1914                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1915     0382  085C               	movf	sprintf@sp,w
  1916     0383  0084               	movwf	4
  1917     0384  3030               	movlw	48
  1918     0385  1383               	bcf	3,7	;select IRP bank0
  1919     0386  0080               	movwf	0
  1920     0387                     l1628:
  1921     0387  3001               	movlw	1
  1922     0388  00D2               	movwf	??_sprintf
  1923     0389  0852               	movf	??_sprintf,w
  1924     038A  07DC               	addwf	sprintf@sp,f
  1925     038B                     l1630:
  1926     038B  30FF               	movlw	255
  1927     038C  07DA               	addwf	sprintf@width,f
  1928     038D  1803               	skipnc
  1929     038E  0ADB               	incf	sprintf@width+1,f
  1930     038F  30FF               	movlw	255
  1931     0390  07DB               	addwf	sprintf@width+1,f
  1932     0391  085A               	movf	sprintf@width,w
  1933     0392  045B               	iorwf	sprintf@width+1,w
  1934     0393  1D03               	btfss	3,2
  1935     0394  2B96               	goto	u1281
  1936     0395  2B97               	goto	u1280
  1937     0396                     u1281:
  1938     0396  2B82               	goto	l1626
  1939     0397                     u1280:
  1940     0397  2BC2               	goto	l1646
  1941     0398                     l1632:
  1942                           
  1943                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1944     0398  085A               	movf	sprintf@width,w
  1945     0399  045B               	iorwf	sprintf@width+1,w
  1946     039A  1903               	btfsc	3,2
  1947     039B  2B9D               	goto	u1291
  1948     039C  2B9E               	goto	u1290
  1949     039D                     u1291:
  1950     039D  2BB3               	goto	l1640
  1951     039E                     u1290:
  1952     039E                     l1634:
  1953                           
  1954                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1955     039E  085C               	movf	sprintf@sp,w
  1956     039F  0084               	movwf	4
  1957     03A0  3020               	movlw	32
  1958     03A1  1383               	bcf	3,7	;select IRP bank0
  1959     03A2  0080               	movwf	0
  1960     03A3                     l1636:
  1961     03A3  3001               	movlw	1
  1962     03A4  00D2               	movwf	??_sprintf
  1963     03A5  0852               	movf	??_sprintf,w
  1964     03A6  07DC               	addwf	sprintf@sp,f
  1965     03A7                     l1638:
  1966     03A7  30FF               	movlw	255
  1967     03A8  07DA               	addwf	sprintf@width,f
  1968     03A9  1803               	skipnc
  1969     03AA  0ADB               	incf	sprintf@width+1,f
  1970     03AB  30FF               	movlw	255
  1971     03AC  07DB               	addwf	sprintf@width+1,f
  1972     03AD  085A               	movf	sprintf@width,w
  1973     03AE  045B               	iorwf	sprintf@width+1,w
  1974     03AF  1D03               	btfss	3,2
  1975     03B0  2BB2               	goto	u1301
  1976     03B1  2BB3               	goto	u1300
  1977     03B2                     u1301:
  1978     03B2  2B9E               	goto	l1634
  1979     03B3                     u1300:
  1980     03B3                     l1640:
  1981                           
  1982                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1983     03B3  0859               	movf	sprintf@flag,w
  1984     03B4  3903               	andlw	3
  1985     03B5  1903               	btfsc	3,2
  1986     03B6  2BB8               	goto	u1311
  1987     03B7  2BB9               	goto	u1310
  1988     03B8                     u1311:
  1989     03B8  2BC2               	goto	l1646
  1990     03B9                     u1310:
  1991     03B9                     l1642:
  1992                           
  1993                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1994     03B9  085C               	movf	sprintf@sp,w
  1995     03BA  0084               	movwf	4
  1996     03BB  302D               	movlw	45
  1997     03BC  1383               	bcf	3,7	;select IRP bank0
  1998     03BD  0080               	movwf	0
  1999     03BE                     l1644:
  2000     03BE  3001               	movlw	1
  2001     03BF  00D2               	movwf	??_sprintf
  2002     03C0  0852               	movf	??_sprintf,w
  2003     03C1  07DC               	addwf	sprintf@sp,f
  2004     03C2                     l1646:
  2005                           
  2006                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2007     03C2  085D               	movf	sprintf@c,w
  2008     03C3  00D6               	movwf	sprintf@prec
  2009                           
  2010                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2011     03C4  2BFC               	goto	l1654
  2012     03C5                     l1648:
  2013                           
  2014                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2015     03C5  300A               	movlw	10
  2016     03C6  00C7               	movwf	___lwmod@divisor
  2017     03C7  3000               	movlw	0
  2018     03C8  00C8               	movwf	___lwmod@divisor+1
  2019     03C9  0856               	movf	sprintf@prec,w
  2020     03CA  00D2               	movwf	??_sprintf
  2021     03CB  0752               	addwf	??_sprintf,w
  2022     03CC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2023     03CD  0084               	movwf	4
  2024     03CE  120A  118A  266E  120A  118A  	fcall	stringdir
  2025     03D3  00F2               	movwf	___lwdiv@divisor
  2026     03D4  120A  118A  266E  120A  118A  	fcall	stringdir
  2027     03D9  00F3               	movwf	___lwdiv@divisor+1
  2028     03DA  0858               	movf	sprintf@val+1,w
  2029     03DB  00F5               	movwf	___lwdiv@dividend+1
  2030     03DC  0857               	movf	sprintf@val,w
  2031     03DD  00F4               	movwf	___lwdiv@dividend
  2032     03DE  120A  118A  252F  120A  118A  	fcall	___lwdiv
  2033     03E3  0873               	movf	?___lwdiv+1,w
  2034     03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2035     03E5  1303               	bcf	3,6	;RP1=0, select bank0
  2036     03E6  00CA               	movwf	___lwmod@dividend+1
  2037     03E7  0872               	movf	?___lwdiv,w
  2038     03E8  00C9               	movwf	___lwmod@dividend
  2039     03E9  120A  118A  25F3  120A  118A  	fcall	___lwmod
  2040     03EE  1283               	bcf	3,5	;RP0=0, select bank0
  2041     03EF  1303               	bcf	3,6	;RP1=0, select bank0
  2042     03F0  0847               	movf	?___lwmod,w
  2043     03F1  3E30               	addlw	48
  2044     03F2  00DD               	movwf	sprintf@c
  2045     03F3                     l1650:
  2046                           
  2047                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2048     03F3  085C               	movf	sprintf@sp,w
  2049     03F4  0084               	movwf	4
  2050     03F5  085D               	movf	sprintf@c,w
  2051     03F6  1383               	bcf	3,7	;select IRP bank0
  2052     03F7  0080               	movwf	0
  2053     03F8                     l1652:
  2054     03F8  3001               	movlw	1
  2055     03F9  00D2               	movwf	??_sprintf
  2056     03FA  0852               	movf	??_sprintf,w
  2057     03FB  07DC               	addwf	sprintf@sp,f
  2058     03FC                     l1654:
  2059                           
  2060                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2061     03FC  30FF               	movlw	255
  2062     03FD  00D2               	movwf	??_sprintf
  2063     03FE  0852               	movf	??_sprintf,w
  2064     03FF  07D6               	addwf	sprintf@prec,f
  2065     0400  0A56               	incf	sprintf@prec,w
  2066     0401  1D03               	btfss	3,2
  2067     0402  2C04               	goto	u1321
  2068     0403  2C05               	goto	u1320
  2069     0404                     u1321:
  2070     0404  2BC5               	goto	l1648
  2071     0405                     u1320:
  2072     0405                     l1656:
  2073                           
  2074                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2075     0405  3001               	movlw	1
  2076     0406  07CB               	addwf	sprintf@f,f
  2077     0407  30FF               	movlw	-1
  2078     0408  074B               	addwf	sprintf@f,w
  2079     0409  0084               	movwf	4
  2080     040A  120A  118A  266E  120A  118A  	fcall	stringdir
  2081     040F  00DD               	movwf	sprintf@c
  2082     0410  085D               	movf	sprintf@c,w
  2083     0411  1D03               	btfss	3,2
  2084     0412  2C14               	goto	u1331
  2085     0413  2C15               	goto	u1330
  2086     0414                     u1331:
  2087     0414  2A60               	goto	l1554
  2088     0415                     u1330:
  2089     0415                     l1658:
  2090                           
  2091                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2092     0415  085C               	movf	sprintf@sp,w
  2093     0416  0084               	movwf	4
  2094     0417  1383               	bcf	3,7	;select IRP bank0
  2095     0418  0180               	clrf	0
  2096     0419                     l313:
  2097     0419  0008               	return
  2098     041A                     __end_of_sprintf:
  2099                           
  2100                           	psect	text2
  2101     0747                     __ptext2:	
  2102 ;; *************** function _isdigit *****************
  2103 ;; Defined at:
  2104 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\isdigit.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  c               1    wreg     unsigned char 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  c               1    3[COMMON] unsigned char 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;		None               void
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2118 ;;      Params:         0       0       0       0       0
  2119 ;;      Locals:         2       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0
  2121 ;;      Totals:         2       0       0       0       0
  2122 ;;Total ram usage:        2 bytes
  2123 ;; Hardware stack levels used: 1
  2124 ;; Hardware stack levels required when called: 1
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_sprintf
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132     0747                     _isdigit:	
  2133                           ;psect for function _isdigit
  2134                           
  2135                           
  2136                           ;incstack = 0
  2137                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2138                           ;isdigit@c stored from wreg
  2139     0747  00F3               	movwf	isdigit@c
  2140     0748                     l1372:
  2141     0748  01F2               	clrf	_isdigit$912
  2142     0749                     l1374:
  2143     0749  303A               	movlw	58
  2144     074A  0273               	subwf	isdigit@c,w
  2145     074B  1803               	skipnc
  2146     074C  2F4E               	goto	u821
  2147     074D  2F4F               	goto	u820
  2148     074E                     u821:
  2149     074E  2F57               	goto	l1380
  2150     074F                     u820:
  2151     074F                     l1376:
  2152     074F  3030               	movlw	48
  2153     0750  0273               	subwf	isdigit@c,w
  2154     0751  1C03               	skipc
  2155     0752  2F54               	goto	u831
  2156     0753  2F55               	goto	u830
  2157     0754                     u831:
  2158     0754  2F57               	goto	l1380
  2159     0755                     u830:
  2160     0755                     l1378:
  2161     0755  01F2               	clrf	_isdigit$912
  2162     0756  0AF2               	incf	_isdigit$912,f
  2163     0757                     l1380:
  2164     0757  0C72               	rrf	_isdigit$912,w
  2165     0758                     l770:
  2166     0758  0008               	return
  2167     0759                     __end_of_isdigit:
  2168                           
  2169                           	psect	text3
  2170     05F3                     __ptext3:	
  2171 ;; *************** function ___lwmod *****************
  2172 ;; Defined at:
  2173 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;  divisor         2    0[BANK0 ] unsigned int 
  2176 ;;  dividend        2    2[BANK0 ] unsigned int 
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;  counter         1   11[COMMON] unsigned char 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  2    0[BANK0 ] unsigned int 
  2181 ;; Registers used:
  2182 ;;		wreg, status,2, status,0
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2188 ;;      Params:         0       4       0       0       0
  2189 ;;      Locals:         1       0       0       0       0
  2190 ;;      Temps:          1       0       0       0       0
  2191 ;;      Totals:         2       4       0       0       0
  2192 ;;Total ram usage:        6 bytes
  2193 ;; Hardware stack levels used: 1
  2194 ;; Hardware stack levels required when called: 1
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_sprintf
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202     05F3                     ___lwmod:	
  2203                           ;psect for function ___lwmod
  2204                           
  2205     05F3                     l1468:	
  2206                           ;incstack = 0
  2207                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2208                           
  2209     05F3  1283               	bcf	3,5	;RP0=0, select bank0
  2210     05F4  1303               	bcf	3,6	;RP1=0, select bank0
  2211     05F5  0847               	movf	___lwmod@divisor,w
  2212     05F6  0448               	iorwf	___lwmod@divisor+1,w
  2213     05F7  1903               	btfsc	3,2
  2214     05F8  2DFA               	goto	u1051
  2215     05F9  2DFB               	goto	u1050
  2216     05FA                     u1051:
  2217     05FA  2E2A               	goto	l1486
  2218     05FB                     u1050:
  2219     05FB                     l1470:
  2220     05FB  01FB               	clrf	___lwmod@counter
  2221     05FC  0AFB               	incf	___lwmod@counter,f
  2222     05FD  2E09               	goto	l1476
  2223     05FE                     l1472:
  2224     05FE  3001               	movlw	1
  2225     05FF                     u1065:
  2226     05FF  1003               	clrc
  2227     0600  0DC7               	rlf	___lwmod@divisor,f
  2228     0601  0DC8               	rlf	___lwmod@divisor+1,f
  2229     0602  3EFF               	addlw	-1
  2230     0603  1D03               	skipz
  2231     0604  2DFF               	goto	u1065
  2232     0605                     l1474:
  2233     0605  3001               	movlw	1
  2234     0606  00FA               	movwf	??___lwmod
  2235     0607  087A               	movf	??___lwmod,w
  2236     0608  07FB               	addwf	___lwmod@counter,f
  2237     0609                     l1476:
  2238     0609  1FC8               	btfss	___lwmod@divisor+1,7
  2239     060A  2E0C               	goto	u1071
  2240     060B  2E0D               	goto	u1070
  2241     060C                     u1071:
  2242     060C  2DFE               	goto	l1472
  2243     060D                     u1070:
  2244     060D                     l1478:
  2245     060D  0848               	movf	___lwmod@divisor+1,w
  2246     060E  024A               	subwf	___lwmod@dividend+1,w
  2247     060F  1D03               	skipz
  2248     0610  2E13               	goto	u1085
  2249     0611  0847               	movf	___lwmod@divisor,w
  2250     0612  0249               	subwf	___lwmod@dividend,w
  2251     0613                     u1085:
  2252     0613  1C03               	skipc
  2253     0614  2E16               	goto	u1081
  2254     0615  2E17               	goto	u1080
  2255     0616                     u1081:
  2256     0616  2E1D               	goto	l1482
  2257     0617                     u1080:
  2258     0617                     l1480:
  2259     0617  0847               	movf	___lwmod@divisor,w
  2260     0618  02C9               	subwf	___lwmod@dividend,f
  2261     0619  0848               	movf	___lwmod@divisor+1,w
  2262     061A  1C03               	skipc
  2263     061B  03CA               	decf	___lwmod@dividend+1,f
  2264     061C  02CA               	subwf	___lwmod@dividend+1,f
  2265     061D                     l1482:
  2266     061D  3001               	movlw	1
  2267     061E                     u1095:
  2268     061E  1003               	clrc
  2269     061F  0CC8               	rrf	___lwmod@divisor+1,f
  2270     0620  0CC7               	rrf	___lwmod@divisor,f
  2271     0621  3EFF               	addlw	-1
  2272     0622  1D03               	skipz
  2273     0623  2E1E               	goto	u1095
  2274     0624                     l1484:
  2275     0624  3001               	movlw	1
  2276     0625  02FB               	subwf	___lwmod@counter,f
  2277     0626  1D03               	btfss	3,2
  2278     0627  2E29               	goto	u1101
  2279     0628  2E2A               	goto	u1100
  2280     0629                     u1101:
  2281     0629  2E0D               	goto	l1478
  2282     062A                     u1100:
  2283     062A                     l1486:
  2284     062A  084A               	movf	___lwmod@dividend+1,w
  2285     062B  00C8               	movwf	?___lwmod+1
  2286     062C  0849               	movf	___lwmod@dividend,w
  2287     062D  00C7               	movwf	?___lwmod
  2288     062E                     l599:
  2289     062E  0008               	return
  2290     062F                     __end_of___lwmod:
  2291                           
  2292                           	psect	text4
  2293     052F                     __ptext4:	
  2294 ;; *************** function ___lwdiv *****************
  2295 ;; Defined at:
  2296 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  divisor         2    2[COMMON] unsigned int 
  2299 ;;  dividend        2    4[COMMON] unsigned int 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  quotient        2    7[COMMON] unsigned int 
  2302 ;;  counter         1    9[COMMON] unsigned char 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  2    2[COMMON] unsigned int 
  2305 ;; Registers used:
  2306 ;;		wreg, status,2, status,0
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2312 ;;      Params:         4       0       0       0       0
  2313 ;;      Locals:         3       0       0       0       0
  2314 ;;      Temps:          1       0       0       0       0
  2315 ;;      Totals:         8       0       0       0       0
  2316 ;;Total ram usage:        8 bytes
  2317 ;; Hardware stack levels used: 1
  2318 ;; Hardware stack levels required when called: 1
  2319 ;; This function calls:
  2320 ;;		Nothing
  2321 ;; This function is called by:
  2322 ;;		_sprintf
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326     052F                     ___lwdiv:	
  2327                           ;psect for function ___lwdiv
  2328                           
  2329     052F                     l1442:	
  2330                           ;incstack = 0
  2331                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2332                           
  2333     052F  01F7               	clrf	___lwdiv@quotient
  2334     0530  01F8               	clrf	___lwdiv@quotient+1
  2335     0531                     l1444:
  2336     0531  0872               	movf	___lwdiv@divisor,w
  2337     0532  0473               	iorwf	___lwdiv@divisor+1,w
  2338     0533  1903               	btfsc	3,2
  2339     0534  2D36               	goto	u981
  2340     0535  2D37               	goto	u980
  2341     0536                     u981:
  2342     0536  2D6E               	goto	l1464
  2343     0537                     u980:
  2344     0537                     l1446:
  2345     0537  01F9               	clrf	___lwdiv@counter
  2346     0538  0AF9               	incf	___lwdiv@counter,f
  2347     0539  2D45               	goto	l1452
  2348     053A                     l1448:
  2349     053A  3001               	movlw	1
  2350     053B                     u995:
  2351     053B  1003               	clrc
  2352     053C  0DF2               	rlf	___lwdiv@divisor,f
  2353     053D  0DF3               	rlf	___lwdiv@divisor+1,f
  2354     053E  3EFF               	addlw	-1
  2355     053F  1D03               	skipz
  2356     0540  2D3B               	goto	u995
  2357     0541                     l1450:
  2358     0541  3001               	movlw	1
  2359     0542  00F6               	movwf	??___lwdiv
  2360     0543  0876               	movf	??___lwdiv,w
  2361     0544  07F9               	addwf	___lwdiv@counter,f
  2362     0545                     l1452:
  2363     0545  1FF3               	btfss	___lwdiv@divisor+1,7
  2364     0546  2D48               	goto	u1001
  2365     0547  2D49               	goto	u1000
  2366     0548                     u1001:
  2367     0548  2D3A               	goto	l1448
  2368     0549                     u1000:
  2369     0549                     l1454:
  2370     0549  3001               	movlw	1
  2371     054A                     u1015:
  2372     054A  1003               	clrc
  2373     054B  0DF7               	rlf	___lwdiv@quotient,f
  2374     054C  0DF8               	rlf	___lwdiv@quotient+1,f
  2375     054D  3EFF               	addlw	-1
  2376     054E  1D03               	skipz
  2377     054F  2D4A               	goto	u1015
  2378     0550  0873               	movf	___lwdiv@divisor+1,w
  2379     0551  0275               	subwf	___lwdiv@dividend+1,w
  2380     0552  1D03               	skipz
  2381     0553  2D56               	goto	u1025
  2382     0554  0872               	movf	___lwdiv@divisor,w
  2383     0555  0274               	subwf	___lwdiv@dividend,w
  2384     0556                     u1025:
  2385     0556  1C03               	skipc
  2386     0557  2D59               	goto	u1021
  2387     0558  2D5A               	goto	u1020
  2388     0559                     u1021:
  2389     0559  2D61               	goto	l1460
  2390     055A                     u1020:
  2391     055A                     l1456:
  2392     055A  0872               	movf	___lwdiv@divisor,w
  2393     055B  02F4               	subwf	___lwdiv@dividend,f
  2394     055C  0873               	movf	___lwdiv@divisor+1,w
  2395     055D  1C03               	skipc
  2396     055E  03F5               	decf	___lwdiv@dividend+1,f
  2397     055F  02F5               	subwf	___lwdiv@dividend+1,f
  2398     0560                     l1458:
  2399     0560  1477               	bsf	___lwdiv@quotient,0
  2400     0561                     l1460:
  2401     0561  3001               	movlw	1
  2402     0562                     u1035:
  2403     0562  1003               	clrc
  2404     0563  0CF3               	rrf	___lwdiv@divisor+1,f
  2405     0564  0CF2               	rrf	___lwdiv@divisor,f
  2406     0565  3EFF               	addlw	-1
  2407     0566  1D03               	skipz
  2408     0567  2D62               	goto	u1035
  2409     0568                     l1462:
  2410     0568  3001               	movlw	1
  2411     0569  02F9               	subwf	___lwdiv@counter,f
  2412     056A  1D03               	btfss	3,2
  2413     056B  2D6D               	goto	u1041
  2414     056C  2D6E               	goto	u1040
  2415     056D                     u1041:
  2416     056D  2D49               	goto	l1454
  2417     056E                     u1040:
  2418     056E                     l1464:
  2419     056E  0878               	movf	___lwdiv@quotient+1,w
  2420     056F  00F3               	movwf	?___lwdiv+1
  2421     0570  0877               	movf	___lwdiv@quotient,w
  2422     0571  00F2               	movwf	?___lwdiv
  2423     0572                     l589:
  2424     0572  0008               	return
  2425     0573                     __end_of___lwdiv:
  2426                           
  2427                           	psect	text5
  2428     0785                     __ptext5:	
  2429 ;; *************** function _spiWrite *****************
  2430 ;; Defined at:
  2431 ;;		line 34 in file "SPI.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  dat             1    wreg     unsigned char 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  dat             1    2[COMMON] unsigned char 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      void 
  2438 ;; Registers used:
  2439 ;;		wreg
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2445 ;;      Params:         0       0       0       0       0
  2446 ;;      Locals:         1       0       0       0       0
  2447 ;;      Temps:          0       0       0       0       0
  2448 ;;      Totals:         1       0       0       0       0
  2449 ;;Total ram usage:        1 bytes
  2450 ;; Hardware stack levels used: 1
  2451 ;; Hardware stack levels required when called: 1
  2452 ;; This function calls:
  2453 ;;		Nothing
  2454 ;; This function is called by:
  2455 ;;		_main
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459     0785                     _spiWrite:	
  2460                           ;psect for function _spiWrite
  2461                           
  2462                           
  2463                           ;incstack = 0
  2464                           ; Regs used in _spiWrite: [wreg]
  2465                           ;spiWrite@dat stored from wreg
  2466     0785  00F2               	movwf	spiWrite@dat
  2467     0786                     l1544:
  2468                           
  2469                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
  2470     0786  0872               	movf	spiWrite@dat,w
  2471     0787  1283               	bcf	3,5	;RP0=0, select bank0
  2472     0788  1303               	bcf	3,6	;RP1=0, select bank0
  2473     0789  0093               	movwf	19	;volatile
  2474     078A                     l117:
  2475     078A  0008               	return
  2476     078B                     __end_of_spiWrite:
  2477                           
  2478                           	psect	text6
  2479     0766                     __ptext6:	
  2480 ;; *************** function _spiRead *****************
  2481 ;; Defined at:
  2482 ;;		line 47 in file "SPI.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;		None
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;		None
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      unsigned char 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, pclath, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2496 ;;      Params:         0       0       0       0       0
  2497 ;;      Locals:         0       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0
  2499 ;;      Totals:         0       0       0       0       0
  2500 ;;Total ram usage:        0 bytes
  2501 ;; Hardware stack levels used: 1
  2502 ;; Hardware stack levels required when called: 2
  2503 ;; This function calls:
  2504 ;;		_spiReceiveWait
  2505 ;; This function is called by:
  2506 ;;		_main
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510     0766                     _spiRead:	
  2511                           ;psect for function _spiRead
  2512                           
  2513     0766                     l1546:	
  2514                           ;incstack = 0
  2515                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2516                           
  2517                           
  2518                           ;SPI.c: 49:     spiReceiveWait();
  2519     0766  120A  118A  2777  120A  118A  	fcall	_spiReceiveWait
  2520     076B                     l1548:
  2521                           
  2522                           ;SPI.c: 50:     return(SSPBUF);
  2523     076B  1283               	bcf	3,5	;RP0=0, select bank0
  2524     076C  1303               	bcf	3,6	;RP1=0, select bank0
  2525     076D  0813               	movf	19,w	;volatile
  2526     076E                     l125:
  2527     076E  0008               	return
  2528     076F                     __end_of_spiRead:
  2529                           
  2530                           	psect	text7
  2531     0777                     __ptext7:	
  2532 ;; *************** function _spiReceiveWait *****************
  2533 ;; Defined at:
  2534 ;;		line 29 in file "SPI.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;		None
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;                  1    wreg      void 
  2541 ;; Registers used:
  2542 ;;		None
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2548 ;;      Params:         0       0       0       0       0
  2549 ;;      Locals:         0       0       0       0       0
  2550 ;;      Temps:          0       0       0       0       0
  2551 ;;      Totals:         0       0       0       0       0
  2552 ;;Total ram usage:        0 bytes
  2553 ;; Hardware stack levels used: 1
  2554 ;; Hardware stack levels required when called: 1
  2555 ;; This function calls:
  2556 ;;		Nothing
  2557 ;; This function is called by:
  2558 ;;		_spiRead
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562     0777                     _spiReceiveWait:	
  2563                           ;psect for function _spiReceiveWait
  2564                           
  2565     0777                     l1350:	
  2566                           ;incstack = 0
  2567                           ; Regs used in _spiReceiveWait: []
  2568                           
  2569     0777                     l111:	
  2570                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  2571                           
  2572     0777  1683               	bsf	3,5	;RP0=1, select bank1
  2573     0778  1303               	bcf	3,6	;RP1=0, select bank1
  2574     0779  1C14               	btfss	20,0	;volatile
  2575     077A  2F7C               	goto	u811
  2576     077B  2F7D               	goto	u810
  2577     077C                     u811:
  2578     077C  2F77               	goto	l111
  2579     077D                     u810:
  2580     077D                     l114:
  2581     077D  0008               	return
  2582     077E                     __end_of_spiReceiveWait:
  2583                           
  2584                           	psect	text8
  2585     0698                     __ptext8:	
  2586 ;; *************** function _setup *****************
  2587 ;; Defined at:
  2588 ;;		line 136 in file "main.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;		None
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;		None
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  1    wreg      void 
  2595 ;; Registers used:
  2596 ;;		wreg, status,2, status,0, pclath, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2602 ;;      Params:         0       0       0       0       0
  2603 ;;      Locals:         0       0       0       0       0
  2604 ;;      Temps:          0       0       0       0       0
  2605 ;;      Totals:         0       0       0       0       0
  2606 ;;Total ram usage:        0 bytes
  2607 ;; Hardware stack levels used: 1
  2608 ;; Hardware stack levels required when called: 2
  2609 ;; This function calls:
  2610 ;;		_spiInit
  2611 ;; This function is called by:
  2612 ;;		_main
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616     0698                     _setup:	
  2617                           ;psect for function _setup
  2618                           
  2619     0698                     l1494:	
  2620                           ;incstack = 0
  2621                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  2622                           
  2623                           
  2624                           ;main.c: 139:     ANSEL = 0;
  2625     0698  1683               	bsf	3,5	;RP0=1, select bank3
  2626     0699  1703               	bsf	3,6	;RP1=1, select bank3
  2627     069A  0188               	clrf	8	;volatile
  2628                           
  2629                           ;main.c: 140:     ANSELH = 0;
  2630     069B  0189               	clrf	9	;volatile
  2631                           
  2632                           ;main.c: 144:     TRISB = 0;
  2633     069C  1683               	bsf	3,5	;RP0=1, select bank1
  2634     069D  1303               	bcf	3,6	;RP1=0, select bank1
  2635     069E  0186               	clrf	6	;volatile
  2636     069F                     l1496:
  2637                           
  2638                           ;main.c: 145:     TRISCbits.TRISC1 = 0;
  2639     069F  1087               	bcf	7,1	;volatile
  2640     06A0                     l1498:
  2641                           
  2642                           ;main.c: 146:     TRISCbits.TRISC2 = 0;
  2643     06A0  1107               	bcf	7,2	;volatile
  2644                           
  2645                           ;main.c: 147:     TRISD = 0;
  2646     06A1  0188               	clrf	8	;volatile
  2647     06A2                     l1500:
  2648                           
  2649                           ;main.c: 151:     PORTCbits.RC1 = 1;
  2650     06A2  1283               	bcf	3,5	;RP0=0, select bank0
  2651     06A3  1303               	bcf	3,6	;RP1=0, select bank0
  2652     06A4  1487               	bsf	7,1	;volatile
  2653     06A5                     l1502:
  2654                           
  2655                           ;main.c: 152:     PORTCbits.RC2 = 1;
  2656     06A5  1507               	bsf	7,2	;volatile
  2657                           
  2658                           ;main.c: 155:     PORTA = 0;
  2659     06A6  0185               	clrf	5	;volatile
  2660                           
  2661                           ;main.c: 156:     PORTB = 0;
  2662     06A7  0186               	clrf	6	;volatile
  2663                           
  2664                           ;main.c: 157:     PORTC = 0;
  2665     06A8  0187               	clrf	7	;volatile
  2666                           
  2667                           ;main.c: 158:     PORTD = 0;
  2668     06A9  0188               	clrf	8	;volatile
  2669                           
  2670                           ;main.c: 159:     PORTE = 0;
  2671     06AA  0189               	clrf	9	;volatile
  2672     06AB                     l1504:
  2673                           
  2674                           ;main.c: 181:     OSCCONbits.IRCF = 0b110 ;
  2675     06AB  1683               	bsf	3,5	;RP0=1, select bank1
  2676     06AC  1303               	bcf	3,6	;RP1=0, select bank1
  2677     06AD  080F               	movf	15,w	;volatile
  2678     06AE  398F               	andlw	-113
  2679     06AF  3860               	iorlw	96
  2680     06B0  008F               	movwf	15	;volatile
  2681     06B1                     l1506:
  2682                           
  2683                           ;main.c: 182:     OSCCONbits.SCS = 1;
  2684     06B1  140F               	bsf	15,0	;volatile
  2685     06B2                     l1508:
  2686                           
  2687                           ;main.c: 185:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_END, SPI_CLOCK_IDLE_LOW, 
      +                          SPI_IDLE_2_ACTIVE);
  2688     06B2  3080               	movlw	128
  2689     06B3  00F2               	movwf	spiInit@sDataSample
  2690     06B4  01F3               	clrf	spiInit@sClockIdle
  2691     06B5  01F4               	clrf	spiInit@sTransmitEdge
  2692     06B6  3020               	movlw	32
  2693     06B7  120A  118A  271C  120A  118A  	fcall	_spiInit
  2694     06BC                     l91:
  2695     06BC  0008               	return
  2696     06BD                     __end_of_setup:
  2697                           
  2698                           	psect	text9
  2699     071C                     __ptext9:	
  2700 ;; *************** function _spiInit *****************
  2701 ;; Defined at:
  2702 ;;		line 12 in file "SPI.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;  sType           1    wreg     enum E1292
  2705 ;;  sDataSample     1    2[COMMON] enum E1300
  2706 ;;  sClockIdle      1    3[COMMON] enum E1304
  2707 ;;  sTransmitEdg    1    4[COMMON] enum E1308
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  sType           1    5[COMMON] enum E1292
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2719 ;;      Params:         3       0       0       0       0
  2720 ;;      Locals:         1       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0
  2722 ;;      Totals:         4       0       0       0       0
  2723 ;;Total ram usage:        4 bytes
  2724 ;; Hardware stack levels used: 1
  2725 ;; Hardware stack levels required when called: 1
  2726 ;; This function calls:
  2727 ;;		Nothing
  2728 ;; This function is called by:
  2729 ;;		_setup
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733     071C                     _spiInit:	
  2734                           ;psect for function _spiInit
  2735                           
  2736                           
  2737                           ;incstack = 0
  2738                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2739                           ;spiInit@sType stored from wreg
  2740     071C  00F5               	movwf	spiInit@sType
  2741     071D                     l1340:
  2742                           
  2743                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
  2744     071D  1683               	bsf	3,5	;RP0=1, select bank1
  2745     071E  1303               	bcf	3,6	;RP1=0, select bank1
  2746     071F  1287               	bcf	7,5	;volatile
  2747                           
  2748                           ;SPI.c: 15:     if(sType & 0b00000100)
  2749     0720  1D75               	btfss	spiInit@sType,2
  2750     0721  2F23               	goto	u801
  2751     0722  2F24               	goto	u800
  2752     0723                     u801:
  2753     0723  2F28               	goto	l1346
  2754     0724                     u800:
  2755     0724                     l1342:
  2756                           
  2757                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  2758     0724  0874               	movf	spiInit@sTransmitEdge,w
  2759     0725  0094               	movwf	20	;volatile
  2760     0726                     l1344:
  2761                           
  2762                           ;SPI.c: 18:         TRISC3 = 1;
  2763     0726  1587               	bsf	7,3	;volatile
  2764                           
  2765                           ;SPI.c: 19:     }
  2766     0727  2F2C               	goto	l107
  2767     0728                     l1346:
  2768                           
  2769                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  2770     0728  0872               	movf	spiInit@sDataSample,w
  2771     0729  0474               	iorwf	spiInit@sTransmitEdge,w
  2772     072A  0094               	movwf	20	;volatile
  2773     072B                     l1348:
  2774                           
  2775                           ;SPI.c: 23:         TRISC3 = 0;
  2776     072B  1187               	bcf	7,3	;volatile
  2777     072C                     l107:	
  2778                           ;SPI.c: 24:     }
  2779                           
  2780                           
  2781                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
  2782     072C  0875               	movf	spiInit@sType,w
  2783     072D  0473               	iorwf	spiInit@sClockIdle,w
  2784     072E  1283               	bcf	3,5	;RP0=0, select bank0
  2785     072F  1303               	bcf	3,6	;RP1=0, select bank0
  2786     0730  0094               	movwf	20	;volatile
  2787     0731                     l108:
  2788     0731  0008               	return
  2789     0732                     __end_of_spiInit:
  2790                           
  2791                           	psect	text10
  2792     062F                     __ptext10:	
  2793 ;; *************** function _map *****************
  2794 ;; Defined at:
  2795 ;;		line 57 in file "main.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  value           1    wreg     unsigned char 
  2798 ;;  inputmin        2    5[BANK0 ] int 
  2799 ;;  inputmax        2    7[BANK0 ] int 
  2800 ;;  outmin          2    9[BANK0 ] int 
  2801 ;;  outmax          2   11[BANK0 ] int 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  value           1   14[BANK0 ] unsigned char 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;                  2    5[BANK0 ] int 
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0, pclath, cstack
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2813 ;;      Params:         0       8       0       0       0
  2814 ;;      Locals:         0       1       0       0       0
  2815 ;;      Temps:          0       1       0       0       0
  2816 ;;      Totals:         0      10       0       0       0
  2817 ;;Total ram usage:       10 bytes
  2818 ;; Hardware stack levels used: 1
  2819 ;; Hardware stack levels required when called: 2
  2820 ;; This function calls:
  2821 ;;		___awdiv
  2822 ;;		___wmul
  2823 ;; This function is called by:
  2824 ;;		_main
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828     062F                     _map:	
  2829                           ;psect for function _map
  2830                           
  2831                           
  2832                           ;incstack = 0
  2833                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  2834                           ;map@value stored from wreg
  2835     062F  1283               	bcf	3,5	;RP0=0, select bank0
  2836     0630  1303               	bcf	3,6	;RP1=0, select bank0
  2837     0631  00D5               	movwf	map@value
  2838     0632                     l1490:
  2839                           
  2840                           ;main.c: 58:     return ((value - inputmin)*(outmax-outmin)) / (inputmax-inputmin)+outmi
      +                          n;}
  2841     0632  084C               	movf	map@inputmin,w
  2842     0633  024E               	subwf	map@inputmax,w
  2843     0634  00F8               	movwf	___awdiv@divisor
  2844     0635  084D               	movf	map@inputmin+1,w
  2845     0636  1C03               	skipc
  2846     0637  0A4D               	incf	map@inputmin+1,w
  2847     0638  024F               	subwf	map@inputmax+1,w
  2848     0639  00F9               	movwf	___awdiv@divisor+1
  2849     063A  0855               	movf	map@value,w
  2850     063B  00D4               	movwf	??_map
  2851     063C  084C               	movf	map@inputmin,w
  2852     063D  0254               	subwf	??_map,w
  2853     063E  00F2               	movwf	___wmul@multiplier
  2854     063F  094D               	comf	map@inputmin+1,w
  2855     0640  1803               	skipnc
  2856     0641  3E01               	addlw	1
  2857     0642  00F3               	movwf	___wmul@multiplier+1
  2858     0643  0850               	movf	map@outmin,w
  2859     0644  0252               	subwf	map@outmax,w
  2860     0645  00F4               	movwf	___wmul@multiplicand
  2861     0646  0851               	movf	map@outmin+1,w
  2862     0647  1C03               	skipc
  2863     0648  0A51               	incf	map@outmin+1,w
  2864     0649  0253               	subwf	map@outmax+1,w
  2865     064A  00F5               	movwf	___wmul@multiplicand+1
  2866     064B  120A  118A  26BD  120A  118A  	fcall	___wmul
  2867     0650  0873               	movf	?___wmul+1,w
  2868     0651  00FB               	movwf	___awdiv@dividend+1
  2869     0652  0872               	movf	?___wmul,w
  2870     0653  00FA               	movwf	___awdiv@dividend
  2871     0654  120A  118A  241A  120A  118A  	fcall	___awdiv
  2872     0659  1283               	bcf	3,5	;RP0=0, select bank0
  2873     065A  1303               	bcf	3,6	;RP1=0, select bank0
  2874     065B  0850               	movf	map@outmin,w
  2875     065C  0778               	addwf	?___awdiv,w
  2876     065D  00CC               	movwf	?_map
  2877     065E  0851               	movf	map@outmin+1,w
  2878     065F  1803               	skipnc
  2879     0660  0A51               	incf	map@outmin+1,w
  2880     0661  0779               	addwf	?___awdiv+1,w
  2881     0662  00CD               	movwf	?_map+1
  2882     0663                     l75:
  2883     0663  0008               	return
  2884     0664                     __end_of_map:
  2885                           
  2886                           	psect	text11
  2887     06BD                     __ptext11:	
  2888 ;; *************** function ___wmul *****************
  2889 ;; Defined at:
  2890 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  multiplier      2    2[COMMON] unsigned int 
  2893 ;;  multiplicand    2    4[COMMON] unsigned int 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  product         2    6[COMMON] unsigned int 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  2    2[COMMON] unsigned int 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2905 ;;      Params:         4       0       0       0       0
  2906 ;;      Locals:         2       0       0       0       0
  2907 ;;      Temps:          0       0       0       0       0
  2908 ;;      Totals:         6       0       0       0       0
  2909 ;;Total ram usage:        6 bytes
  2910 ;; Hardware stack levels used: 1
  2911 ;; Hardware stack levels required when called: 1
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_map
  2916 ;;		_main
  2917 ;;		_sprintf
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921     06BD                     ___wmul:	
  2922                           ;psect for function ___wmul
  2923                           
  2924     06BD                     l1384:	
  2925                           ;incstack = 0
  2926                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2927                           
  2928     06BD  01F6               	clrf	___wmul@product
  2929     06BE  01F7               	clrf	___wmul@product+1
  2930     06BF                     l1386:
  2931     06BF  1C72               	btfss	___wmul@multiplier,0
  2932     06C0  2EC2               	goto	u841
  2933     06C1  2EC3               	goto	u840
  2934     06C2                     u841:
  2935     06C2  2EC9               	goto	l317
  2936     06C3                     u840:
  2937     06C3                     l1388:
  2938     06C3  0874               	movf	___wmul@multiplicand,w
  2939     06C4  07F6               	addwf	___wmul@product,f
  2940     06C5  1803               	skipnc
  2941     06C6  0AF7               	incf	___wmul@product+1,f
  2942     06C7  0875               	movf	___wmul@multiplicand+1,w
  2943     06C8  07F7               	addwf	___wmul@product+1,f
  2944     06C9                     l317:
  2945     06C9  3001               	movlw	1
  2946     06CA                     u855:
  2947     06CA  1003               	clrc
  2948     06CB  0DF4               	rlf	___wmul@multiplicand,f
  2949     06CC  0DF5               	rlf	___wmul@multiplicand+1,f
  2950     06CD  3EFF               	addlw	-1
  2951     06CE  1D03               	skipz
  2952     06CF  2ECA               	goto	u855
  2953     06D0                     l1390:
  2954     06D0  3001               	movlw	1
  2955     06D1                     u865:
  2956     06D1  1003               	clrc
  2957     06D2  0CF3               	rrf	___wmul@multiplier+1,f
  2958     06D3  0CF2               	rrf	___wmul@multiplier,f
  2959     06D4  3EFF               	addlw	-1
  2960     06D5  1D03               	skipz
  2961     06D6  2ED1               	goto	u865
  2962     06D7                     l1392:
  2963     06D7  0872               	movf	___wmul@multiplier,w
  2964     06D8  0473               	iorwf	___wmul@multiplier+1,w
  2965     06D9  1D03               	btfss	3,2
  2966     06DA  2EDC               	goto	u871
  2967     06DB  2EDD               	goto	u870
  2968     06DC                     u871:
  2969     06DC  2EBF               	goto	l1386
  2970     06DD                     u870:
  2971     06DD                     l1394:
  2972     06DD  0877               	movf	___wmul@product+1,w
  2973     06DE  00F3               	movwf	?___wmul+1
  2974     06DF  0876               	movf	___wmul@product,w
  2975     06E0  00F2               	movwf	?___wmul
  2976     06E1                     l319:
  2977     06E1  0008               	return
  2978     06E2                     __end_of___wmul:
  2979                           
  2980                           	psect	text12
  2981     041A                     __ptext12:	
  2982 ;; *************** function ___awdiv *****************
  2983 ;; Defined at:
  2984 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  divisor         2    8[COMMON] int 
  2987 ;;  dividend        2   10[COMMON] int 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;  quotient        2    3[BANK0 ] int 
  2990 ;;  sign            1    2[BANK0 ] unsigned char 
  2991 ;;  counter         1    1[BANK0 ] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  2    8[COMMON] int 
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, status,0
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3001 ;;      Params:         4       0       0       0       0
  3002 ;;      Locals:         0       4       0       0       0
  3003 ;;      Temps:          0       1       0       0       0
  3004 ;;      Totals:         4       5       0       0       0
  3005 ;;Total ram usage:        9 bytes
  3006 ;; Hardware stack levels used: 1
  3007 ;; Hardware stack levels required when called: 1
  3008 ;; This function calls:
  3009 ;;		Nothing
  3010 ;; This function is called by:
  3011 ;;		_map
  3012 ;;		_main
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016     041A                     ___awdiv:	
  3017                           ;psect for function ___awdiv
  3018                           
  3019     041A                     l1398:	
  3020                           ;incstack = 0
  3021                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3022                           
  3023     041A  1283               	bcf	3,5	;RP0=0, select bank0
  3024     041B  1303               	bcf	3,6	;RP1=0, select bank0
  3025     041C  01C9               	clrf	___awdiv@sign
  3026     041D                     l1400:
  3027     041D  1FF9               	btfss	___awdiv@divisor+1,7
  3028     041E  2C20               	goto	u881
  3029     041F  2C21               	goto	u880
  3030     0420                     u881:
  3031     0420  2C28               	goto	l1406
  3032     0421                     u880:
  3033     0421                     l1402:
  3034     0421  09F8               	comf	___awdiv@divisor,f
  3035     0422  09F9               	comf	___awdiv@divisor+1,f
  3036     0423  0AF8               	incf	___awdiv@divisor,f
  3037     0424  1903               	skipnz
  3038     0425  0AF9               	incf	___awdiv@divisor+1,f
  3039     0426                     l1404:
  3040     0426  01C9               	clrf	___awdiv@sign
  3041     0427  0AC9               	incf	___awdiv@sign,f
  3042     0428                     l1406:
  3043     0428  1FFB               	btfss	___awdiv@dividend+1,7
  3044     0429  2C2B               	goto	u891
  3045     042A  2C2C               	goto	u890
  3046     042B                     u891:
  3047     042B  2C35               	goto	l1412
  3048     042C                     u890:
  3049     042C                     l1408:
  3050     042C  09FA               	comf	___awdiv@dividend,f
  3051     042D  09FB               	comf	___awdiv@dividend+1,f
  3052     042E  0AFA               	incf	___awdiv@dividend,f
  3053     042F  1903               	skipnz
  3054     0430  0AFB               	incf	___awdiv@dividend+1,f
  3055     0431                     l1410:
  3056     0431  3001               	movlw	1
  3057     0432  00C7               	movwf	??___awdiv
  3058     0433  0847               	movf	??___awdiv,w
  3059     0434  06C9               	xorwf	___awdiv@sign,f
  3060     0435                     l1412:
  3061     0435  01CA               	clrf	___awdiv@quotient
  3062     0436  01CB               	clrf	___awdiv@quotient+1
  3063     0437                     l1414:
  3064     0437  0878               	movf	___awdiv@divisor,w
  3065     0438  0479               	iorwf	___awdiv@divisor+1,w
  3066     0439  1903               	btfsc	3,2
  3067     043A  2C3C               	goto	u901
  3068     043B  2C3D               	goto	u900
  3069     043C                     u901:
  3070     043C  2C74               	goto	l1434
  3071     043D                     u900:
  3072     043D                     l1416:
  3073     043D  01C8               	clrf	___awdiv@counter
  3074     043E  0AC8               	incf	___awdiv@counter,f
  3075     043F  2C4B               	goto	l1422
  3076     0440                     l1418:
  3077     0440  3001               	movlw	1
  3078     0441                     u915:
  3079     0441  1003               	clrc
  3080     0442  0DF8               	rlf	___awdiv@divisor,f
  3081     0443  0DF9               	rlf	___awdiv@divisor+1,f
  3082     0444  3EFF               	addlw	-1
  3083     0445  1D03               	skipz
  3084     0446  2C41               	goto	u915
  3085     0447                     l1420:
  3086     0447  3001               	movlw	1
  3087     0448  00C7               	movwf	??___awdiv
  3088     0449  0847               	movf	??___awdiv,w
  3089     044A  07C8               	addwf	___awdiv@counter,f
  3090     044B                     l1422:
  3091     044B  1FF9               	btfss	___awdiv@divisor+1,7
  3092     044C  2C4E               	goto	u921
  3093     044D  2C4F               	goto	u920
  3094     044E                     u921:
  3095     044E  2C40               	goto	l1418
  3096     044F                     u920:
  3097     044F                     l1424:
  3098     044F  3001               	movlw	1
  3099     0450                     u935:
  3100     0450  1003               	clrc
  3101     0451  0DCA               	rlf	___awdiv@quotient,f
  3102     0452  0DCB               	rlf	___awdiv@quotient+1,f
  3103     0453  3EFF               	addlw	-1
  3104     0454  1D03               	skipz
  3105     0455  2C50               	goto	u935
  3106     0456  0879               	movf	___awdiv@divisor+1,w
  3107     0457  027B               	subwf	___awdiv@dividend+1,w
  3108     0458  1D03               	skipz
  3109     0459  2C5C               	goto	u945
  3110     045A  0878               	movf	___awdiv@divisor,w
  3111     045B  027A               	subwf	___awdiv@dividend,w
  3112     045C                     u945:
  3113     045C  1C03               	skipc
  3114     045D  2C5F               	goto	u941
  3115     045E  2C60               	goto	u940
  3116     045F                     u941:
  3117     045F  2C67               	goto	l1430
  3118     0460                     u940:
  3119     0460                     l1426:
  3120     0460  0878               	movf	___awdiv@divisor,w
  3121     0461  02FA               	subwf	___awdiv@dividend,f
  3122     0462  0879               	movf	___awdiv@divisor+1,w
  3123     0463  1C03               	skipc
  3124     0464  03FB               	decf	___awdiv@dividend+1,f
  3125     0465  02FB               	subwf	___awdiv@dividend+1,f
  3126     0466                     l1428:
  3127     0466  144A               	bsf	___awdiv@quotient,0
  3128     0467                     l1430:
  3129     0467  3001               	movlw	1
  3130     0468                     u955:
  3131     0468  1003               	clrc
  3132     0469  0CF9               	rrf	___awdiv@divisor+1,f
  3133     046A  0CF8               	rrf	___awdiv@divisor,f
  3134     046B  3EFF               	addlw	-1
  3135     046C  1D03               	skipz
  3136     046D  2C68               	goto	u955
  3137     046E                     l1432:
  3138     046E  3001               	movlw	1
  3139     046F  02C8               	subwf	___awdiv@counter,f
  3140     0470  1D03               	btfss	3,2
  3141     0471  2C73               	goto	u961
  3142     0472  2C74               	goto	u960
  3143     0473                     u961:
  3144     0473  2C4F               	goto	l1424
  3145     0474                     u960:
  3146     0474                     l1434:
  3147     0474  0849               	movf	___awdiv@sign,w
  3148     0475  1903               	btfsc	3,2
  3149     0476  2C78               	goto	u971
  3150     0477  2C79               	goto	u970
  3151     0478                     u971:
  3152     0478  2C7E               	goto	l1438
  3153     0479                     u970:
  3154     0479                     l1436:
  3155     0479  09CA               	comf	___awdiv@quotient,f
  3156     047A  09CB               	comf	___awdiv@quotient+1,f
  3157     047B  0ACA               	incf	___awdiv@quotient,f
  3158     047C  1903               	skipnz
  3159     047D  0ACB               	incf	___awdiv@quotient+1,f
  3160     047E                     l1438:
  3161     047E  084B               	movf	___awdiv@quotient+1,w
  3162     047F  00F9               	movwf	?___awdiv+1
  3163     0480  084A               	movf	___awdiv@quotient,w
  3164     0481  00F8               	movwf	?___awdiv
  3165     0482                     l470:
  3166     0482  0008               	return
  3167     0483                     __end_of___awdiv:
  3168                           
  3169                           	psect	text13
  3170     0483                     __ptext13:	
  3171 ;; *************** function ___awmod *****************
  3172 ;; Defined at:
  3173 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;  divisor         2    5[BANK0 ] int 
  3176 ;;  dividend        2    7[BANK0 ] int 
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;  sign            1   11[BANK0 ] unsigned char 
  3179 ;;  counter         1   10[BANK0 ] unsigned char 
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  2    5[BANK0 ] int 
  3182 ;; Registers used:
  3183 ;;		wreg, status,2, status,0
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3189 ;;      Params:         0       4       0       0       0
  3190 ;;      Locals:         0       2       0       0       0
  3191 ;;      Temps:          0       1       0       0       0
  3192 ;;      Totals:         0       7       0       0       0
  3193 ;;Total ram usage:        7 bytes
  3194 ;; Hardware stack levels used: 1
  3195 ;; Hardware stack levels required when called: 1
  3196 ;; This function calls:
  3197 ;;		Nothing
  3198 ;; This function is called by:
  3199 ;;		_main
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203     0483                     ___awmod:	
  3204                           ;psect for function ___awmod
  3205                           
  3206     0483                     l1670:	
  3207                           ;incstack = 0
  3208                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3209                           
  3210     0483  1283               	bcf	3,5	;RP0=0, select bank0
  3211     0484  1303               	bcf	3,6	;RP1=0, select bank0
  3212     0485  01D2               	clrf	___awmod@sign
  3213     0486                     l1672:
  3214     0486  1FCF               	btfss	___awmod@dividend+1,7
  3215     0487  2C89               	goto	u1341
  3216     0488  2C8A               	goto	u1340
  3217     0489                     u1341:
  3218     0489  2C91               	goto	l1678
  3219     048A                     u1340:
  3220     048A                     l1674:
  3221     048A  09CE               	comf	___awmod@dividend,f
  3222     048B  09CF               	comf	___awmod@dividend+1,f
  3223     048C  0ACE               	incf	___awmod@dividend,f
  3224     048D  1903               	skipnz
  3225     048E  0ACF               	incf	___awmod@dividend+1,f
  3226     048F                     l1676:
  3227     048F  01D2               	clrf	___awmod@sign
  3228     0490  0AD2               	incf	___awmod@sign,f
  3229     0491                     l1678:
  3230     0491  1FCD               	btfss	___awmod@divisor+1,7
  3231     0492  2C94               	goto	u1351
  3232     0493  2C95               	goto	u1350
  3233     0494                     u1351:
  3234     0494  2C9A               	goto	l1682
  3235     0495                     u1350:
  3236     0495                     l1680:
  3237     0495  09CC               	comf	___awmod@divisor,f
  3238     0496  09CD               	comf	___awmod@divisor+1,f
  3239     0497  0ACC               	incf	___awmod@divisor,f
  3240     0498  1903               	skipnz
  3241     0499  0ACD               	incf	___awmod@divisor+1,f
  3242     049A                     l1682:
  3243     049A  084C               	movf	___awmod@divisor,w
  3244     049B  044D               	iorwf	___awmod@divisor+1,w
  3245     049C  1903               	btfsc	3,2
  3246     049D  2C9F               	goto	u1361
  3247     049E  2CA0               	goto	u1360
  3248     049F                     u1361:
  3249     049F  2CCF               	goto	l1700
  3250     04A0                     u1360:
  3251     04A0                     l1684:
  3252     04A0  01D1               	clrf	___awmod@counter
  3253     04A1  0AD1               	incf	___awmod@counter,f
  3254     04A2  2CAE               	goto	l1690
  3255     04A3                     l1686:
  3256     04A3  3001               	movlw	1
  3257     04A4                     u1375:
  3258     04A4  1003               	clrc
  3259     04A5  0DCC               	rlf	___awmod@divisor,f
  3260     04A6  0DCD               	rlf	___awmod@divisor+1,f
  3261     04A7  3EFF               	addlw	-1
  3262     04A8  1D03               	skipz
  3263     04A9  2CA4               	goto	u1375
  3264     04AA                     l1688:
  3265     04AA  3001               	movlw	1
  3266     04AB  00D0               	movwf	??___awmod
  3267     04AC  0850               	movf	??___awmod,w
  3268     04AD  07D1               	addwf	___awmod@counter,f
  3269     04AE                     l1690:
  3270     04AE  1FCD               	btfss	___awmod@divisor+1,7
  3271     04AF  2CB1               	goto	u1381
  3272     04B0  2CB2               	goto	u1380
  3273     04B1                     u1381:
  3274     04B1  2CA3               	goto	l1686
  3275     04B2                     u1380:
  3276     04B2                     l1692:
  3277     04B2  084D               	movf	___awmod@divisor+1,w
  3278     04B3  024F               	subwf	___awmod@dividend+1,w
  3279     04B4  1D03               	skipz
  3280     04B5  2CB8               	goto	u1395
  3281     04B6  084C               	movf	___awmod@divisor,w
  3282     04B7  024E               	subwf	___awmod@dividend,w
  3283     04B8                     u1395:
  3284     04B8  1C03               	skipc
  3285     04B9  2CBB               	goto	u1391
  3286     04BA  2CBC               	goto	u1390
  3287     04BB                     u1391:
  3288     04BB  2CC2               	goto	l1696
  3289     04BC                     u1390:
  3290     04BC                     l1694:
  3291     04BC  084C               	movf	___awmod@divisor,w
  3292     04BD  02CE               	subwf	___awmod@dividend,f
  3293     04BE  084D               	movf	___awmod@divisor+1,w
  3294     04BF  1C03               	skipc
  3295     04C0  03CF               	decf	___awmod@dividend+1,f
  3296     04C1  02CF               	subwf	___awmod@dividend+1,f
  3297     04C2                     l1696:
  3298     04C2  3001               	movlw	1
  3299     04C3                     u1405:
  3300     04C3  1003               	clrc
  3301     04C4  0CCD               	rrf	___awmod@divisor+1,f
  3302     04C5  0CCC               	rrf	___awmod@divisor,f
  3303     04C6  3EFF               	addlw	-1
  3304     04C7  1D03               	skipz
  3305     04C8  2CC3               	goto	u1405
  3306     04C9                     l1698:
  3307     04C9  3001               	movlw	1
  3308     04CA  02D1               	subwf	___awmod@counter,f
  3309     04CB  1D03               	btfss	3,2
  3310     04CC  2CCE               	goto	u1411
  3311     04CD  2CCF               	goto	u1410
  3312     04CE                     u1411:
  3313     04CE  2CB2               	goto	l1692
  3314     04CF                     u1410:
  3315     04CF                     l1700:
  3316     04CF  0852               	movf	___awmod@sign,w
  3317     04D0  1903               	btfsc	3,2
  3318     04D1  2CD3               	goto	u1421
  3319     04D2  2CD4               	goto	u1420
  3320     04D3                     u1421:
  3321     04D3  2CD9               	goto	l1704
  3322     04D4                     u1420:
  3323     04D4                     l1702:
  3324     04D4  09CE               	comf	___awmod@dividend,f
  3325     04D5  09CF               	comf	___awmod@dividend+1,f
  3326     04D6  0ACE               	incf	___awmod@dividend,f
  3327     04D7  1903               	skipnz
  3328     04D8  0ACF               	incf	___awmod@dividend+1,f
  3329     04D9                     l1704:
  3330     04D9  084F               	movf	___awmod@dividend+1,w
  3331     04DA  00CD               	movwf	?___awmod+1
  3332     04DB  084E               	movf	___awmod@dividend,w
  3333     04DC  00CC               	movwf	?___awmod
  3334     04DD                     l483:
  3335     04DD  0008               	return
  3336     04DE                     __end_of___awmod:
  3337                           
  3338                           	psect	text14
  3339     0573                     __ptext14:	
  3340 ;; *************** function _Lcd_Write_String *****************
  3341 ;; Defined at:
  3342 ;;		line 103 in file "LCD.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  a               2    5[COMMON] PTR unsigned char 
  3345 ;;		 -> buffer2(20), buffer1(20), buffer(20), STR_3(4), 
  3346 ;;		 -> STR_2(4), STR_1(4), 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  i               2   10[COMMON] int 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      void 
  3351 ;; Registers used:
  3352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3358 ;;      Params:         2       0       0       0       0
  3359 ;;      Locals:         2       0       0       0       0
  3360 ;;      Temps:          3       0       0       0       0
  3361 ;;      Totals:         7       0       0       0       0
  3362 ;;Total ram usage:        7 bytes
  3363 ;; Hardware stack levels used: 1
  3364 ;; Hardware stack levels required when called: 3
  3365 ;; This function calls:
  3366 ;;		_Lcd_Write_Char
  3367 ;; This function is called by:
  3368 ;;		_main
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372     0573                     _Lcd_Write_String:	
  3373                           ;psect for function _Lcd_Write_String
  3374                           
  3375     0573                     l1536:	
  3376                           ;incstack = 0
  3377                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3378                           
  3379                           
  3380                           ;LCD.c: 104:     int i;;LCD.c: 105:     for (i = 0; a[i] != '\0'; i++)
  3381     0573  01FA               	clrf	Lcd_Write_String@i
  3382     0574  01FB               	clrf	Lcd_Write_String@i+1
  3383     0575  2D98               	goto	l1542
  3384     0576                     l1538:
  3385                           
  3386                           ;LCD.c: 106:         Lcd_Write_Char(a[i]);
  3387     0576  087A               	movf	Lcd_Write_String@i,w
  3388     0577  0775               	addwf	Lcd_Write_String@a,w
  3389     0578  00F8               	movwf	??_Lcd_Write_String+1
  3390     0579  0876               	movf	Lcd_Write_String@a+1,w
  3391     057A  00F7               	movwf	??_Lcd_Write_String
  3392     057B  1803               	skipnc
  3393     057C  0AF7               	incf	??_Lcd_Write_String,f
  3394     057D  1FFA               	btfss	Lcd_Write_String@i,7
  3395     057E  2D80               	goto	u1130
  3396     057F  03F7               	decf	??_Lcd_Write_String,f
  3397     0580                     u1130:
  3398     0580  0877               	movf	??_Lcd_Write_String,w
  3399     0581  00F9               	movwf	??_Lcd_Write_String+2
  3400     0582  0879               	movf	??_Lcd_Write_String+2,w
  3401     0583  1283               	bcf	3,5	;RP0=0, select bank0
  3402     0584  1303               	bcf	3,6	;RP1=0, select bank0
  3403     0585  00FF               	movwf	btemp+1
  3404     0586  0878               	movf	??_Lcd_Write_String+1,w
  3405     0587  0084               	movwf	4
  3406     0588  120A  118A  2664  120A  118A  	fcall	stringtab
  3407     058D  120A  118A  2732  120A  118A  	fcall	_Lcd_Write_Char
  3408     0592                     l1540:
  3409     0592  3001               	movlw	1
  3410     0593  07FA               	addwf	Lcd_Write_String@i,f
  3411     0594  1803               	skipnc
  3412     0595  0AFB               	incf	Lcd_Write_String@i+1,f
  3413     0596  3000               	movlw	0
  3414     0597  07FB               	addwf	Lcd_Write_String@i+1,f
  3415     0598                     l1542:
  3416     0598  087A               	movf	Lcd_Write_String@i,w
  3417     0599  0775               	addwf	Lcd_Write_String@a,w
  3418     059A  00F8               	movwf	??_Lcd_Write_String+1
  3419     059B  0876               	movf	Lcd_Write_String@a+1,w
  3420     059C  00F7               	movwf	??_Lcd_Write_String
  3421     059D  1803               	skipnc
  3422     059E  0AF7               	incf	??_Lcd_Write_String,f
  3423     059F  1FFA               	btfss	Lcd_Write_String@i,7
  3424     05A0  2DA2               	goto	u1140
  3425     05A1  03F7               	decf	??_Lcd_Write_String,f
  3426     05A2                     u1140:
  3427     05A2  0877               	movf	??_Lcd_Write_String,w
  3428     05A3  00F9               	movwf	??_Lcd_Write_String+2
  3429     05A4  0879               	movf	??_Lcd_Write_String+2,w
  3430     05A5  1283               	bcf	3,5	;RP0=0, select bank0
  3431     05A6  1303               	bcf	3,6	;RP1=0, select bank0
  3432     05A7  00FF               	movwf	btemp+1
  3433     05A8  0878               	movf	??_Lcd_Write_String+1,w
  3434     05A9  0084               	movwf	4
  3435     05AA  120A  118A  2664  120A  118A  	fcall	stringtab
  3436     05AF  3A00               	xorlw	0
  3437     05B0  1D03               	skipz
  3438     05B1  2DB3               	goto	u1151
  3439     05B2  2DB4               	goto	u1150
  3440     05B3                     u1151:
  3441     05B3  2D76               	goto	l1538
  3442     05B4                     u1150:
  3443     05B4                     l174:
  3444     05B4  0008               	return
  3445     05B5                     __end_of_Lcd_Write_String:
  3446                           
  3447                           	psect	text15
  3448     0732                     __ptext15:	
  3449 ;; *************** function _Lcd_Write_Char *****************
  3450 ;; Defined at:
  3451 ;;		line 95 in file "LCD.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;  a               1    wreg     unsigned char 
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;  a               1    4[COMMON] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0, pclath, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3465 ;;      Params:         0       0       0       0       0
  3466 ;;      Locals:         1       0       0       0       0
  3467 ;;      Temps:          1       0       0       0       0
  3468 ;;      Totals:         2       0       0       0       0
  3469 ;;Total ram usage:        2 bytes
  3470 ;; Hardware stack levels used: 1
  3471 ;; Hardware stack levels required when called: 2
  3472 ;; This function calls:
  3473 ;;		_Lcd_Port
  3474 ;; This function is called by:
  3475 ;;		_Lcd_Write_String
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479     0732                     _Lcd_Write_Char:	
  3480                           ;psect for function _Lcd_Write_Char
  3481                           
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3485                           ;Lcd_Write_Char@a stored from wreg
  3486     0732  00F4               	movwf	Lcd_Write_Char@a
  3487     0733                     l1362:
  3488                           
  3489                           ;LCD.c: 96:     PORTBbits.RB0 = 1;
  3490     0733  1283               	bcf	3,5	;RP0=0, select bank0
  3491     0734  1303               	bcf	3,6	;RP1=0, select bank0
  3492     0735  1406               	bsf	6,0	;volatile
  3493     0736                     l1364:
  3494                           
  3495                           ;LCD.c: 97:     Lcd_Port(a);
  3496     0736  0874               	movf	Lcd_Write_Char@a,w
  3497     0737  120A  118A  25B5  120A  118A  	fcall	_Lcd_Port
  3498     073C                     l1366:
  3499                           
  3500                           ;LCD.c: 98:     PORTBbits.RB1 = 1;
  3501     073C  1283               	bcf	3,5	;RP0=0, select bank0
  3502     073D  1303               	bcf	3,6	;RP1=0, select bank0
  3503     073E  1486               	bsf	6,1	;volatile
  3504     073F                     l1368:
  3505                           
  3506                           ;LCD.c: 99:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3507     073F  300D               	movlw	13
  3508     0740  00F3               	movwf	??_Lcd_Write_Char
  3509     0741                     u1497:
  3510     0741  0BF3               	decfsz	??_Lcd_Write_Char,f
  3511     0742  2F41               	goto	u1497
  3512     0743                     l1370:
  3513                           
  3514                           ;LCD.c: 100:     PORTBbits.RB1 = 0;
  3515     0743  1283               	bcf	3,5	;RP0=0, select bank0
  3516     0744  1303               	bcf	3,6	;RP1=0, select bank0
  3517     0745  1086               	bcf	6,1	;volatile
  3518     0746                     l168:
  3519     0746  0008               	return
  3520     0747                     __end_of_Lcd_Write_Char:
  3521                           
  3522                           	psect	text16
  3523     06E2                     __ptext16:	
  3524 ;; *************** function _Lcd_Set_Cursor *****************
  3525 ;; Defined at:
  3526 ;;		line 68 in file "LCD.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;  a               1    wreg     unsigned char 
  3529 ;;  b               1    6[COMMON] unsigned char 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  a               1    7[COMMON] unsigned char 
  3532 ;;  temp            1    8[COMMON] unsigned char 
  3533 ;;  y               1    0        unsigned char 
  3534 ;;  z               1    0        unsigned char 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, status,2, status,0, pclath, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3544 ;;      Params:         1       0       0       0       0
  3545 ;;      Locals:         2       0       0       0       0
  3546 ;;      Temps:          0       0       0       0       0
  3547 ;;      Totals:         3       0       0       0       0
  3548 ;;Total ram usage:        3 bytes
  3549 ;; Hardware stack levels used: 1
  3550 ;; Hardware stack levels required when called: 3
  3551 ;; This function calls:
  3552 ;;		_Lcd_Cmd
  3553 ;; This function is called by:
  3554 ;;		_main
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558     06E2                     _Lcd_Set_Cursor:	
  3559                           ;psect for function _Lcd_Set_Cursor
  3560                           
  3561                           
  3562                           ;incstack = 0
  3563                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3564                           ;Lcd_Set_Cursor@a stored from wreg
  3565     06E2  00F7               	movwf	Lcd_Set_Cursor@a
  3566     06E3                     l1524:
  3567                           
  3568                           ;LCD.c: 69:     char temp, z, y;;LCD.c: 70:     if (a == 1) {
  3569     06E3  0377               	decf	Lcd_Set_Cursor@a,w
  3570     06E4  1D03               	btfss	3,2
  3571     06E5  2EE7               	goto	u1111
  3572     06E6  2EE8               	goto	u1110
  3573     06E7                     u1111:
  3574     06E7  2EF2               	goto	l1530
  3575     06E8                     u1110:
  3576     06E8                     l1526:
  3577                           
  3578                           ;LCD.c: 71:         temp = 0x80 + b - 1;
  3579     06E8  0876               	movf	Lcd_Set_Cursor@b,w
  3580     06E9  3E7F               	addlw	127
  3581     06EA  00F8               	movwf	Lcd_Set_Cursor@temp
  3582     06EB                     l1528:
  3583                           
  3584                           ;LCD.c: 72:         Lcd_Cmd(temp);
  3585     06EB  0878               	movf	Lcd_Set_Cursor@temp,w
  3586     06EC  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3587                           
  3588                           ;LCD.c: 73:     } else if (a == 2) {
  3589     06F1  2F01               	goto	l162
  3590     06F2                     l1530:
  3591     06F2  3002               	movlw	2
  3592     06F3  0677               	xorwf	Lcd_Set_Cursor@a,w
  3593     06F4  1D03               	btfss	3,2
  3594     06F5  2EF7               	goto	u1121
  3595     06F6  2EF8               	goto	u1120
  3596     06F7                     u1121:
  3597     06F7  2F01               	goto	l162
  3598     06F8                     u1120:
  3599     06F8                     l1532:
  3600                           
  3601                           ;LCD.c: 74:         temp = 0xC0 + b - 1;
  3602     06F8  0876               	movf	Lcd_Set_Cursor@b,w
  3603     06F9  3EBF               	addlw	191
  3604     06FA  00F8               	movwf	Lcd_Set_Cursor@temp
  3605     06FB                     l1534:
  3606                           
  3607                           ;LCD.c: 75:         Lcd_Cmd(temp);
  3608     06FB  0878               	movf	Lcd_Set_Cursor@temp,w
  3609     06FC  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3610     0701                     l162:
  3611     0701  0008               	return
  3612     0702                     __end_of_Lcd_Set_Cursor:
  3613                           
  3614                           	psect	text17
  3615     04DE                     __ptext17:	
  3616 ;; *************** function _Lcd_Init *****************
  3617 ;; Defined at:
  3618 ;;		line 79 in file "LCD.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;		None
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;		None
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  1    wreg      void 
  3625 ;; Registers used:
  3626 ;;		wreg, status,2, status,0, pclath, cstack
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3632 ;;      Params:         0       0       0       0       0
  3633 ;;      Locals:         0       0       0       0       0
  3634 ;;      Temps:          2       0       0       0       0
  3635 ;;      Totals:         2       0       0       0       0
  3636 ;;Total ram usage:        2 bytes
  3637 ;; Hardware stack levels used: 1
  3638 ;; Hardware stack levels required when called: 3
  3639 ;; This function calls:
  3640 ;;		_Lcd_Cmd
  3641 ;;		_Lcd_Port
  3642 ;; This function is called by:
  3643 ;;		_main
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647     04DE                     _Lcd_Init:	
  3648                           ;psect for function _Lcd_Init
  3649                           
  3650     04DE                     l1510:	
  3651                           ;incstack = 0
  3652                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3653                           
  3654                           
  3655                           ;LCD.c: 80:     Lcd_Port(0x00);
  3656     04DE  3000               	movlw	0
  3657     04DF  120A  118A  25B5  120A  118A  	fcall	_Lcd_Port
  3658     04E4                     l1512:
  3659                           
  3660                           ;LCD.c: 81:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3661     04E4  301A               	movlw	26
  3662     04E5  00F7               	movwf	??_Lcd_Init+1
  3663     04E6  30F8               	movlw	248
  3664     04E7  00F6               	movwf	??_Lcd_Init
  3665     04E8                     u1507:
  3666     04E8  0BF6               	decfsz	??_Lcd_Init,f
  3667     04E9  2CE8               	goto	u1507
  3668     04EA  0BF7               	decfsz	??_Lcd_Init+1,f
  3669     04EB  2CE8               	goto	u1507
  3670     04EC  0000               	nop
  3671     04ED                     l1514:
  3672                           
  3673                           ;LCD.c: 82:     Lcd_Cmd(0x030);
  3674     04ED  3030               	movlw	48
  3675     04EE  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3676                           
  3677                           ;LCD.c: 83:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3678     04F3  3007               	movlw	7
  3679     04F4  00F7               	movwf	??_Lcd_Init+1
  3680     04F5  307D               	movlw	125
  3681     04F6  00F6               	movwf	??_Lcd_Init
  3682     04F7                     u1517:
  3683     04F7  0BF6               	decfsz	??_Lcd_Init,f
  3684     04F8  2CF7               	goto	u1517
  3685     04F9  0BF7               	decfsz	??_Lcd_Init+1,f
  3686     04FA  2CF7               	goto	u1517
  3687     04FB                     l1516:
  3688                           
  3689                           ;LCD.c: 84:     Lcd_Cmd(0x030);
  3690     04FB  3030               	movlw	48
  3691     04FC  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3692     0501                     l1518:
  3693                           
  3694                           ;LCD.c: 85:     _delay((unsigned long)((200)*(4000000/4000000.0)));
  3695     0501  3042               	movlw	66
  3696     0502  00F6               	movwf	??_Lcd_Init
  3697     0503                     u1527:
  3698     0503  0BF6               	decfsz	??_Lcd_Init,f
  3699     0504  2D03               	goto	u1527
  3700     0505  0000               	nop
  3701                           
  3702                           ;LCD.c: 86:     Lcd_Cmd(0x030);
  3703     0506  3030               	movlw	48
  3704     0507  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3705                           
  3706                           ;LCD.c: 87:     Lcd_Cmd(0x38);
  3707     050C  3038               	movlw	56
  3708     050D  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3709                           
  3710                           ;LCD.c: 88:     Lcd_Cmd(0x08);
  3711     0512  3008               	movlw	8
  3712     0513  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3713                           
  3714                           ;LCD.c: 89:     Lcd_Cmd(0x01);
  3715     0518  3001               	movlw	1
  3716     0519  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3717                           
  3718                           ;LCD.c: 90:     Lcd_Cmd(0x06);
  3719     051E  3006               	movlw	6
  3720     051F  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3721                           
  3722                           ;LCD.c: 91:     Lcd_Cmd(0x0C);
  3723     0524  300C               	movlw	12
  3724     0525  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3725     052A                     l1520:
  3726                           
  3727                           ;LCD.c: 92:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  3728     052A  3021               	movlw	33
  3729     052B  00F6               	movwf	??_Lcd_Init
  3730     052C                     u1537:
  3731     052C  0BF6               	decfsz	??_Lcd_Init,f
  3732     052D  2D2C               	goto	u1537
  3733     052E                     l165:
  3734     052E  0008               	return
  3735     052F                     __end_of_Lcd_Init:
  3736                           
  3737                           	psect	text18
  3738     0759                     __ptext18:	
  3739 ;; *************** function _Lcd_Clear *****************
  3740 ;; Defined at:
  3741 ;;		line 63 in file "LCD.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;		None
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;		None
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      void 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0, pclath, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3755 ;;      Params:         0       0       0       0       0
  3756 ;;      Locals:         0       0       0       0       0
  3757 ;;      Temps:          0       0       0       0       0
  3758 ;;      Totals:         0       0       0       0       0
  3759 ;;Total ram usage:        0 bytes
  3760 ;; Hardware stack levels used: 1
  3761 ;; Hardware stack levels required when called: 3
  3762 ;; This function calls:
  3763 ;;		_Lcd_Cmd
  3764 ;; This function is called by:
  3765 ;;		_main
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769     0759                     _Lcd_Clear:	
  3770                           ;psect for function _Lcd_Clear
  3771                           
  3772     0759                     l1522:	
  3773                           ;incstack = 0
  3774                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3775                           
  3776                           
  3777                           ;LCD.c: 64:     Lcd_Cmd(0);
  3778     0759  3000               	movlw	0
  3779     075A  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3780                           
  3781                           ;LCD.c: 65:     Lcd_Cmd(1);
  3782     075F  3001               	movlw	1
  3783     0760  120A  118A  2702  120A  118A  	fcall	_Lcd_Cmd
  3784     0765                     l156:
  3785     0765  0008               	return
  3786     0766                     __end_of_Lcd_Clear:
  3787                           
  3788                           	psect	text19
  3789     0702                     __ptext19:	
  3790 ;; *************** function _Lcd_Cmd *****************
  3791 ;; Defined at:
  3792 ;;		line 55 in file "LCD.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;  a               1    wreg     unsigned char 
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  a               1    5[COMMON] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      void 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0, pclath, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3806 ;;      Params:         0       0       0       0       0
  3807 ;;      Locals:         1       0       0       0       0
  3808 ;;      Temps:          2       0       0       0       0
  3809 ;;      Totals:         3       0       0       0       0
  3810 ;;Total ram usage:        3 bytes
  3811 ;; Hardware stack levels used: 1
  3812 ;; Hardware stack levels required when called: 2
  3813 ;; This function calls:
  3814 ;;		_Lcd_Port
  3815 ;; This function is called by:
  3816 ;;		_Lcd_Clear
  3817 ;;		_Lcd_Set_Cursor
  3818 ;;		_Lcd_Init
  3819 ;;		_Lcd_Shift_Right
  3820 ;;		_Lcd_Shift_Left
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824     0702                     _Lcd_Cmd:	
  3825                           ;psect for function _Lcd_Cmd
  3826                           
  3827                           
  3828                           ;incstack = 0
  3829                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3830                           ;Lcd_Cmd@a stored from wreg
  3831     0702  00F5               	movwf	Lcd_Cmd@a
  3832     0703                     l1352:
  3833                           
  3834                           ;LCD.c: 56:     PORTBbits.RB0 = 0;
  3835     0703  1283               	bcf	3,5	;RP0=0, select bank0
  3836     0704  1303               	bcf	3,6	;RP1=0, select bank0
  3837     0705  1006               	bcf	6,0	;volatile
  3838     0706                     l1354:
  3839                           
  3840                           ;LCD.c: 57:     Lcd_Port(a);
  3841     0706  0875               	movf	Lcd_Cmd@a,w
  3842     0707  120A  118A  25B5  120A  118A  	fcall	_Lcd_Port
  3843     070C                     l1356:
  3844                           
  3845                           ;LCD.c: 58:     PORTBbits.RB1 = 1;
  3846     070C  1283               	bcf	3,5	;RP0=0, select bank0
  3847     070D  1303               	bcf	3,6	;RP1=0, select bank0
  3848     070E  1486               	bsf	6,1	;volatile
  3849     070F                     l1358:
  3850                           
  3851                           ;LCD.c: 59:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3852     070F  3006               	movlw	6
  3853     0710  00F4               	movwf	??_Lcd_Cmd+1
  3854     0711  3030               	movlw	48
  3855     0712  00F3               	movwf	??_Lcd_Cmd
  3856     0713                     u1547:
  3857     0713  0BF3               	decfsz	??_Lcd_Cmd,f
  3858     0714  2F13               	goto	u1547
  3859     0715  0BF4               	decfsz	??_Lcd_Cmd+1,f
  3860     0716  2F13               	goto	u1547
  3861     0717  0000               	nop
  3862     0718                     l1360:
  3863                           
  3864                           ;LCD.c: 60:     PORTBbits.RB1 = 0;
  3865     0718  1283               	bcf	3,5	;RP0=0, select bank0
  3866     0719  1303               	bcf	3,6	;RP1=0, select bank0
  3867     071A  1086               	bcf	6,1	;volatile
  3868     071B                     l153:
  3869     071B  0008               	return
  3870     071C                     __end_of_Lcd_Cmd:
  3871                           
  3872                           	psect	text20
  3873     05B5                     __ptext20:	
  3874 ;; *************** function _Lcd_Port *****************
  3875 ;; Defined at:
  3876 ;;		line 13 in file "LCD.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  a               1    wreg     unsigned char 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  a               1    2[COMMON] unsigned char 
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		wreg
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3890 ;;      Params:         0       0       0       0       0
  3891 ;;      Locals:         1       0       0       0       0
  3892 ;;      Temps:          0       0       0       0       0
  3893 ;;      Totals:         1       0       0       0       0
  3894 ;;Total ram usage:        1 bytes
  3895 ;; Hardware stack levels used: 1
  3896 ;; Hardware stack levels required when called: 1
  3897 ;; This function calls:
  3898 ;;		Nothing
  3899 ;; This function is called by:
  3900 ;;		_Lcd_Cmd
  3901 ;;		_Lcd_Init
  3902 ;;		_Lcd_Write_Char
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906     05B5                     _Lcd_Port:	
  3907                           ;psect for function _Lcd_Port
  3908                           
  3909                           
  3910                           ;incstack = 0
  3911                           ; Regs used in _Lcd_Port: [wreg]
  3912                           ;Lcd_Port@a stored from wreg
  3913     05B5  00F2               	movwf	Lcd_Port@a
  3914     05B6                     l1322:
  3915                           
  3916                           ;LCD.c: 14:     if (a & 1)
  3917     05B6  1C72               	btfss	Lcd_Port@a,0
  3918     05B7  2DB9               	goto	u721
  3919     05B8  2DBA               	goto	u720
  3920     05B9                     u721:
  3921     05B9  2DBE               	goto	l134
  3922     05BA                     u720:
  3923     05BA                     l1324:
  3924                           
  3925                           ;LCD.c: 15:         PORTDbits.RD0 = 1;
  3926     05BA  1283               	bcf	3,5	;RP0=0, select bank0
  3927     05BB  1303               	bcf	3,6	;RP1=0, select bank0
  3928     05BC  1408               	bsf	8,0	;volatile
  3929     05BD  2DC1               	goto	l135
  3930     05BE                     l134:	
  3931                           ;LCD.c: 16:     else
  3932                           
  3933                           
  3934                           ;LCD.c: 17:         PORTDbits.RD0 = 0;
  3935     05BE  1283               	bcf	3,5	;RP0=0, select bank0
  3936     05BF  1303               	bcf	3,6	;RP1=0, select bank0
  3937     05C0  1008               	bcf	8,0	;volatile
  3938     05C1                     l135:
  3939                           
  3940                           ;LCD.c: 19:     if (a & 2)
  3941     05C1  1CF2               	btfss	Lcd_Port@a,1
  3942     05C2  2DC4               	goto	u731
  3943     05C3  2DC5               	goto	u730
  3944     05C4                     u731:
  3945     05C4  2DC7               	goto	l136
  3946     05C5                     u730:
  3947     05C5                     l1326:
  3948                           
  3949                           ;LCD.c: 20:         PORTDbits.RD1 = 1;
  3950     05C5  1488               	bsf	8,1	;volatile
  3951     05C6  2DC8               	goto	l137
  3952     05C7                     l136:	
  3953                           ;LCD.c: 21:     else
  3954                           
  3955                           
  3956                           ;LCD.c: 22:         PORTDbits.RD1 = 0;
  3957     05C7  1088               	bcf	8,1	;volatile
  3958     05C8                     l137:
  3959                           
  3960                           ;LCD.c: 24:     if (a & 4)
  3961     05C8  1D72               	btfss	Lcd_Port@a,2
  3962     05C9  2DCB               	goto	u741
  3963     05CA  2DCC               	goto	u740
  3964     05CB                     u741:
  3965     05CB  2DCE               	goto	l138
  3966     05CC                     u740:
  3967     05CC                     l1328:
  3968                           
  3969                           ;LCD.c: 25:         PORTDbits.RD2 = 1;
  3970     05CC  1508               	bsf	8,2	;volatile
  3971     05CD  2DCF               	goto	l139
  3972     05CE                     l138:	
  3973                           ;LCD.c: 26:     else
  3974                           
  3975                           
  3976                           ;LCD.c: 27:         PORTDbits.RD2 = 0;
  3977     05CE  1108               	bcf	8,2	;volatile
  3978     05CF                     l139:
  3979                           
  3980                           ;LCD.c: 29:     if (a & 8)
  3981     05CF  1DF2               	btfss	Lcd_Port@a,3
  3982     05D0  2DD2               	goto	u751
  3983     05D1  2DD3               	goto	u750
  3984     05D2                     u751:
  3985     05D2  2DD5               	goto	l140
  3986     05D3                     u750:
  3987     05D3                     l1330:
  3988                           
  3989                           ;LCD.c: 30:         PORTDbits.RD3 = 1;
  3990     05D3  1588               	bsf	8,3	;volatile
  3991     05D4  2DD6               	goto	l141
  3992     05D5                     l140:	
  3993                           ;LCD.c: 31:     else
  3994                           
  3995                           
  3996                           ;LCD.c: 32:         PORTDbits.RD3 = 0;
  3997     05D5  1188               	bcf	8,3	;volatile
  3998     05D6                     l141:
  3999                           
  4000                           ;LCD.c: 34:     if (a & 16)
  4001     05D6  1E72               	btfss	Lcd_Port@a,4
  4002     05D7  2DD9               	goto	u761
  4003     05D8  2DDA               	goto	u760
  4004     05D9                     u761:
  4005     05D9  2DDC               	goto	l142
  4006     05DA                     u760:
  4007     05DA                     l1332:
  4008                           
  4009                           ;LCD.c: 35:         PORTDbits.RD4 = 1;
  4010     05DA  1608               	bsf	8,4	;volatile
  4011     05DB  2DDD               	goto	l143
  4012     05DC                     l142:	
  4013                           ;LCD.c: 36:     else
  4014                           
  4015                           
  4016                           ;LCD.c: 37:         PORTDbits.RD4 = 0;
  4017     05DC  1208               	bcf	8,4	;volatile
  4018     05DD                     l143:
  4019                           
  4020                           ;LCD.c: 39:     if (a & 32)
  4021     05DD  1EF2               	btfss	Lcd_Port@a,5
  4022     05DE  2DE0               	goto	u771
  4023     05DF  2DE1               	goto	u770
  4024     05E0                     u771:
  4025     05E0  2DE3               	goto	l144
  4026     05E1                     u770:
  4027     05E1                     l1334:
  4028                           
  4029                           ;LCD.c: 40:         PORTDbits.RD5 = 1;
  4030     05E1  1688               	bsf	8,5	;volatile
  4031     05E2  2DE4               	goto	l145
  4032     05E3                     l144:	
  4033                           ;LCD.c: 41:     else
  4034                           
  4035                           
  4036                           ;LCD.c: 42:         PORTDbits.RD5 = 0;
  4037     05E3  1288               	bcf	8,5	;volatile
  4038     05E4                     l145:
  4039                           
  4040                           ;LCD.c: 44:     if (a & 64)
  4041     05E4  1F72               	btfss	Lcd_Port@a,6
  4042     05E5  2DE7               	goto	u781
  4043     05E6  2DE8               	goto	u780
  4044     05E7                     u781:
  4045     05E7  2DEA               	goto	l146
  4046     05E8                     u780:
  4047     05E8                     l1336:
  4048                           
  4049                           ;LCD.c: 45:         PORTDbits.RD6 = 1;
  4050     05E8  1708               	bsf	8,6	;volatile
  4051     05E9  2DEB               	goto	l147
  4052     05EA                     l146:	
  4053                           ;LCD.c: 46:     else
  4054                           
  4055                           
  4056                           ;LCD.c: 47:         PORTDbits.RD6 = 0;
  4057     05EA  1308               	bcf	8,6	;volatile
  4058     05EB                     l147:
  4059                           
  4060                           ;LCD.c: 49:     if (a & 128)
  4061     05EB  1FF2               	btfss	Lcd_Port@a,7
  4062     05EC  2DEE               	goto	u791
  4063     05ED  2DEF               	goto	u790
  4064     05EE                     u791:
  4065     05EE  2DF1               	goto	l148
  4066     05EF                     u790:
  4067     05EF                     l1338:
  4068                           
  4069                           ;LCD.c: 50:         PORTDbits.RD7 = 1;
  4070     05EF  1788               	bsf	8,7	;volatile
  4071     05F0  2DF2               	goto	l150
  4072     05F1                     l148:	
  4073                           ;LCD.c: 51:     else
  4074                           
  4075                           
  4076                           ;LCD.c: 52:         PORTDbits.RD7 = 0;
  4077     05F1  1388               	bcf	8,7	;volatile
  4078     05F2                     l150:
  4079     05F2  0008               	return
  4080     05F3                     __end_of_Lcd_Port:
  4081                           
  4082                           	psect	text21
  4083     077E                     __ptext21:	
  4084 ;; *************** function _isr *****************
  4085 ;; Defined at:
  4086 ;;		line 131 in file "main.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;		None
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;		None
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      void 
  4093 ;; Registers used:
  4094 ;;		None
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4100 ;;      Params:         0       0       0       0       0
  4101 ;;      Locals:         0       0       0       0       0
  4102 ;;      Temps:          2       0       0       0       0
  4103 ;;      Totals:         2       0       0       0       0
  4104 ;;Total ram usage:        2 bytes
  4105 ;; Hardware stack levels used: 1
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		Interrupt level 1
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113     077E                     _isr:	
  4114                           ;psect for function _isr
  4115                           
  4116     077E                     i1l88:
  4117     077E  0871               	movf	??_isr+1,w
  4118     077F  008A               	movwf	10
  4119     0780  0E70               	swapf	??_isr,w
  4120     0781  0083               	movwf	3
  4121     0782  0EFE               	swapf	btemp,f
  4122     0783  0E7E               	swapf	btemp,w
  4123     0784  0009               	retfie
  4124     0785                     __end_of_isr:
  4125     007E                     btemp	set	126	;btemp
  4126     007E                     wtemp0	set	126
  4127                           
  4128                           	psect	intentry
  4129     0004                     __pintentry:	
  4130                           ;incstack = 0
  4131                           ; Regs used in _isr: []
  4132                           
  4133     0004                     interrupt_function:
  4134     007E                     saved_w	set	btemp
  4135     0004  00FE               	movwf	btemp
  4136     0005  0E03               	swapf	3,w
  4137     0006  00F0               	movwf	??_isr
  4138     0007  080A               	movf	10,w
  4139     0008  00F1               	movwf	??_isr+1
  4140     0009  120A  118A  2F7E   	ljmp	_isr
  4141                           
  4142                           	psect	idloc
  4143                           
  4144                           ;Config register IDLOC0 @ 0x2000
  4145                           ;	unspecified, using default values
  4146     2000                     	org	8192
  4147     2000  3FFF               	dw	16383
  4148                           
  4149                           ;Config register IDLOC1 @ 0x2001
  4150                           ;	unspecified, using default values
  4151     2001                     	org	8193
  4152     2001  3FFF               	dw	16383
  4153                           
  4154                           ;Config register IDLOC2 @ 0x2002
  4155                           ;	unspecified, using default values
  4156     2002                     	org	8194
  4157     2002  3FFF               	dw	16383
  4158                           
  4159                           ;Config register IDLOC3 @ 0x2003
  4160                           ;	unspecified, using default values
  4161     2003                     	org	8195
  4162     2003  3FFF               	dw	16383
  4163                           
  4164                           	psect	config
  4165                           
  4166                           ;Config register CONFIG1 @ 0x2007
  4167                           ;	Oscillator Selection bits
  4168                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  4169                           ;	Watchdog Timer Enable bit
  4170                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4171                           ;	Power-up Timer Enable bit
  4172                           ;	PWRTE = OFF, PWRT disabled
  4173                           ;	RE3/MCLR pin function select bit
  4174                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4175                           ;	Code Protection bit
  4176                           ;	CP = OFF, Program memory code protection is disabled
  4177                           ;	Data Code Protection bit
  4178                           ;	CPD = OFF, Data memory code protection is disabled
  4179                           ;	Brown Out Reset Selection bits
  4180                           ;	BOREN = OFF, BOR disabled
  4181                           ;	Internal External Switchover bit
  4182                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4183                           ;	Fail-Safe Clock Monitor Enabled bit
  4184                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4185                           ;	Low Voltage Programming Enable bit
  4186                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4187                           ;	In-Circuit Debugger Mode bit
  4188                           ;	DEBUG = 0x1, unprogramme  4189     2007                     	org	8199
  4190     2007  20D4               	dw	8404
  4191                           
  4192                           ;Config register CONFIG2 @ 0x2008
  4193                           ;	Brown-out Reset Selection bit
  4194                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4195                           ;	Flash Program Memory Self Write Enable bits
  4196                           ;	WRT = OFF, Write protection off
  4197     2008                     	org	8200
  4198     2008  3FFF               	dw	16383

Data Sizes:
    Strings     26
    Constant    10
    Data        0
    BSS         79
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     25      64
    BANK1            80      0      40
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_6(CODE[5]), STR_5(CODE[9]), STR_4(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer2(BANK1[20]), buffer1(BANK1[20]), buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK1[20]), buffer1(BANK1[20]), buffer(BANK0[20]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_String
    _main->___awdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_spiInit
    _map->___awdiv
    ___awdiv->___wmul
    ___awmod->___awdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    _map->___awdiv
    ___awmod->___awdiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   12124
                                             23 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                             ___wmul
                                _map
                              _setup
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    20      7    3236
                                              4 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                             10 COMMON     2     2      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     2      8    3130
                                              5 BANK0     10     2      8
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1308
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1060
                                              8 COMMON     4     0      4
                                              0 BANK0      5     5      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     904
                                              5 BANK0      7     3      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     744
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0     198
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     788
                                              6 COMMON     3     2      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     374
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     198
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     198
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     176
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
     ___wmul (ARG)
   ___awmod
     ___awdiv (ARG)
     ___wmul (ARG)
   ___wmul
   _map
     ___awdiv
     ___wmul
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      74       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      40       5       80.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      28       7       50.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      74      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Aug 02 22:41:41 2023

                       pc 0002               map@inputmax 004E               map@inputmin 004C  
             _SSPSTATbits 0094                        l75 0663                        l91 06BC  
            ___awdiv@sign 0049                        fsr 0004       ___wmul@multiplicand 0074  
                     l111 0777                       l114 077D                       l107 072C  
                     l140 05D5                       l108 0731                       l141 05D6  
                     l125 076E                       l117 078A                       l150 05F2  
                     l142 05DC                       l134 05BE                       l143 05DD  
                     l135 05C1                       l144 05E3                       l136 05C7  
                     l145 05E4                       l137 05C8                       l153 071B  
                     l313 0419                       l146 05EA                       l138 05CE  
                     l162 0701                       l147 05EB                       l139 05CF  
                     l148 05F1                       l156 0765                       l165 052E  
                     l317 06C9                       l174 05B4                       l319 06E1  
                     l168 0746                       l470 0482                       l278 0274  
                     l296 034E                       l483 04DD                       l770 0758  
                     l589 0572                       l599 062E                       u720 05BA  
                     u800 0724                       u721 05B9                       u801 0723  
                     u730 05C5                       u810 077D                       u731 05C4  
                     u811 077C                       u740 05CC                       u900 043D  
                     u820 074F                       u741 05CB                       u901 043C  
                     u821 074E                       u750 05D3                       u830 0755  
                     u751 05D2                       u831 0754                       u760 05DA  
                     u920 044F                       u840 06C3                       u761 05D9  
                     u921 044E                       u841 06C2                       u770 05E1  
                     u771 05E0                       u915 0441                       u780 05E8  
                     u940 0460                       u781 05E7                       u941 045F  
                     u790 05EF                       u870 06DD                       u791 05EE  
                     u935 0450                       u871 06DC                       u855 06CA  
                     u960 0474                       u880 0421                       u961 0473  
                     u945 045C                       u881 0420                       u865 06D1  
                     u970 0479                       u890 042C                       u971 0478  
                     u955 0468                       u891 042B                       u980 0537  
                     u981 0536                       u995 053B                       _map 062F  
                     _isr 077E                       fsr0 0004                       indf 0000  
            ___awmod@sign 0052                      l1400 041D                      l1330 05D3  
                    l1322 05B6                      l1410 0431                      l1402 0421  
                    l1332 05DA                      l1324 05BA                      l1420 0447  
                    l1412 0435                      l1404 0426                      l1340 071D  
                    l1500 06A2                      l1334 05E1                      l1326 05C5  
                    l1510 04DE                      l1430 0467                      l1422 044B  
                    l1414 0437                      l1406 0428                      l1342 0724  
                    l1502 06A5                      l1350 0777                      l1336 05E8  
                    l1328 05CC                      l1360 0718                      l1352 0703  
                    l1520 052A                      l1512 04E4                      l1432 046E  
                    l1424 044F                      l1416 043D                      l1408 042C  
                    l1344 0726                      l1504 06AB                      l1600 0316  
                    l1338 05EF                      l1354 0706                      l1522 0759  
                    l1514 04ED                      l1530 06F2                      l1370 0743  
                    l1362 0733                      l1426 0460                      l1418 0440  
                    l1434 0474                      l1346 0728                      l1506 06B1  
                    l1450 0541                      l1442 052F                      l1610 0348  
                    l1356 070C                      l1516 04FB                      l1532 06F8  
                    l1524 06E3                      l1364 0736                      l1540 0592  
                    l1700 04CF                      l1436 0479                      l1428 0466  
                    l1348 072B                      l1508 06B2                      l1460 0561  
                    l1452 0545                      l1444 0531                      l1380 0757  
                    l1372 0748                      l1620 0373                      l1612 0359  
                    l1604 0332                      l1358 070F                      l1518 0501  
                    l1534 06FB                      l1526 06E8                      l1366 073C  
                    l1542 0598                      l1702 04D4                      l1438 047E  
                    l1390 06D0                      l1462 0568                      l1454 0549  
                    l1446 0537                      l1470 05FB                      l1374 0749  
                    l1630 038B                      l1622 0378                      l1614 0365  
                    l1606 033C                      l1710 003B                      l1528 06EB  
                    l1368 073F                      l1536 0573                      l1704 04D9  
                    l1392 06D7                      l1384 06BD                      l1544 0786  
                    l1456 055A                      l1448 053A                      l1464 056E  
                    l1480 0617                      l1472 05FE                      l1376 074F  
                    l1640 03B3                      l1624 037C                      l1632 0398  
                    l1616 0369                      l1608 0342                      l1560 0270  
                    l1552 025D                      l1720 0069                      l1712 0044  
                    l1538 0576                      l1394 06DD                      l1386 06BF  
                    l1490 0632                      l1546 0766                      l1458 0560  
                    l1482 061D                      l1474 0605                      l1378 0755  
                    l1650 03F3                      l1642 03B9                      l1634 039E  
                    l1626 0382                      l1618 036D                      l1570 029C  
                    l1810 0287                      l1562 0275                      l1554 0260  
                    l1730 008A                      l1722 0071                      l1714 0055  
                    l1388 06C3                      l1548 076B                      l1484 0624  
                    l1476 0609                      l1468 05F3                      l1652 03F8  
                    l1644 03BE                      l1636 03A3                      l1628 0387  
                    l1812 02F0                      l1572 02A0                      l1556 0266  
                    l1740 00A9                      l1732 008B                      l1724 0077  
                    l1716 005D                      l1708 0024                      l1670 0483  
                    l1398 041A                      l1494 0698                      l1478 060D  
                    l1486 062A                      l1654 03FC                      l1638 03A7  
                    l1646 03C2                      l1590 030B                      l1574 02B5  
                    l1582 02DC                      l1566 0279                      l1558 026B  
                    l1750 00C3                      l1742 00AC                      l1734 0093  
                    l1726 007F                      l1718 0066                      l1680 0495  
                    l1672 0486                      l1496 069F                      l1648 03C5  
                    l1592 030F                      l1584 02FB                      l1576 02C8  
                    l1568 028C                      l1656 0405                      l1760 022B  
                    l1752 00CB                      l1744 00AD                      l1736 0099  
                    l1728 0087                      l1690 04AE                      l1682 049A  
                    l1674 048A                      l1498 06A0                      l1594 0314  
                    l1586 0303                      l1658 0415                      l1578 02CC  
                    l1762 023C                      l1754 0161                      l1746 00B5  
                    l1738 00A1                      l1692 04B2                      l1684 04A0  
                    l1676 048F                      l1588 0307                      l1764 024D  
                    l1756 0177                      l1748 00BB                      l1694 04BC  
                    l1686 04A3                      l1678 0491                      l1758 0215  
                    l1696 04C2                      l1688 04AA                      l1698 04C9  
                    ?_map 004C                      ?_isr 0070                      STR_1 0690  
                    STR_2 068C                      STR_3 0694                      STR_4 067E  
                    STR_5 067E                      STR_6 0687                      u1000 0549  
                    u1001 0548                      u1020 055A                      u1100 062A  
                    u1021 0559                      u1101 0629                      u1110 06E8  
                    u1111 06E7                      u1015 054A                      u1120 06F8  
                    u1040 056E                      u1200 0331                      u1121 06F7  
                    u1041 056D                      u1025 0556                      u1201 0330  
                    u1130 0580                      u1050 05FB                      u1210 033C  
                    u1035 0562                      u1051 05FA                      u1211 033B  
                    u1140 05A2                      u1300 03B3                      u1220 0342  
                    u1301 03B2                      u1221 0341                      u1205 032D  
                    u1150 05B4                      u1070 060D                      u1310 03B9  
                    u1230 0348                      u1151 05B3                      u1071 060C  
                    u1311 03B8                      u1231 0347                      u1080 0617  
                    u1320 0405                      u1240 0359                      u1160 0266  
                    u1081 0616                      u1065 05FF                      u1321 0404  
                    u1241 0358                      u1161 0265                      u1410 04CF  
                    u1330 0415                      u1250 036D                      u1170 029C  
                    u1411 04CE                      u1331 0414                      u1251 036C  
                    u1171 029B                      u1420 04D4                      u1340 048A  
                    u1260 0373                      u1180 02DC                      u1421 04D3  
                    u1405 04C3                      u1341 0489                      u1085 0613  
                    u1261 0372                      u1245 0355                      u1181 02DB  
                    u1350 0495                      u1270 0382                      u1190 030B  
                    u1351 0494                      u1095 061E                      u1271 0381  
                    u1191 030A                      u1360 04A0                      u1280 0397  
                    u1361 049F                      u1281 0396                      u1290 039E  
                    u1507 04E8                      u1291 039D                      u1380 04B2  
                    u1517 04F7                      u1381 04B1                      u1437 006D  
                    u1390 04BC                      u1527 0503                      u1391 04BB  
                    u1375 04A4                      u1447 0083                      u1537 052C  
                    u1457 008F                      u1547 0713                      u1395 04B8  
                    u1467 00A5                      u1477 00B1                      u1487 00C7  
                    u1497 0741                      i1l88 077E         ?_Lcd_Write_String 0075  
                    _main 0024                      _vol1 002E                      _vol2 002C  
                    btemp 007E                      start 000C        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 071C                     ??_map 0054                     ??_isr 0070  
                   ?_main 0070           __end_of___awdiv 0483           __end_of___awmod 04DE  
                   _ANSEL 0188           ___awdiv@divisor 0078           __end_of___lwdiv 0573  
         __end_of___lwmod 062F           ___awdiv@counter 0048                     _PORTA 0005  
                   _PORTB 0006                     _PORTC 0007                     _PORTD 0008  
                   _PORTE 0009                     _TRISB 0086                     _TRISD 0088  
         __end_of_dpowers 067E           __end_of_isdigit 0759                     _setup 0698  
                   pclath 000A           __end_of_spiInit 0732           __end_of_spiRead 076F  
                   status 0003                     wtemp0 007E           __end_of_sprintf 041A  
        __end_of_Lcd_Init 052F          __end_of_Lcd_Port 05F3           __initialization 000F  
            __end_of_main 025A                    ??_main 005E          ___awdiv@dividend 007A  
                  ?_setup 0070                    _ANSELH 0189                 ??_Lcd_Cmd 0073  
                  _TRISC3 043B                    _TRISC5 043D                    _SSPCON 0014  
                  _SSPBUF 0013                    ___wmul 06BD                 ??___awdiv 0047  
               ??___awmod 0050                 ??___lwdiv 0076                 ??___lwmod 007A  
                  _buffer 0033          ___awdiv@quotient 004A           ___awmod@divisor 004C  
         ___awmod@counter 0051                 ??_isdigit 0072                    saved_w 007E  
        __end_of_spiWrite 078B                 ??_spiInit 0075                 ??_spiRead 0072  
               ??_sprintf 0052           Lcd_Set_Cursor@a 0077           Lcd_Set_Cursor@b 0076  
 __end_of__initialization 0020         __end_of_Lcd_Clear 0766            __pcstackCOMMON 0070  
           __end_of_setup 06BD            _Lcd_Set_Cursor 06E2                 ?_Lcd_Init 0070  
               ?_Lcd_Port 0070              sprintf@width 005A                   ??_setup 0076  
              __pbssBANK0 0020                __pbssBANK1 00A0                __pmaintext 0024  
                 ?___wmul 0072                _centesima1 0026                _centesima2 0020  
              __pintentry 0004    __end_of_Lcd_Set_Cursor 0702                ??_Lcd_Init 0076  
              ??_Lcd_Port 0072                   _SSPSTAT 0094                __stringtab 0664  
          _Lcd_Write_Char 0732                   _Lcd_Cmd 0702                 ?_spiWrite 0070  
                 ___awdiv 041A                   ___awmod 0483                   ___lwdiv 052F  
                 ___lwmod 05F3                   _decima1 0028                   _decima2 0022  
         ?_Lcd_Set_Cursor 0076                   __ptext1 025A                   __ptext2 0747  
                 __ptext3 05F3                   __ptext4 052F                   __ptext5 0785  
                 __ptext6 0766                   __ptext7 0777                   __ptext8 0698  
                 __ptext9 071C                   _buffer1 00B4                   _buffer2 00A0  
                 _dpowers 0674                   _isdigit 0747          ___awmod@dividend 004E  
                 _spiInit 071C                   _spiRead 0766                   _unidad1 002A  
                 _unidad2 0024                   _sprintf 025A                   clrloop0 0770  
  __end_of_Lcd_Write_Char 0747      end_of_initialization 0020                ??_spiWrite 0072  
               Lcd_Port@a 0072                 _PORTBbits 0006                 _PORTCbits 0007  
               _PORTDbits 0008                 _TRISCbits 0087               spiWrite@dat 0072  
         ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0075         Lcd_Write_String@i 007A  
               _Lcd_Clear 0759            _spiReceiveWait 0777            __end_of___wmul 06E2  
        _Lcd_Write_String 0573       start_initialization 000F               __end_of_map 0664  
             __end_of_isr 0785    __end_of_spiReceiveWait 077E                ?_Lcd_Clear 0070  
                ??___wmul 0076           Lcd_Write_Char@a 0074                 ___latbits 0002  
           __pcstackBANK0 0047                  ?_Lcd_Cmd 0070               sprintf@flag 0059  
             sprintf@prec 0056          ___lwdiv@dividend 0074           ?_spiReceiveWait 0070  
        ??_Lcd_Set_Cursor 0077                  ?___awdiv 0078                  ?___awmod 004C  
                ?___lwdiv 0072                  ?___lwmod 0047                 __pstrings 0664  
                ?_isdigit 0070                  ?_spiInit 0072                  ?_spiRead 0070  
        ___lwdiv@quotient 0077                  ?_sprintf 004B      spiInit@sTransmitEdge 0074  
       interrupt_function 0004            ___wmul@product 0076                 clear_ram0 076F  
      spiInit@sDataSample 0072                  Lcd_Cmd@a 0075               ??_Lcd_Clear 0076  
             __stringbase 0673         ___wmul@multiplier 0072                 map@outmax 0052  
               map@outmin 0050          ??_Lcd_Write_Char 0073                  _Lcd_Init 04DE  
                _Lcd_Port 05B5  __end_of_Lcd_Write_String 05B5        __end_of__stringtab 0674  
             _isdigit$912 0072                sprintf@val 0057           ___lwdiv@divisor 0072  
         ___lwdiv@counter 0079                  __ptext10 062F                  __ptext11 06BD  
                __ptext20 05B5                  __ptext12 041A                  __ptext21 077E  
                __ptext13 0483                  __ptext14 0573                  __ptext15 0732  
                __ptext16 06E2                  __ptext17 04DE                  __ptext18 0759  
                __ptext19 0702                  _contador 0030                  _spiWrite 0785  
            spiInit@sType 0075                  map@value 0055         spiInit@sClockIdle 0073  
                _voltaje1 0032                  _voltaje2 0031                  isdigit@c 0073  
                intlevel1 0000                 sprintf@ap 0055                 sprintf@sp 005C  
        ___lwmod@dividend 0049          ??_spiReceiveWait 0072                 stringcode 066E  
              _OSCCONbits 008F        Lcd_Set_Cursor@temp 0078                  sprintf@c 005D  
                sprintf@f 004B           ___lwmod@divisor 0047           ___lwmod@counter 007B  
                stringdir 066E                  stringtab 0664  
