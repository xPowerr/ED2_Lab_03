

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Aug 01 00:09:00 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    31                           	dabs	1,0x7E,2
    32     0000                     
    33                           ; Version 2.40
    34                           ; Generated 04/07/2022 GMT
    35                           ; 
    36                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution. Publication is not required when
    50                           ;        this file is used in an embedded application.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68     0000                     	;# 
    69     0001                     	;# 
    70     0002                     	;# 
    71     0003                     	;# 
    72     0004                     	;# 
    73     0005                     	;# 
    74     0006                     	;# 
    75     0007                     	;# 
    76     0008                     	;# 
    77     0009                     	;# 
    78     000A                     	;# 
    79     000B                     	;# 
    80     000C                     	;# 
    81     000D                     	;# 
    82     000E                     	;# 
    83     000E                     	;# 
    84     000F                     	;# 
    85     0010                     	;# 
    86     0011                     	;# 
    87     0012                     	;# 
    88     0013                     	;# 
    89     0014                     	;# 
    90     0015                     	;# 
    91     0015                     	;# 
    92     0016                     	;# 
    93     0017                     	;# 
    94     0018                     	;# 
    95     0019                     	;# 
    96     001A                     	;# 
    97     001B                     	;# 
    98     001B                     	;# 
    99     001C                     	;# 
   100     001D                     	;# 
   101     001E                     	;# 
   102     001F                     	;# 
   103     0081                     	;# 
   104     0085                     	;# 
   105     0086                     	;# 
   106     0087                     	;# 
   107     0088                     	;# 
   108     0089                     	;# 
   109     008C                     	;# 
   110     008D                     	;# 
   111     008E                     	;# 
   112     008F                     	;# 
   113     0090                     	;# 
   114     0091                     	;# 
   115     0092                     	;# 
   116     0093                     	;# 
   117     0093                     	;# 
   118     0093                     	;# 
   119     0094                     	;# 
   120     0095                     	;# 
   121     0096                     	;# 
   122     0097                     	;# 
   123     0098                     	;# 
   124     0099                     	;# 
   125     009A                     	;# 
   126     009B                     	;# 
   127     009C                     	;# 
   128     009D                     	;# 
   129     009E                     	;# 
   130     009F                     	;# 
   131     0105                     	;# 
   132     0107                     	;# 
   133     0108                     	;# 
   134     0109                     	;# 
   135     010C                     	;# 
   136     010C                     	;# 
   137     010D                     	;# 
   138     010E                     	;# 
   139     010F                     	;# 
   140     0185                     	;# 
   141     0187                     	;# 
   142     0188                     	;# 
   143     0189                     	;# 
   144     018C                     	;# 
   145     018D                     	;# 
   146     0000                     	;# 
   147     0001                     	;# 
   148     0002                     	;# 
   149     0003                     	;# 
   150     0004                     	;# 
   151     0005                     	;# 
   152     0006                     	;# 
   153     0007                     	;# 
   154     0008                     	;# 
   155     0009                     	;# 
   156     000A                     	;# 
   157     000B                     	;# 
   158     000C                     	;# 
   159     000D                     	;# 
   160     000E                     	;# 
   161     000E                     	;# 
   162     000F                     	;# 
   163     0010                     	;# 
   164     0011                     	;# 
   165     0012                     	;# 
   166     0013                     	;# 
   167     0014                     	;# 
   168     0015                     	;# 
   169     0015                     	;# 
   170     0016                     	;# 
   171     0017                     	;# 
   172     0018                     	;# 
   173     0019                     	;# 
   174     001A                     	;# 
   175     001B                     	;# 
   176     001B                     	;# 
   177     001C                     	;# 
   178     001D                     	;# 
   179     001E                     	;# 
   180     001F                     	;# 
   181     0081                     	;# 
   182     0085                     	;# 
   183     0086                     	;# 
   184     0087                     	;# 
   185     0088                     	;# 
   186     0089                     	;# 
   187     008C                     	;# 
   188     008D                     	;# 
   189     008E                     	;# 
   190     008F                     	;# 
   191     0090                     	;# 
   192     0091                     	;# 
   193     0092                     	;# 
   194     0093                     	;# 
   195     0093                     	;# 
   196     0093                     	;# 
   197     0094                     	;# 
   198     0095                     	;# 
   199     0096                     	;# 
   200     0097                     	;# 
   201     0098                     	;# 
   202     0099                     	;# 
   203     009A                     	;# 
   204     009B                     	;# 
   205     009C                     	;# 
   206     009D                     	;# 
   207     009E                     	;# 
   208     009F                     	;# 
   209     0105                     	;# 
   210     0107                     	;# 
   211     0108                     	;# 
   212     0109                     	;# 
   213     010C                     	;# 
   214     010C                     	;# 
   215     010D                     	;# 
   216     010E                     	;# 
   217     010F                     	;# 
   218     0185                     	;# 
   219     0187                     	;# 
   220     0188                     	;# 
   221     0189                     	;# 
   222     018C                     	;# 
   223     018D                     	;# 
   224     0000                     	;# 
   225     0001                     	;# 
   226     0002                     	;# 
   227     0003                     	;# 
   228     0004                     	;# 
   229     0005                     	;# 
   230     0006                     	;# 
   231     0007                     	;# 
   232     0008                     	;# 
   233     0009                     	;# 
   234     000A                     	;# 
   235     000B                     	;# 
   236     000C                     	;# 
   237     000D                     	;# 
   238     000E                     	;# 
   239     000E                     	;# 
   240     000F                     	;# 
   241     0010                     	;# 
   242     0011                     	;# 
   243     0012                     	;# 
   244     0013                     	;# 
   245     0014                     	;# 
   246     0015                     	;# 
   247     0015                     	;# 
   248     0016                     	;# 
   249     0017                     	;# 
   250     0018                     	;# 
   251     0019                     	;# 
   252     001A                     	;# 
   253     001B                     	;# 
   254     001B                     	;# 
   255     001C                     	;# 
   256     001D                     	;# 
   257     001E                     	;# 
   258     001F                     	;# 
   259     0081                     	;# 
   260     0085                     	;# 
   261     0086                     	;# 
   262     0087                     	;# 
   263     0088                     	;# 
   264     0089                     	;# 
   265     008C                     	;# 
   266     008D                     	;# 
   267     008E                     	;# 
   268     008F                     	;# 
   269     0090                     	;# 
   270     0091                     	;# 
   271     0092                     	;# 
   272     0093                     	;# 
   273     0093                     	;# 
   274     0093                     	;# 
   275     0094                     	;# 
   276     0095                     	;# 
   277     0096                     	;# 
   278     0097                     	;# 
   279     0098                     	;# 
   280     0099                     	;# 
   281     009A                     	;# 
   282     009B                     	;# 
   283     009C                     	;# 
   284     009D                     	;# 
   285     009E                     	;# 
   286     009F                     	;# 
   287     0105                     	;# 
   288     0107                     	;# 
   289     0108                     	;# 
   290     0109                     	;# 
   291     010C                     	;# 
   292     010C                     	;# 
   293     010D                     	;# 
   294     010E                     	;# 
   295     010F                     	;# 
   296     0185                     	;# 
   297     0187                     	;# 
   298     0188                     	;# 
   299     0189                     	;# 
   300     018C                     	;# 
   301     018D                     	;# 
   302     0000                     	;# 
   303     0001                     	;# 
   304     0002                     	;# 
   305     0003                     	;# 
   306     0004                     	;# 
   307     0005                     	;# 
   308     0006                     	;# 
   309     0007                     	;# 
   310     0008                     	;# 
   311     0009                     	;# 
   312     000A                     	;# 
   313     000B                     	;# 
   314     000C                     	;# 
   315     000D                     	;# 
   316     000E                     	;# 
   317     000E                     	;# 
   318     000F                     	;# 
   319     0010                     	;# 
   320     0011                     	;# 
   321     0012                     	;# 
   322     0013                     	;# 
   323     0014                     	;# 
   324     0015                     	;# 
   325     0015                     	;# 
   326     0016                     	;# 
   327     0017                     	;# 
   328     0018                     	;# 
   329     0019                     	;# 
   330     001A                     	;# 
   331     001B                     	;# 
   332     001B                     	;# 
   333     001C                     	;# 
   334     001D                     	;# 
   335     001E                     	;# 
   336     001F                     	;# 
   337     0081                     	;# 
   338     0085                     	;# 
   339     0086                     	;# 
   340     0087                     	;# 
   341     0088                     	;# 
   342     0089                     	;# 
   343     008C                     	;# 
   344     008D                     	;# 
   345     008E                     	;# 
   346     008F                     	;# 
   347     0090                     	;# 
   348     0091                     	;# 
   349     0092                     	;# 
   350     0093                     	;# 
   351     0093                     	;# 
   352     0093                     	;# 
   353     0094                     	;# 
   354     0095                     	;# 
   355     0096                     	;# 
   356     0097                     	;# 
   357     0098                     	;# 
   358     0099                     	;# 
   359     009A                     	;# 
   360     009B                     	;# 
   361     009C                     	;# 
   362     009D                     	;# 
   363     009E                     	;# 
   364     009F                     	;# 
   365     0105                     	;# 
   366     0107                     	;# 
   367     0108                     	;# 
   368     0109                     	;# 
   369     010C                     	;# 
   370     010C                     	;# 
   371     010D                     	;# 
   372     010E                     	;# 
   373     010F                     	;# 
   374     0185                     	;# 
   375     0187                     	;# 
   376     0188                     	;# 
   377     0189                     	;# 
   378     018C                     	;# 
   379     018D                     	;# 
   380                           
   381                           	psect	strings
   382     03C7                     __pstrings:
   383     03C7                     stringtab:
   384     03C7                     __stringtab:
   385                           
   386                           ;	String table - string pointers are 1 byte each
   387     03C7  1BFF               	btfsc	btemp+1,7
   388     03C8  2BD1               	ljmp	stringcode
   389     03C9  1383               	bcf	3,7
   390     03CA  187F               	btfsc	btemp+1,0
   391     03CB  1783               	bsf	3,7
   392     03CC  0800               	movf	0,w
   393     03CD  0A84               	incf	4,f
   394     03CE  1903               	skipnz
   395     03CF  0AFF               	incf	btemp+1,f
   396     03D0  0008               	return
   397     03D1                     stringcode:
   398     03D1                     stringdir:
   399     03D1  3003               	movlw	high stringdir
   400     03D2  008A               	movwf	10
   401     03D3  0804               	movf	4,w
   402     03D4  0A84               	incf	4,f
   403     03D5  0782               	addwf	2,f
   404     03D6                     __stringbase:
   405     03D6  3400               	retlw	0
   406     03D7                     __end_of__stringtab:
   407     03D7                     _dpowers:
   408     03D7  3401               	retlw	1
   409     03D8  3400               	retlw	0
   410     03D9  340A               	retlw	10
   411     03DA  3400               	retlw	0
   412     03DB  3464               	retlw	100
   413     03DC  3400               	retlw	0
   414     03DD  34E8               	retlw	232
   415     03DE  3403               	retlw	3
   416     03DF  3410               	retlw	16
   417     03E0  3427               	retlw	39
   418     03E1                     __end_of_dpowers:
   419     0013                     _SSPBUF	set	19
   420     0014                     _SSPCON	set	20
   421     0006                     _PORTBbits	set	6
   422     0008                     _PORTDbits	set	8
   423     000B                     _INTCONbits	set	11
   424     0009                     _PORTE	set	9
   425     0008                     _PORTD	set	8
   426     0007                     _PORTC	set	7
   427     0005                     _PORTA	set	5
   428     0006                     _PORTB	set	6
   429     0007                     _PORTCbits	set	7
   430     0094                     _SSPSTATbits	set	148
   431     0094                     _SSPSTAT	set	148
   432     008F                     _OSCCONbits	set	143
   433     0088                     _TRISD	set	136
   434     0086                     _TRISB	set	134
   435     043B                     _TRISC3	set	1083
   436     043D                     _TRISC5	set	1085
   437     043A                     _TRISC2	set	1082
   438     0189                     _ANSELH	set	393
   439     0188                     _ANSEL	set	392
   440     03E1                     STR_2:
   441     03E1  3425               	retlw	37	;'%'
   442     03E2  3430               	retlw	48	;'0'
   443     03E3  3433               	retlw	51	;'3'
   444     03E4  3464               	retlw	100	;'d'
   445     03E5  3400               	retlw	0
   446     03E6                     STR_1:
   447     03E6  3453               	retlw	83	;'S'
   448     03E7  3431               	retlw	49	;'1'
   449     03E8  343A               	retlw	58	;':'
   450     03E9  3400               	retlw	0
   451                           
   452                           	psect	cinit
   453     000F                     start_initialization:	
   454                           ; #config settings
   455                           
   456     000F                     __initialization:
   457                           
   458                           ; Clear objects allocated to BANK0
   459     000F  1283               	bcf	3,5	;RP0=0, select bank0
   460     0010  1303               	bcf	3,6	;RP1=0, select bank0
   461     0011  01B5               	clrf	__pbssBANK0& (0+127)
   462     0012  01B6               	clrf	(__pbssBANK0+1)& (0+127)
   463     0013  01B7               	clrf	(__pbssBANK0+2)& (0+127)
   464     0014                     end_of_initialization:	
   465                           ;End of C runtime variable initialization code
   466                           
   467     0014                     __end_of__initialization:
   468     0014  0183               	clrf	3
   469     0015  120A  118A  29D8   	ljmp	_main	;jump to C main() function
   470                           
   471                           	psect	bssBANK0
   472     0035                     __pbssBANK0:
   473     0035                     _LCD_var1:
   474     0035                     	ds	2
   475     0037                     _LCD_ADC_S1:
   476     0037                     	ds	1
   477                           
   478                           	psect	cstackCOMMON
   479     0070                     __pcstackCOMMON:
   480     0070                     ?_isdigit:
   481     0070                     ?_setup:	
   482                           ; 1 bit 
   483                           
   484     0070                     ?_Lcd_Init:	
   485                           ; 1 bytes @ 0x0
   486                           
   487     0070                     ?_Lcd_Clear:	
   488                           ; 1 bytes @ 0x0
   489                           
   490     0070                     ?_spiWrite:	
   491                           ; 1 bytes @ 0x0
   492                           
   493     0070                     ?_spiRead:	
   494                           ; 1 bytes @ 0x0
   495                           
   496     0070                     ?_main:	
   497                           ; 1 bytes @ 0x0
   498                           
   499     0070                     ?_isr:	
   500                           ; 1 bytes @ 0x0
   501                           
   502     0070                     ??_isr:	
   503                           ; 1 bytes @ 0x0
   504                           
   505     0070                     ?_Lcd_Port:	
   506                           ; 1 bytes @ 0x0
   507                           
   508     0070                     ?_Lcd_Cmd:	
   509                           ; 1 bytes @ 0x0
   510                           
   511     0070                     ?_Lcd_Write_Char:	
   512                           ; 1 bytes @ 0x0
   513                           
   514     0070                     ?_spiReceiveWait:	
   515                           ; 1 bytes @ 0x0
   516                           
   517                           
   518                           ; 1 bytes @ 0x0
   519     0070                     	ds	2
   520     0072                     ??_spiWrite:
   521     0072                     ??_spiRead:	
   522                           ; 1 bytes @ 0x2
   523                           
   524     0072                     ?_spiInit:	
   525                           ; 1 bytes @ 0x2
   526                           
   527     0072                     ??_isdigit:	
   528                           ; 1 bytes @ 0x2
   529                           
   530     0072                     ??_Lcd_Port:	
   531                           ; 1 bytes @ 0x2
   532                           
   533     0072                     ??_spiReceiveWait:	
   534                           ; 1 bytes @ 0x2
   535                           
   536     0072                     ?___wmul:	
   537                           ; 1 bytes @ 0x2
   538                           
   539     0072                     ?___lwdiv:	
   540                           ; 2 bytes @ 0x2
   541                           
   542     0072                     Lcd_Port@a:	
   543                           ; 2 bytes @ 0x2
   544                           
   545     0072                     spiInit@sDataSample:	
   546                           ; 1 bytes @ 0x2
   547                           
   548     0072                     spiWrite@dat:	
   549                           ; 1 bytes @ 0x2
   550                           
   551     0072                     _isdigit$879:	
   552                           ; 1 bytes @ 0x2
   553                           
   554     0072                     ___wmul@multiplier:	
   555                           ; 1 bytes @ 0x2
   556                           
   557     0072                     ___lwdiv@divisor:	
   558                           ; 2 bytes @ 0x2
   559                           
   560                           
   561                           ; 2 bytes @ 0x2
   562     0072                     	ds	1
   563     0073                     ??_Lcd_Cmd:
   564     0073                     ??_Lcd_Write_Char:	
   565                           ; 1 bytes @ 0x3
   566                           
   567     0073                     spiInit@sClockIdle:	
   568                           ; 1 bytes @ 0x3
   569                           
   570     0073                     isdigit@c:	
   571                           ; 1 bytes @ 0x3
   572                           
   573                           
   574                           ; 1 bytes @ 0x3
   575     0073                     	ds	1
   576     0074                     Lcd_Write_Char@a:
   577     0074                     spiInit@sTransmitEdge:	
   578                           ; 1 bytes @ 0x4
   579                           
   580     0074                     ___wmul@multiplicand:	
   581                           ; 1 bytes @ 0x4
   582                           
   583     0074                     ___lwdiv@dividend:	
   584                           ; 2 bytes @ 0x4
   585                           
   586                           
   587                           ; 2 bytes @ 0x4
   588     0074                     	ds	1
   589     0075                     ?_Lcd_Write_String:
   590     0075                     ??_spiInit:	
   591                           ; 1 bytes @ 0x5
   592                           
   593     0075                     Lcd_Cmd@a:	
   594                           ; 1 bytes @ 0x5
   595                           
   596     0075                     spiInit@sType:	
   597                           ; 1 bytes @ 0x5
   598                           
   599     0075                     Lcd_Write_String@a:	
   600                           ; 1 bytes @ 0x5
   601                           
   602                           
   603                           ; 2 bytes @ 0x5
   604     0075                     	ds	1
   605     0076                     ??_setup:
   606     0076                     ??_Lcd_Init:	
   607                           ; 1 bytes @ 0x6
   608                           
   609     0076                     ??_Lcd_Clear:	
   610                           ; 1 bytes @ 0x6
   611                           
   612     0076                     ?_Lcd_Set_Cursor:	
   613                           ; 1 bytes @ 0x6
   614                           
   615     0076                     ??___wmul:	
   616                           ; 1 bytes @ 0x6
   617                           
   618     0076                     ??___lwdiv:	
   619                           ; 1 bytes @ 0x6
   620                           
   621     0076                     Lcd_Set_Cursor@b:	
   622                           ; 1 bytes @ 0x6
   623                           
   624     0076                     ___wmul@product:	
   625                           ; 1 bytes @ 0x6
   626                           
   627                           
   628                           ; 2 bytes @ 0x6
   629     0076                     	ds	1
   630     0077                     ??_Lcd_Set_Cursor:
   631     0077                     ??_Lcd_Write_String:	
   632                           ; 1 bytes @ 0x7
   633                           
   634     0077                     Lcd_Set_Cursor@a:	
   635                           ; 1 bytes @ 0x7
   636                           
   637     0077                     ___lwdiv@quotient:	
   638                           ; 1 bytes @ 0x7
   639                           
   640                           
   641                           ; 2 bytes @ 0x7
   642     0077                     	ds	1
   643     0078                     Lcd_Set_Cursor@temp:
   644                           
   645                           ; 1 bytes @ 0x8
   646     0078                     	ds	1
   647     0079                     ___lwdiv@counter:
   648                           
   649                           ; 1 bytes @ 0x9
   650     0079                     	ds	1
   651     007A                     ??___lwmod:
   652     007A                     Lcd_Write_String@i:	
   653                           ; 1 bytes @ 0xA
   654                           
   655                           
   656                           ; 2 bytes @ 0xA
   657     007A                     	ds	1
   658     007B                     ___lwmod@counter:
   659                           
   660                           ; 1 bytes @ 0xB
   661     007B                     	ds	1
   662                           
   663                           	psect	cstackBANK0
   664     0020                     __pcstackBANK0:
   665     0020                     ?___lwmod:
   666     0020                     ___lwmod@divisor:	
   667                           ; 2 bytes @ 0x0
   668                           
   669                           
   670                           ; 2 bytes @ 0x0
   671     0020                     	ds	2
   672     0022                     ___lwmod@dividend:
   673                           
   674                           ; 2 bytes @ 0x2
   675     0022                     	ds	2
   676     0024                     ?_sprintf:
   677     0024                     sprintf@f:	
   678                           ; 2 bytes @ 0x4
   679                           
   680                           
   681                           ; 1 bytes @ 0x4
   682     0024                     	ds	3
   683     0027                     ??_sprintf:
   684                           
   685                           ; 1 bytes @ 0x7
   686     0027                     	ds	3
   687     002A                     sprintf@ap:
   688                           
   689                           ; 1 bytes @ 0xA
   690     002A                     	ds	1
   691     002B                     sprintf@prec:
   692                           
   693                           ; 1 bytes @ 0xB
   694     002B                     	ds	1
   695     002C                     sprintf@val:
   696                           
   697                           ; 2 bytes @ 0xC
   698     002C                     	ds	2
   699     002E                     sprintf@flag:
   700                           
   701                           ; 1 bytes @ 0xE
   702     002E                     	ds	1
   703     002F                     sprintf@width:
   704                           
   705                           ; 2 bytes @ 0xF
   706     002F                     	ds	2
   707     0031                     sprintf@sp:
   708                           
   709                           ; 1 bytes @ 0x11
   710     0031                     	ds	1
   711     0032                     sprintf@c:
   712                           
   713                           ; 1 bytes @ 0x12
   714     0032                     	ds	1
   715     0033                     ??_main:
   716                           
   717                           ; 1 bytes @ 0x13
   718     0033                     	ds	2
   719                           
   720                           	psect	maintext
   721     01D8                     __pmaintext:	
   722 ;;
   723 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   724 ;;
   725 ;; *************** function _main *****************
   726 ;; Defined at:
   727 ;;		line 46 in file "main.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;		None
   730 ;; Auto vars:     Size  Location     Type
   731 ;;		None
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      void 
   734 ;; Registers used:
   735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : B00/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   741 ;;      Params:         0       0       0       0       0
   742 ;;      Locals:         0       0       0       0       0
   743 ;;      Temps:          0       2       0       0       0
   744 ;;      Totals:         0       2       0       0       0
   745 ;;Total ram usage:        2 bytes
   746 ;; Hardware stack levels required when called: 4
   747 ;; This function calls:
   748 ;;		_Lcd_Clear
   749 ;;		_Lcd_Init
   750 ;;		_Lcd_Set_Cursor
   751 ;;		_Lcd_Write_String
   752 ;;		_setup
   753 ;;		_spiRead
   754 ;;		_spiWrite
   755 ;;		_sprintf
   756 ;; This function is called by:
   757 ;;		Startup code after reset
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761     01D8                     _main:	
   762                           ;psect for function _main
   763                           
   764     01D8                     l1473:	
   765                           ;incstack = 0
   766                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   767                           
   768                           
   769                           ;main.c: 47:     setup();
   770     01D8  120A  118A  23EA  120A  118A  	fcall	_setup
   771                           
   772                           ;main.c: 50:     Lcd_Init();
   773     01DD  120A  118A  2251  120A  118A  	fcall	_Lcd_Init
   774                           
   775                           ;main.c: 51:     Lcd_Clear();
   776     01E2  120A  118A  2484  120A  118A  	fcall	_Lcd_Clear
   777                           
   778                           ;main.c: 52:     Lcd_Set_Cursor(1,1);
   779     01E7  01F6               	clrf	Lcd_Set_Cursor@b
   780     01E8  0AF6               	incf	Lcd_Set_Cursor@b,f
   781     01E9  3001               	movlw	1
   782     01EA  120A  118A  240D  120A  118A  	fcall	_Lcd_Set_Cursor
   783     01EF                     l1475:
   784                           
   785                           ;main.c: 53:     Lcd_Write_String("S1:");
   786     01EF  3010               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   787     01F0  00F5               	movwf	Lcd_Write_String@a
   788     01F1  3080               	movlw	128
   789     01F2  00F6               	movwf	Lcd_Write_String@a+1
   790     01F3  120A  118A  22E6  120A  118A  	fcall	_Lcd_Write_String
   791     01F8                     l1477:
   792                           
   793                           ;main.c: 56:        PORTCbits.RC2 = 0;
   794     01F8  1283               	bcf	3,5	;RP0=0, select bank0
   795     01F9  1303               	bcf	3,6	;RP1=0, select bank0
   796     01FA  1107               	bcf	7,2	;volatile
   797     01FB                     l1479:
   798                           
   799                           ;main.c: 57:        _delay((unsigned long)((1)*(4000000/4000.0)));
   800     01FB  30C7               	movlw	199
   801     01FC  1283               	bcf	3,5	;RP0=0, select bank0
   802     01FD  1303               	bcf	3,6	;RP1=0, select bank0
   803     01FE  00B3               	movwf	??_main
   804     01FF                     u1057:
   805     01FF  2A00               	nop2
   806     0200  0BB3               	decfsz	??_main,f
   807     0201  29FF               	goto	u1057
   808     0202  2A03               	nop2
   809     0203                     l1481:
   810                           
   811                           ;main.c: 59:        spiWrite(PORTB);
   812     0203  1283               	bcf	3,5	;RP0=0, select bank0
   813     0204  1303               	bcf	3,6	;RP1=0, select bank0
   814     0205  0806               	movf	6,w	;volatile
   815     0206  120A  118A  24A8  120A  118A  	fcall	_spiWrite
   816     020B                     l1483:
   817                           
   818                           ;main.c: 60:        LCD_var1 = spiRead();
   819     020B  120A  118A  2491  120A  118A  	fcall	_spiRead
   820     0210  1283               	bcf	3,5	;RP0=0, select bank0
   821     0211  1303               	bcf	3,6	;RP1=0, select bank0
   822     0212  00B3               	movwf	??_main
   823     0213  01B4               	clrf	??_main+1
   824     0214  0833               	movf	??_main,w
   825     0215  00B5               	movwf	_LCD_var1
   826     0216  0834               	movf	??_main+1,w
   827     0217  00B6               	movwf	_LCD_var1+1
   828     0218                     l1485:
   829                           
   830                           ;main.c: 62:        Lcd_Set_Cursor(2,1);
   831     0218  01F6               	clrf	Lcd_Set_Cursor@b
   832     0219  0AF6               	incf	Lcd_Set_Cursor@b,f
   833     021A  3002               	movlw	2
   834     021B  120A  118A  240D  120A  118A  	fcall	_Lcd_Set_Cursor
   835     0220                     l1487:
   836                           
   837                           ;main.c: 63:        sprintf(LCD_ADC_S1, "%03d", LCD_var1);
   838     0220  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   839     0221  1283               	bcf	3,5	;RP0=0, select bank0
   840     0222  1303               	bcf	3,6	;RP1=0, select bank0
   841     0223  00A4               	movwf	sprintf@f
   842     0224  0836               	movf	_LCD_var1+1,w
   843     0225  00A6               	movwf	?_sprintf+2
   844     0226  0835               	movf	_LCD_var1,w
   845     0227  00A5               	movwf	?_sprintf+1
   846     0228  3037               	movlw	(low (_LCD_ADC_S1| 0))& (0+255)
   847     0229  120A  118A  2018  120A  118A  	fcall	_sprintf
   848     022E                     l1489:
   849                           
   850                           ;main.c: 64:        Lcd_Write_String(LCD_ADC_S1);
   851     022E  3037               	movlw	(low (_LCD_ADC_S1| 0))& (0+255)
   852     022F  00F5               	movwf	Lcd_Write_String@a
   853     0230  3000               	movlw	0
   854     0231  00F6               	movwf	Lcd_Write_String@a+1
   855     0232  120A  118A  22E6  120A  118A  	fcall	_Lcd_Write_String
   856     0237                     l1491:
   857                           
   858                           ;main.c: 66:        _delay((unsigned long)((1)*(4000000/4000.0)));
   859     0237  30C7               	movlw	199
   860     0238  1283               	bcf	3,5	;RP0=0, select bank0
   861     0239  1303               	bcf	3,6	;RP1=0, select bank0
   862     023A  00B3               	movwf	??_main
   863     023B                     u1067:
   864     023B  2A3C               	nop2
   865     023C  0BB3               	decfsz	??_main,f
   866     023D  2A3B               	goto	u1067
   867     023E  2A3F               	nop2
   868     023F                     l1493:
   869                           
   870                           ;main.c: 67:        PORTCbits.RC2 = 1;
   871     023F  1283               	bcf	3,5	;RP0=0, select bank0
   872     0240  1303               	bcf	3,6	;RP1=0, select bank0
   873     0241  1507               	bsf	7,2	;volatile
   874     0242                     l1495:
   875                           
   876                           ;main.c: 69:        _delay((unsigned long)((5)*(4000000/4000.0)));
   877     0242  3007               	movlw	7
   878     0243  1283               	bcf	3,5	;RP0=0, select bank0
   879     0244  1303               	bcf	3,6	;RP1=0, select bank0
   880     0245  00B4               	movwf	??_main+1
   881     0246  307C               	movlw	124
   882     0247  00B3               	movwf	??_main
   883     0248                     u1077:
   884     0248  0BB3               	decfsz	??_main,f
   885     0249  2A48               	goto	u1077
   886     024A  0BB4               	decfsz	??_main+1,f
   887     024B  2A48               	goto	u1077
   888     024C  0000               	nop
   889     024D  29F8               	goto	l1477
   890     024E  120A  118A  280C   	ljmp	start
   891     0251                     __end_of_main:
   892                           
   893                           	psect	text1
   894     0018                     __ptext1:	
   895 ;; *************** function _sprintf *****************
   896 ;; Defined at:
   897 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  sp              1    wreg     PTR unsigned char 
   900 ;;		 -> LCD_ADC_S1(1), 
   901 ;;  f               1    4[BANK0 ] PTR const unsigned char 
   902 ;;		 -> STR_2(5), 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  sp              1   17[BANK0 ] PTR unsigned char 
   905 ;;		 -> LCD_ADC_S1(1), 
   906 ;;  tmpval          4    0        struct .
   907 ;;  width           2   15[BANK0 ] int 
   908 ;;  val             2   12[BANK0 ] unsigned int 
   909 ;;  cp              2    0        PTR const unsigned char 
   910 ;;  len             2    0        unsigned int 
   911 ;;  c               1   18[BANK0 ] unsigned char 
   912 ;;  flag            1   14[BANK0 ] unsigned char 
   913 ;;  prec            1   11[BANK0 ] char 
   914 ;;  ap              1   10[BANK0 ] PTR void [1]
   915 ;;		 -> ?_sprintf(2), 
   916 ;; Return value:  Size  Location     Type
   917 ;;                  2    4[BANK0 ] int 
   918 ;; Registers used:
   919 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   925 ;;      Params:         0       3       0       0       0
   926 ;;      Locals:         0       9       0       0       0
   927 ;;      Temps:          0       3       0       0       0
   928 ;;      Totals:         0      15       0       0       0
   929 ;;Total ram usage:       15 bytes
   930 ;; Hardware stack levels used: 1
   931 ;; Hardware stack levels required when called: 2
   932 ;; This function calls:
   933 ;;		___lwdiv
   934 ;;		___lwmod
   935 ;;		___wmul
   936 ;;		_isdigit
   937 ;; This function is called by:
   938 ;;		_main
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942     0018                     _sprintf:	
   943                           ;psect for function _sprintf
   944                           
   945                           
   946                           ;incstack = 0
   947                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   948                           ;sprintf@sp stored from wreg
   949     0018  1283               	bcf	3,5	;RP0=0, select bank0
   950     0019  1303               	bcf	3,6	;RP1=0, select bank0
   951     001A  00B1               	movwf	sprintf@sp
   952     001B                     l1355:
   953                           
   954                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
   955     001B  3025               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   956     001C  00AA               	movwf	sprintf@ap
   957                           
   958                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   959     001D  29C3               	goto	l1459
   960     001E                     l1357:
   961                           
   962                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   963     001E  3025               	movlw	37
   964     001F  0632               	xorwf	sprintf@c,w
   965     0020  1903               	btfsc	3,2
   966     0021  2823               	goto	u871
   967     0022  2824               	goto	u870
   968     0023                     u871:
   969     0023  282E               	goto	l1363
   970     0024                     u870:
   971     0024                     l1359:
   972                           
   973                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   974     0024  0831               	movf	sprintf@sp,w
   975     0025  0084               	movwf	4
   976     0026  0832               	movf	sprintf@c,w
   977     0027  1383               	bcf	3,7	;select IRP bank0
   978     0028  0080               	movwf	0
   979     0029                     l1361:
   980     0029  3001               	movlw	1
   981     002A  00A7               	movwf	??_sprintf
   982     002B  0827               	movf	??_sprintf,w
   983     002C  07B1               	addwf	sprintf@sp,f
   984                           
   985                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
   986     002D  29C3               	goto	l1459
   987     002E                     l1363:
   988                           
   989                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 563:   width = 0;
   990     002E  01AF               	clrf	sprintf@width
   991     002F  01B0               	clrf	sprintf@width+1
   992                           
   993                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   994     0030  01AE               	clrf	sprintf@flag
   995     0031  2837               	goto	l1369
   996     0032                     l253:	
   997                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 596:    case '0':
   998                           
   999                           
  1000                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  1001     0032  152E               	bsf	sprintf@flag,2
  1002     0033                     l1365:
  1003                           
  1004                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 598:     f++;
  1005     0033  3001               	movlw	1
  1006     0034  00A7               	movwf	??_sprintf
  1007     0035  0827               	movf	??_sprintf,w
  1008     0036  07A4               	addwf	sprintf@f,f
  1009     0037                     l1369:	
  1010                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  1011                           
  1012     0037  0824               	movf	sprintf@f,w
  1013     0038  0084               	movwf	4
  1014     0039  120A  118A  23D1  120A  118A  	fcall	stringdir
  1015     003E  00A7               	movwf	??_sprintf
  1016     003F  01A8               	clrf	??_sprintf+1
  1017                           
  1018                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1019                           ; Switch size 1, requested type "simple"
  1020                           ; Number of cases is 1, Range of values is 0 to 0
  1021                           ; switch strategies available:
  1022                           ; Name         Instructions Cycles
  1023                           ; simple_byte            4     3 (average)
  1024                           ; direct_byte           11     8 (fixed)
  1025                           ; jumptable            260     6 (fixed)
  1026                           ;	Chosen strategy is simple_byte
  1027     0040  0828               	movf	??_sprintf+1,w
  1028     0041  3A00               	xorlw	0	; case 0
  1029     0042  1903               	skipnz
  1030     0043  2845               	goto	l1541
  1031     0044  284A               	goto	l1371
  1032     0045                     l1541:
  1033                           
  1034                           ; Switch size 1, requested type "simple"
  1035                           ; Number of cases is 1, Range of values is 48 to 48
  1036                           ; switch strategies available:
  1037                           ; Name         Instructions Cycles
  1038                           ; simple_byte            4     3 (average)
  1039                           ; direct_byte           14    11 (fixed)
  1040                           ; jumptable            263     9 (fixed)
  1041                           ;	Chosen strategy is simple_byte
  1042     0045  0827               	movf	??_sprintf,w
  1043     0046  3A30               	xorlw	48	; case 48
  1044     0047  1903               	skipnz
  1045     0048  2832               	goto	l253
  1046     0049  284A               	goto	l1371
  1047     004A                     l1371:
  1048                           
  1049                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1050     004A  0824               	movf	sprintf@f,w
  1051     004B  0084               	movwf	4
  1052     004C  120A  118A  23D1  120A  118A  	fcall	stringdir
  1053     0051  120A  118A  2472  120A  118A  	fcall	_isdigit
  1054     0056  1C03               	btfss	3,0
  1055     0057  2859               	goto	u881
  1056     0058  285A               	goto	u880
  1057     0059                     u881:
  1058     0059  289A               	goto	l1385
  1059     005A                     u880:
  1060     005A                     l1373:
  1061                           
  1062                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1063     005A  1283               	bcf	3,5	;RP0=0, select bank0
  1064     005B  1303               	bcf	3,6	;RP1=0, select bank0
  1065     005C  01AF               	clrf	sprintf@width
  1066     005D  01B0               	clrf	sprintf@width+1
  1067     005E                     l1375:
  1068                           
  1069                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1070     005E  300A               	movlw	10
  1071     005F  00F2               	movwf	___wmul@multiplier
  1072     0060  3000               	movlw	0
  1073     0061  00F3               	movwf	___wmul@multiplier+1
  1074     0062  1283               	bcf	3,5	;RP0=0, select bank0
  1075     0063  1303               	bcf	3,6	;RP1=0, select bank0
  1076     0064  0830               	movf	sprintf@width+1,w
  1077     0065  00F5               	movwf	___wmul@multiplicand+1
  1078     0066  082F               	movf	sprintf@width,w
  1079     0067  00F4               	movwf	___wmul@multiplicand
  1080     0068  120A  118A  23A2  120A  118A  	fcall	___wmul
  1081     006D  0873               	movf	?___wmul+1,w
  1082     006E  1283               	bcf	3,5	;RP0=0, select bank0
  1083     006F  1303               	bcf	3,6	;RP1=0, select bank0
  1084     0070  00B0               	movwf	sprintf@width+1
  1085     0071  0872               	movf	?___wmul,w
  1086     0072  00AF               	movwf	sprintf@width
  1087     0073                     l1377:
  1088                           
  1089                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1090     0073  0824               	movf	sprintf@f,w
  1091     0074  0084               	movwf	4
  1092     0075  120A  118A  23D1  120A  118A  	fcall	stringdir
  1093     007A  3ED0               	addlw	208
  1094     007B  00A7               	movwf	??_sprintf
  1095     007C  30FF               	movlw	255
  1096     007D  1803               	skipnc
  1097     007E  3000               	movlw	0
  1098     007F  00A8               	movwf	??_sprintf+1
  1099     0080  0827               	movf	??_sprintf,w
  1100     0081  07AF               	addwf	sprintf@width,f
  1101     0082  1803               	skipnc
  1102     0083  0AB0               	incf	sprintf@width+1,f
  1103     0084  0828               	movf	??_sprintf+1,w
  1104     0085  07B0               	addwf	sprintf@width+1,f
  1105     0086                     l1379:
  1106     0086  3001               	movlw	1
  1107     0087  00A7               	movwf	??_sprintf
  1108     0088  0827               	movf	??_sprintf,w
  1109     0089  07A4               	addwf	sprintf@f,f
  1110     008A                     l1381:
  1111                           
  1112                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1113     008A  0824               	movf	sprintf@f,w
  1114     008B  0084               	movwf	4
  1115     008C  120A  118A  23D1  120A  118A  	fcall	stringdir
  1116     0091  120A  118A  2472  120A  118A  	fcall	_isdigit
  1117     0096  1803               	btfsc	3,0
  1118     0097  2899               	goto	u891
  1119     0098  289A               	goto	u890
  1120     0099                     u891:
  1121     0099  285E               	goto	l1375
  1122     009A                     u890:
  1123     009A                     l1385:
  1124     009A  3001               	movlw	1
  1125     009B  1283               	bcf	3,5	;RP0=0, select bank0
  1126     009C  1303               	bcf	3,6	;RP1=0, select bank0
  1127     009D  07A4               	addwf	sprintf@f,f
  1128     009E  30FF               	movlw	-1
  1129     009F  0724               	addwf	sprintf@f,w
  1130     00A0  0084               	movwf	4
  1131     00A1  120A  118A  23D1  120A  118A  	fcall	stringdir
  1132     00A6  00B2               	movwf	sprintf@c
  1133     00A7  00A7               	movwf	??_sprintf
  1134     00A8  01A8               	clrf	??_sprintf+1
  1135                           
  1136                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1137                           ; Switch size 1, requested type "simple"
  1138                           ; Number of cases is 1, Range of values is 0 to 0
  1139                           ; switch strategies available:
  1140                           ; Name         Instructions Cycles
  1141                           ; simple_byte            4     3 (average)
  1142                           ; direct_byte           11     8 (fixed)
  1143                           ; jumptable            260     6 (fixed)
  1144                           ;	Chosen strategy is simple_byte
  1145     00A9  0828               	movf	??_sprintf+1,w
  1146     00AA  3A00               	xorlw	0	; case 0
  1147     00AB  1903               	skipnz
  1148     00AC  28AE               	goto	l1543
  1149     00AD  29C3               	goto	l1459
  1150     00AE                     l1543:
  1151                           
  1152                           ; Switch size 1, requested type "simple"
  1153                           ; Number of cases is 3, Range of values is 0 to 105
  1154                           ; switch strategies available:
  1155                           ; Name         Instructions Cycles
  1156                           ; simple_byte           10     6 (average)
  1157                           ; jumptable            260     6 (fixed)
  1158                           ;	Chosen strategy is simple_byte
  1159     00AE  0827               	movf	??_sprintf,w
  1160     00AF  3A00               	xorlw	0	; case 0
  1161     00B0  1903               	skipnz
  1162     00B1  29D3               	goto	l1461
  1163     00B2  3A64               	xorlw	100	; case 100
  1164     00B3  1903               	skipnz
  1165     00B4  28B9               	goto	l1387
  1166     00B5  3A0D               	xorlw	13	; case 105
  1167     00B6  1903               	skipnz
  1168     00B7  28B9               	goto	l1387
  1169     00B8  29C3               	goto	l1459
  1170     00B9                     l1387:
  1171                           
  1172                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1173     00B9  082A               	movf	sprintf@ap,w
  1174     00BA  0084               	movwf	4
  1175     00BB  1383               	bcf	3,7	;select IRP bank0
  1176     00BC  0800               	movf	0,w
  1177     00BD  00AC               	movwf	sprintf@val
  1178     00BE  0A84               	incf	4,f
  1179     00BF  0800               	movf	0,w
  1180     00C0  00AD               	movwf	sprintf@val+1
  1181     00C1                     l1389:
  1182     00C1  3002               	movlw	2
  1183     00C2  00A7               	movwf	??_sprintf
  1184     00C3  0827               	movf	??_sprintf,w
  1185     00C4  07AA               	addwf	sprintf@ap,f
  1186     00C5                     l1391:
  1187                           
  1188                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1189     00C5  1FAD               	btfss	sprintf@val+1,7
  1190     00C6  28C8               	goto	u901
  1191     00C7  28C9               	goto	u900
  1192     00C8                     u901:
  1193     00C8  28D2               	goto	l1397
  1194     00C9                     u900:
  1195     00C9                     l1393:
  1196                           
  1197                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1198     00C9  3003               	movlw	3
  1199     00CA  00A7               	movwf	??_sprintf
  1200     00CB  0827               	movf	??_sprintf,w
  1201     00CC  04AE               	iorwf	sprintf@flag,f
  1202     00CD                     l1395:
  1203                           
  1204                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1205     00CD  09AC               	comf	sprintf@val,f
  1206     00CE  09AD               	comf	sprintf@val+1,f
  1207     00CF  0AAC               	incf	sprintf@val,f
  1208     00D0  1903               	skipnz
  1209     00D1  0AAD               	incf	sprintf@val+1,f
  1210     00D2                     l1397:
  1211                           
  1212                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1213     00D2  01B2               	clrf	sprintf@c
  1214     00D3  0AB2               	incf	sprintf@c,f
  1215     00D4                     l1403:
  1216                           
  1217                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1218     00D4  0832               	movf	sprintf@c,w
  1219     00D5  00A7               	movwf	??_sprintf
  1220     00D6  0727               	addwf	??_sprintf,w
  1221     00D7  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1222     00D8  0084               	movwf	4
  1223     00D9  120A  118A  23D1  120A  118A  	fcall	stringdir
  1224     00DE  00A8               	movwf	??_sprintf+1
  1225     00DF  120A  118A  23D1  120A  118A  	fcall	stringdir
  1226     00E4  00A9               	movwf	??_sprintf+2
  1227     00E5  0829               	movf	??_sprintf+2,w
  1228     00E6  022D               	subwf	sprintf@val+1,w
  1229     00E7  1D03               	skipz
  1230     00E8  28EB               	goto	u915
  1231     00E9  0828               	movf	??_sprintf+1,w
  1232     00EA  022C               	subwf	sprintf@val,w
  1233     00EB                     u915:
  1234     00EB  1803               	skipnc
  1235     00EC  28EE               	goto	u911
  1236     00ED  28EF               	goto	u910
  1237     00EE                     u911:
  1238     00EE  28F0               	goto	l1407
  1239     00EF                     u910:
  1240     00EF  28FA               	goto	l1409
  1241     00F0                     l1407:
  1242     00F0  3001               	movlw	1
  1243     00F1  00A7               	movwf	??_sprintf
  1244     00F2  0827               	movf	??_sprintf,w
  1245     00F3  07B2               	addwf	sprintf@c,f
  1246     00F4  3005               	movlw	5
  1247     00F5  0632               	xorwf	sprintf@c,w
  1248     00F6  1D03               	btfss	3,2
  1249     00F7  28F9               	goto	u921
  1250     00F8  28FA               	goto	u920
  1251     00F9                     u921:
  1252     00F9  28D4               	goto	l1403
  1253     00FA                     u920:
  1254     00FA                     l1409:
  1255                           
  1256                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1257     00FA  082F               	movf	sprintf@width,w
  1258     00FB  0430               	iorwf	sprintf@width+1,w
  1259     00FC  1903               	btfsc	3,2
  1260     00FD  28FF               	goto	u931
  1261     00FE  2900               	goto	u930
  1262     00FF                     u931:
  1263     00FF  290C               	goto	l271
  1264     0100                     u930:
  1265     0100                     l1411:
  1266     0100  082E               	movf	sprintf@flag,w
  1267     0101  3903               	andlw	3
  1268     0102  1903               	btfsc	3,2
  1269     0103  2905               	goto	u941
  1270     0104  2906               	goto	u940
  1271     0105                     u941:
  1272     0105  290C               	goto	l271
  1273     0106                     u940:
  1274     0106                     l1413:
  1275                           
  1276                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1277     0106  30FF               	movlw	255
  1278     0107  07AF               	addwf	sprintf@width,f
  1279     0108  1803               	skipnc
  1280     0109  0AB0               	incf	sprintf@width+1,f
  1281     010A  30FF               	movlw	255
  1282     010B  07B0               	addwf	sprintf@width+1,f
  1283     010C                     l271:
  1284                           
  1285                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1286     010C  0830               	movf	sprintf@width+1,w
  1287     010D  3A80               	xorlw	128
  1288     010E  3C80               	sublw	128
  1289     010F  1D03               	skipz
  1290     0110  2913               	goto	u955
  1291     0111  082F               	movf	sprintf@width,w
  1292     0112  0232               	subwf	sprintf@c,w
  1293     0113                     u955:
  1294     0113  1803               	skipnc
  1295     0114  2916               	goto	u951
  1296     0115  2917               	goto	u950
  1297     0116                     u951:
  1298     0116  2923               	goto	l1417
  1299     0117                     u950:
  1300     0117                     l1415:
  1301                           
  1302                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1303     0117  1283               	bcf	3,5	;RP0=0, select bank0
  1304     0118  1303               	bcf	3,6	;RP1=0, select bank0
  1305     0119  0832               	movf	sprintf@c,w
  1306     011A  00A7               	movwf	??_sprintf
  1307     011B  01A8               	clrf	??_sprintf+1
  1308     011C  0827               	movf	??_sprintf,w
  1309     011D  02AF               	subwf	sprintf@width,f
  1310     011E  0828               	movf	??_sprintf+1,w
  1311     011F  1C03               	skipc
  1312     0120  03B0               	decf	sprintf@width+1,f
  1313     0121  02B0               	subwf	sprintf@width+1,f
  1314     0122  2927               	goto	l1419
  1315     0123                     l1417:
  1316                           
  1317                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1318     0123  1283               	bcf	3,5	;RP0=0, select bank0
  1319     0124  1303               	bcf	3,6	;RP1=0, select bank0
  1320     0125  01AF               	clrf	sprintf@width
  1321     0126  01B0               	clrf	sprintf@width+1
  1322     0127                     l1419:
  1323                           
  1324                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1325     0127  1D2E               	btfss	sprintf@flag,2
  1326     0128  292A               	goto	u961
  1327     0129  292B               	goto	u960
  1328     012A                     u961:
  1329     012A  2956               	goto	l1435
  1330     012B                     u960:
  1331     012B                     l1421:
  1332                           
  1333                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1334     012B  082E               	movf	sprintf@flag,w
  1335     012C  3903               	andlw	3
  1336     012D  1903               	btfsc	3,2
  1337     012E  2930               	goto	u971
  1338     012F  2931               	goto	u970
  1339     0130                     u971:
  1340     0130  293A               	goto	l1427
  1341     0131                     u970:
  1342     0131                     l1423:
  1343                           
  1344                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1345     0131  0831               	movf	sprintf@sp,w
  1346     0132  0084               	movwf	4
  1347     0133  302D               	movlw	45
  1348     0134  1383               	bcf	3,7	;select IRP bank0
  1349     0135  0080               	movwf	0
  1350     0136                     l1425:
  1351     0136  3001               	movlw	1
  1352     0137  00A7               	movwf	??_sprintf
  1353     0138  0827               	movf	??_sprintf,w
  1354     0139  07B1               	addwf	sprintf@sp,f
  1355     013A                     l1427:
  1356                           
  1357                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1358     013A  082F               	movf	sprintf@width,w
  1359     013B  0430               	iorwf	sprintf@width+1,w
  1360     013C  1903               	btfsc	3,2
  1361     013D  293F               	goto	u981
  1362     013E  2940               	goto	u980
  1363     013F                     u981:
  1364     013F  2980               	goto	l1449
  1365     0140                     u980:
  1366     0140                     l1429:
  1367                           
  1368                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1369     0140  0831               	movf	sprintf@sp,w
  1370     0141  0084               	movwf	4
  1371     0142  3030               	movlw	48
  1372     0143  1383               	bcf	3,7	;select IRP bank0
  1373     0144  0080               	movwf	0
  1374     0145                     l1431:
  1375     0145  3001               	movlw	1
  1376     0146  00A7               	movwf	??_sprintf
  1377     0147  0827               	movf	??_sprintf,w
  1378     0148  07B1               	addwf	sprintf@sp,f
  1379     0149                     l1433:
  1380     0149  30FF               	movlw	255
  1381     014A  07AF               	addwf	sprintf@width,f
  1382     014B  1803               	skipnc
  1383     014C  0AB0               	incf	sprintf@width+1,f
  1384     014D  30FF               	movlw	255
  1385     014E  07B0               	addwf	sprintf@width+1,f
  1386     014F  082F               	movf	sprintf@width,w
  1387     0150  0430               	iorwf	sprintf@width+1,w
  1388     0151  1D03               	btfss	3,2
  1389     0152  2954               	goto	u991
  1390     0153  2955               	goto	u990
  1391     0154                     u991:
  1392     0154  2940               	goto	l1429
  1393     0155                     u990:
  1394     0155  2980               	goto	l1449
  1395     0156                     l1435:
  1396                           
  1397                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1398     0156  082F               	movf	sprintf@width,w
  1399     0157  0430               	iorwf	sprintf@width+1,w
  1400     0158  1903               	btfsc	3,2
  1401     0159  295B               	goto	u1001
  1402     015A  295C               	goto	u1000
  1403     015B                     u1001:
  1404     015B  2971               	goto	l1443
  1405     015C                     u1000:
  1406     015C                     l1437:
  1407                           
  1408                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1409     015C  0831               	movf	sprintf@sp,w
  1410     015D  0084               	movwf	4
  1411     015E  3020               	movlw	32
  1412     015F  1383               	bcf	3,7	;select IRP bank0
  1413     0160  0080               	movwf	0
  1414     0161                     l1439:
  1415     0161  3001               	movlw	1
  1416     0162  00A7               	movwf	??_sprintf
  1417     0163  0827               	movf	??_sprintf,w
  1418     0164  07B1               	addwf	sprintf@sp,f
  1419     0165                     l1441:
  1420     0165  30FF               	movlw	255
  1421     0166  07AF               	addwf	sprintf@width,f
  1422     0167  1803               	skipnc
  1423     0168  0AB0               	incf	sprintf@width+1,f
  1424     0169  30FF               	movlw	255
  1425     016A  07B0               	addwf	sprintf@width+1,f
  1426     016B  082F               	movf	sprintf@width,w
  1427     016C  0430               	iorwf	sprintf@width+1,w
  1428     016D  1D03               	btfss	3,2
  1429     016E  2970               	goto	u1011
  1430     016F  2971               	goto	u1010
  1431     0170                     u1011:
  1432     0170  295C               	goto	l1437
  1433     0171                     u1010:
  1434     0171                     l1443:
  1435                           
  1436                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1437     0171  082E               	movf	sprintf@flag,w
  1438     0172  3903               	andlw	3
  1439     0173  1903               	btfsc	3,2
  1440     0174  2976               	goto	u1021
  1441     0175  2977               	goto	u1020
  1442     0176                     u1021:
  1443     0176  2980               	goto	l1449
  1444     0177                     u1020:
  1445     0177                     l1445:
  1446                           
  1447                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1448     0177  0831               	movf	sprintf@sp,w
  1449     0178  0084               	movwf	4
  1450     0179  302D               	movlw	45
  1451     017A  1383               	bcf	3,7	;select IRP bank0
  1452     017B  0080               	movwf	0
  1453     017C                     l1447:
  1454     017C  3001               	movlw	1
  1455     017D  00A7               	movwf	??_sprintf
  1456     017E  0827               	movf	??_sprintf,w
  1457     017F  07B1               	addwf	sprintf@sp,f
  1458     0180                     l1449:
  1459                           
  1460                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1461     0180  0832               	movf	sprintf@c,w
  1462     0181  00AB               	movwf	sprintf@prec
  1463                           
  1464                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1465     0182  29BA               	goto	l1457
  1466     0183                     l1451:
  1467                           
  1468                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1469     0183  300A               	movlw	10
  1470     0184  00A0               	movwf	___lwmod@divisor
  1471     0185  3000               	movlw	0
  1472     0186  00A1               	movwf	___lwmod@divisor+1
  1473     0187  082B               	movf	sprintf@prec,w
  1474     0188  00A7               	movwf	??_sprintf
  1475     0189  0727               	addwf	??_sprintf,w
  1476     018A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1477     018B  0084               	movwf	4
  1478     018C  120A  118A  23D1  120A  118A  	fcall	stringdir
  1479     0191  00F2               	movwf	___lwdiv@divisor
  1480     0192  120A  118A  23D1  120A  118A  	fcall	stringdir
  1481     0197  00F3               	movwf	___lwdiv@divisor+1
  1482     0198  082D               	movf	sprintf@val+1,w
  1483     0199  00F5               	movwf	___lwdiv@dividend+1
  1484     019A  082C               	movf	sprintf@val,w
  1485     019B  00F4               	movwf	___lwdiv@dividend
  1486     019C  120A  118A  22A2  120A  118A  	fcall	___lwdiv
  1487     01A1  0873               	movf	?___lwdiv+1,w
  1488     01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1489     01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1490     01A4  00A3               	movwf	___lwmod@dividend+1
  1491     01A5  0872               	movf	?___lwdiv,w
  1492     01A6  00A2               	movwf	___lwmod@dividend
  1493     01A7  120A  118A  2366  120A  118A  	fcall	___lwmod
  1494     01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1495     01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1496     01AE  0820               	movf	?___lwmod,w
  1497     01AF  3E30               	addlw	48
  1498     01B0  00B2               	movwf	sprintf@c
  1499     01B1                     l1453:
  1500                           
  1501                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1502     01B1  0831               	movf	sprintf@sp,w
  1503     01B2  0084               	movwf	4
  1504     01B3  0832               	movf	sprintf@c,w
  1505     01B4  1383               	bcf	3,7	;select IRP bank0
  1506     01B5  0080               	movwf	0
  1507     01B6                     l1455:
  1508     01B6  3001               	movlw	1
  1509     01B7  00A7               	movwf	??_sprintf
  1510     01B8  0827               	movf	??_sprintf,w
  1511     01B9  07B1               	addwf	sprintf@sp,f
  1512     01BA                     l1457:
  1513                           
  1514                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1515     01BA  30FF               	movlw	255
  1516     01BB  00A7               	movwf	??_sprintf
  1517     01BC  0827               	movf	??_sprintf,w
  1518     01BD  07AB               	addwf	sprintf@prec,f
  1519     01BE  0A2B               	incf	sprintf@prec,w
  1520     01BF  1D03               	btfss	3,2
  1521     01C0  29C2               	goto	u1031
  1522     01C1  29C3               	goto	u1030
  1523     01C2                     u1031:
  1524     01C2  2983               	goto	l1451
  1525     01C3                     u1030:
  1526     01C3                     l1459:
  1527                           
  1528                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1529     01C3  3001               	movlw	1
  1530     01C4  07A4               	addwf	sprintf@f,f
  1531     01C5  30FF               	movlw	-1
  1532     01C6  0724               	addwf	sprintf@f,w
  1533     01C7  0084               	movwf	4
  1534     01C8  120A  118A  23D1  120A  118A  	fcall	stringdir
  1535     01CD  00B2               	movwf	sprintf@c
  1536     01CE  0832               	movf	sprintf@c,w
  1537     01CF  1D03               	btfss	3,2
  1538     01D0  29D2               	goto	u1041
  1539     01D1  29D3               	goto	u1040
  1540     01D2                     u1041:
  1541     01D2  281E               	goto	l1357
  1542     01D3                     u1040:
  1543     01D3                     l1461:
  1544                           
  1545                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1546     01D3  0831               	movf	sprintf@sp,w
  1547     01D4  0084               	movwf	4
  1548     01D5  1383               	bcf	3,7	;select IRP bank0
  1549     01D6  0180               	clrf	0
  1550     01D7                     l288:
  1551     01D7  0008               	return
  1552     01D8                     __end_of_sprintf:
  1553                           
  1554                           	psect	text2
  1555     0472                     __ptext2:	
  1556 ;; *************** function _isdigit *****************
  1557 ;; Defined at:
  1558 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\isdigit.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;  c               1    wreg     unsigned char 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  c               1    3[COMMON] unsigned char 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;		None               void
  1565 ;; Registers used:
  1566 ;;		wreg, status,2, status,0
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1572 ;;      Params:         0       0       0       0       0
  1573 ;;      Locals:         2       0       0       0       0
  1574 ;;      Temps:          0       0       0       0       0
  1575 ;;      Totals:         2       0       0       0       0
  1576 ;;Total ram usage:        2 bytes
  1577 ;; Hardware stack levels used: 1
  1578 ;; Hardware stack levels required when called: 1
  1579 ;; This function calls:
  1580 ;;		Nothing
  1581 ;; This function is called by:
  1582 ;;		_sprintf
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586     0472                     _isdigit:	
  1587                           ;psect for function _isdigit
  1588                           
  1589                           
  1590                           ;incstack = 0
  1591                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1592                           ;isdigit@c stored from wreg
  1593     0472  00F3               	movwf	isdigit@c
  1594     0473                     l1225:
  1595     0473  01F2               	clrf	_isdigit$879
  1596     0474                     l1227:
  1597     0474  303A               	movlw	58
  1598     0475  0273               	subwf	isdigit@c,w
  1599     0476  1803               	skipnc
  1600     0477  2C79               	goto	u631
  1601     0478  2C7A               	goto	u630
  1602     0479                     u631:
  1603     0479  2C82               	goto	l1233
  1604     047A                     u630:
  1605     047A                     l1229:
  1606     047A  3030               	movlw	48
  1607     047B  0273               	subwf	isdigit@c,w
  1608     047C  1C03               	skipc
  1609     047D  2C7F               	goto	u641
  1610     047E  2C80               	goto	u640
  1611     047F                     u641:
  1612     047F  2C82               	goto	l1233
  1613     0480                     u640:
  1614     0480                     l1231:
  1615     0480  01F2               	clrf	_isdigit$879
  1616     0481  0AF2               	incf	_isdigit$879,f
  1617     0482                     l1233:
  1618     0482  0C72               	rrf	_isdigit$879,w
  1619     0483                     l745:
  1620     0483  0008               	return
  1621     0484                     __end_of_isdigit:
  1622                           
  1623                           	psect	text3
  1624     03A2                     __ptext3:	
  1625 ;; *************** function ___wmul *****************
  1626 ;; Defined at:
  1627 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  multiplier      2    2[COMMON] unsigned int 
  1630 ;;  multiplicand    2    4[COMMON] unsigned int 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;  product         2    6[COMMON] unsigned int 
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  2    2[COMMON] unsigned int 
  1635 ;; Registers used:
  1636 ;;		wreg, status,2, status,0
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1642 ;;      Params:         4       0       0       0       0
  1643 ;;      Locals:         2       0       0       0       0
  1644 ;;      Temps:          0       0       0       0       0
  1645 ;;      Totals:         6       0       0       0       0
  1646 ;;Total ram usage:        6 bytes
  1647 ;; Hardware stack levels used: 1
  1648 ;; Hardware stack levels required when called: 1
  1649 ;; This function calls:
  1650 ;;		Nothing
  1651 ;; This function is called by:
  1652 ;;		_sprintf
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656     03A2                     ___wmul:	
  1657                           ;psect for function ___wmul
  1658                           
  1659     03A2                     l1237:	
  1660                           ;incstack = 0
  1661                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1662                           
  1663     03A2  01F6               	clrf	___wmul@product
  1664     03A3  01F7               	clrf	___wmul@product+1
  1665     03A4                     l1239:
  1666     03A4  1C72               	btfss	___wmul@multiplier,0
  1667     03A5  2BA7               	goto	u651
  1668     03A6  2BA8               	goto	u650
  1669     03A7                     u651:
  1670     03A7  2BAE               	goto	l292
  1671     03A8                     u650:
  1672     03A8                     l1241:
  1673     03A8  0874               	movf	___wmul@multiplicand,w
  1674     03A9  07F6               	addwf	___wmul@product,f
  1675     03AA  1803               	skipnc
  1676     03AB  0AF7               	incf	___wmul@product+1,f
  1677     03AC  0875               	movf	___wmul@multiplicand+1,w
  1678     03AD  07F7               	addwf	___wmul@product+1,f
  1679     03AE                     l292:
  1680     03AE  3001               	movlw	1
  1681     03AF                     u665:
  1682     03AF  1003               	clrc
  1683     03B0  0DF4               	rlf	___wmul@multiplicand,f
  1684     03B1  0DF5               	rlf	___wmul@multiplicand+1,f
  1685     03B2  3EFF               	addlw	-1
  1686     03B3  1D03               	skipz
  1687     03B4  2BAF               	goto	u665
  1688     03B5                     l1243:
  1689     03B5  3001               	movlw	1
  1690     03B6                     u675:
  1691     03B6  1003               	clrc
  1692     03B7  0CF3               	rrf	___wmul@multiplier+1,f
  1693     03B8  0CF2               	rrf	___wmul@multiplier,f
  1694     03B9  3EFF               	addlw	-1
  1695     03BA  1D03               	skipz
  1696     03BB  2BB6               	goto	u675
  1697     03BC                     l1245:
  1698     03BC  0872               	movf	___wmul@multiplier,w
  1699     03BD  0473               	iorwf	___wmul@multiplier+1,w
  1700     03BE  1D03               	btfss	3,2
  1701     03BF  2BC1               	goto	u681
  1702     03C0  2BC2               	goto	u680
  1703     03C1                     u681:
  1704     03C1  2BA4               	goto	l1239
  1705     03C2                     u680:
  1706     03C2                     l1247:
  1707     03C2  0877               	movf	___wmul@product+1,w
  1708     03C3  00F3               	movwf	?___wmul+1
  1709     03C4  0876               	movf	___wmul@product,w
  1710     03C5  00F2               	movwf	?___wmul
  1711     03C6                     l294:
  1712     03C6  0008               	return
  1713     03C7                     __end_of___wmul:
  1714                           
  1715                           	psect	text4
  1716     0366                     __ptext4:	
  1717 ;; *************** function ___lwmod *****************
  1718 ;; Defined at:
  1719 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  divisor         2    0[BANK0 ] unsigned int 
  1722 ;;  dividend        2    2[BANK0 ] unsigned int 
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;  counter         1   11[COMMON] unsigned char 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  2    0[BANK0 ] unsigned int 
  1727 ;; Registers used:
  1728 ;;		wreg, status,2, status,0
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1734 ;;      Params:         0       4       0       0       0
  1735 ;;      Locals:         1       0       0       0       0
  1736 ;;      Temps:          1       0       0       0       0
  1737 ;;      Totals:         2       4       0       0       0
  1738 ;;Total ram usage:        6 bytes
  1739 ;; Hardware stack levels used: 1
  1740 ;; Hardware stack levels required when called: 1
  1741 ;; This function calls:
  1742 ;;		Nothing
  1743 ;; This function is called by:
  1744 ;;		_sprintf
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748     0366                     ___lwmod:	
  1749                           ;psect for function ___lwmod
  1750                           
  1751     0366                     l1277:	
  1752                           ;incstack = 0
  1753                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1754                           
  1755     0366  1283               	bcf	3,5	;RP0=0, select bank0
  1756     0367  1303               	bcf	3,6	;RP1=0, select bank0
  1757     0368  0820               	movf	___lwmod@divisor,w
  1758     0369  0421               	iorwf	___lwmod@divisor+1,w
  1759     036A  1903               	btfsc	3,2
  1760     036B  2B6D               	goto	u761
  1761     036C  2B6E               	goto	u760
  1762     036D                     u761:
  1763     036D  2B9D               	goto	l1295
  1764     036E                     u760:
  1765     036E                     l1279:
  1766     036E  01FB               	clrf	___lwmod@counter
  1767     036F  0AFB               	incf	___lwmod@counter,f
  1768     0370  2B7C               	goto	l1285
  1769     0371                     l1281:
  1770     0371  3001               	movlw	1
  1771     0372                     u775:
  1772     0372  1003               	clrc
  1773     0373  0DA0               	rlf	___lwmod@divisor,f
  1774     0374  0DA1               	rlf	___lwmod@divisor+1,f
  1775     0375  3EFF               	addlw	-1
  1776     0376  1D03               	skipz
  1777     0377  2B72               	goto	u775
  1778     0378                     l1283:
  1779     0378  3001               	movlw	1
  1780     0379  00FA               	movwf	??___lwmod
  1781     037A  087A               	movf	??___lwmod,w
  1782     037B  07FB               	addwf	___lwmod@counter,f
  1783     037C                     l1285:
  1784     037C  1FA1               	btfss	___lwmod@divisor+1,7
  1785     037D  2B7F               	goto	u781
  1786     037E  2B80               	goto	u780
  1787     037F                     u781:
  1788     037F  2B71               	goto	l1281
  1789     0380                     u780:
  1790     0380                     l1287:
  1791     0380  0821               	movf	___lwmod@divisor+1,w
  1792     0381  0223               	subwf	___lwmod@dividend+1,w
  1793     0382  1D03               	skipz
  1794     0383  2B86               	goto	u795
  1795     0384  0820               	movf	___lwmod@divisor,w
  1796     0385  0222               	subwf	___lwmod@dividend,w
  1797     0386                     u795:
  1798     0386  1C03               	skipc
  1799     0387  2B89               	goto	u791
  1800     0388  2B8A               	goto	u790
  1801     0389                     u791:
  1802     0389  2B90               	goto	l1291
  1803     038A                     u790:
  1804     038A                     l1289:
  1805     038A  0820               	movf	___lwmod@divisor,w
  1806     038B  02A2               	subwf	___lwmod@dividend,f
  1807     038C  0821               	movf	___lwmod@divisor+1,w
  1808     038D  1C03               	skipc
  1809     038E  03A3               	decf	___lwmod@dividend+1,f
  1810     038F  02A3               	subwf	___lwmod@dividend+1,f
  1811     0390                     l1291:
  1812     0390  3001               	movlw	1
  1813     0391                     u805:
  1814     0391  1003               	clrc
  1815     0392  0CA1               	rrf	___lwmod@divisor+1,f
  1816     0393  0CA0               	rrf	___lwmod@divisor,f
  1817     0394  3EFF               	addlw	-1
  1818     0395  1D03               	skipz
  1819     0396  2B91               	goto	u805
  1820     0397                     l1293:
  1821     0397  3001               	movlw	1
  1822     0398  02FB               	subwf	___lwmod@counter,f
  1823     0399  1D03               	btfss	3,2
  1824     039A  2B9C               	goto	u811
  1825     039B  2B9D               	goto	u810
  1826     039C                     u811:
  1827     039C  2B80               	goto	l1287
  1828     039D                     u810:
  1829     039D                     l1295:
  1830     039D  0823               	movf	___lwmod@dividend+1,w
  1831     039E  00A1               	movwf	?___lwmod+1
  1832     039F  0822               	movf	___lwmod@dividend,w
  1833     03A0  00A0               	movwf	?___lwmod
  1834     03A1                     l574:
  1835     03A1  0008               	return
  1836     03A2                     __end_of___lwmod:
  1837                           
  1838                           	psect	text5
  1839     02A2                     __ptext5:	
  1840 ;; *************** function ___lwdiv *****************
  1841 ;; Defined at:
  1842 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;  divisor         2    2[COMMON] unsigned int 
  1845 ;;  dividend        2    4[COMMON] unsigned int 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  quotient        2    7[COMMON] unsigned int 
  1848 ;;  counter         1    9[COMMON] unsigned char 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  2    2[COMMON] unsigned int 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1858 ;;      Params:         4       0       0       0       0
  1859 ;;      Locals:         3       0       0       0       0
  1860 ;;      Temps:          1       0       0       0       0
  1861 ;;      Totals:         8       0       0       0       0
  1862 ;;Total ram usage:        8 bytes
  1863 ;; Hardware stack levels used: 1
  1864 ;; Hardware stack levels required when called: 1
  1865 ;; This function calls:
  1866 ;;		Nothing
  1867 ;; This function is called by:
  1868 ;;		_sprintf
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872     02A2                     ___lwdiv:	
  1873                           ;psect for function ___lwdiv
  1874                           
  1875     02A2                     l1251:	
  1876                           ;incstack = 0
  1877                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1878                           
  1879     02A2  01F7               	clrf	___lwdiv@quotient
  1880     02A3  01F8               	clrf	___lwdiv@quotient+1
  1881     02A4                     l1253:
  1882     02A4  0872               	movf	___lwdiv@divisor,w
  1883     02A5  0473               	iorwf	___lwdiv@divisor+1,w
  1884     02A6  1903               	btfsc	3,2
  1885     02A7  2AA9               	goto	u691
  1886     02A8  2AAA               	goto	u690
  1887     02A9                     u691:
  1888     02A9  2AE1               	goto	l1273
  1889     02AA                     u690:
  1890     02AA                     l1255:
  1891     02AA  01F9               	clrf	___lwdiv@counter
  1892     02AB  0AF9               	incf	___lwdiv@counter,f
  1893     02AC  2AB8               	goto	l1261
  1894     02AD                     l1257:
  1895     02AD  3001               	movlw	1
  1896     02AE                     u705:
  1897     02AE  1003               	clrc
  1898     02AF  0DF2               	rlf	___lwdiv@divisor,f
  1899     02B0  0DF3               	rlf	___lwdiv@divisor+1,f
  1900     02B1  3EFF               	addlw	-1
  1901     02B2  1D03               	skipz
  1902     02B3  2AAE               	goto	u705
  1903     02B4                     l1259:
  1904     02B4  3001               	movlw	1
  1905     02B5  00F6               	movwf	??___lwdiv
  1906     02B6  0876               	movf	??___lwdiv,w
  1907     02B7  07F9               	addwf	___lwdiv@counter,f
  1908     02B8                     l1261:
  1909     02B8  1FF3               	btfss	___lwdiv@divisor+1,7
  1910     02B9  2ABB               	goto	u711
  1911     02BA  2ABC               	goto	u710
  1912     02BB                     u711:
  1913     02BB  2AAD               	goto	l1257
  1914     02BC                     u710:
  1915     02BC                     l1263:
  1916     02BC  3001               	movlw	1
  1917     02BD                     u725:
  1918     02BD  1003               	clrc
  1919     02BE  0DF7               	rlf	___lwdiv@quotient,f
  1920     02BF  0DF8               	rlf	___lwdiv@quotient+1,f
  1921     02C0  3EFF               	addlw	-1
  1922     02C1  1D03               	skipz
  1923     02C2  2ABD               	goto	u725
  1924     02C3  0873               	movf	___lwdiv@divisor+1,w
  1925     02C4  0275               	subwf	___lwdiv@dividend+1,w
  1926     02C5  1D03               	skipz
  1927     02C6  2AC9               	goto	u735
  1928     02C7  0872               	movf	___lwdiv@divisor,w
  1929     02C8  0274               	subwf	___lwdiv@dividend,w
  1930     02C9                     u735:
  1931     02C9  1C03               	skipc
  1932     02CA  2ACC               	goto	u731
  1933     02CB  2ACD               	goto	u730
  1934     02CC                     u731:
  1935     02CC  2AD4               	goto	l1269
  1936     02CD                     u730:
  1937     02CD                     l1265:
  1938     02CD  0872               	movf	___lwdiv@divisor,w
  1939     02CE  02F4               	subwf	___lwdiv@dividend,f
  1940     02CF  0873               	movf	___lwdiv@divisor+1,w
  1941     02D0  1C03               	skipc
  1942     02D1  03F5               	decf	___lwdiv@dividend+1,f
  1943     02D2  02F5               	subwf	___lwdiv@dividend+1,f
  1944     02D3                     l1267:
  1945     02D3  1477               	bsf	___lwdiv@quotient,0
  1946     02D4                     l1269:
  1947     02D4  3001               	movlw	1
  1948     02D5                     u745:
  1949     02D5  1003               	clrc
  1950     02D6  0CF3               	rrf	___lwdiv@divisor+1,f
  1951     02D7  0CF2               	rrf	___lwdiv@divisor,f
  1952     02D8  3EFF               	addlw	-1
  1953     02D9  1D03               	skipz
  1954     02DA  2AD5               	goto	u745
  1955     02DB                     l1271:
  1956     02DB  3001               	movlw	1
  1957     02DC  02F9               	subwf	___lwdiv@counter,f
  1958     02DD  1D03               	btfss	3,2
  1959     02DE  2AE0               	goto	u751
  1960     02DF  2AE1               	goto	u750
  1961     02E0                     u751:
  1962     02E0  2ABC               	goto	l1263
  1963     02E1                     u750:
  1964     02E1                     l1273:
  1965     02E1  0878               	movf	___lwdiv@quotient+1,w
  1966     02E2  00F3               	movwf	?___lwdiv+1
  1967     02E3  0877               	movf	___lwdiv@quotient,w
  1968     02E4  00F2               	movwf	?___lwdiv
  1969     02E5                     l564:
  1970     02E5  0008               	return
  1971     02E6                     __end_of___lwdiv:
  1972                           
  1973                           	psect	text6
  1974     04A8                     __ptext6:	
  1975 ;; *************** function _spiWrite *****************
  1976 ;; Defined at:
  1977 ;;		line 34 in file "SPI.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;  dat             1    wreg     unsigned char 
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  dat             1    2[COMMON] unsigned char 
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      void 
  1984 ;; Registers used:
  1985 ;;		wreg
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1991 ;;      Params:         0       0       0       0       0
  1992 ;;      Locals:         1       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0
  1994 ;;      Totals:         1       0       0       0       0
  1995 ;;Total ram usage:        1 bytes
  1996 ;; Hardware stack levels used: 1
  1997 ;; Hardware stack levels required when called: 1
  1998 ;; This function calls:
  1999 ;;		Nothing
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005     04A8                     _spiWrite:	
  2006                           ;psect for function _spiWrite
  2007                           
  2008                           
  2009                           ;incstack = 0
  2010                           ; Regs used in _spiWrite: [wreg]
  2011                           ;spiWrite@dat stored from wreg
  2012     04A8  00F2               	movwf	spiWrite@dat
  2013     04A9                     l1347:
  2014                           
  2015                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
  2016     04A9  0872               	movf	spiWrite@dat,w
  2017     04AA  1283               	bcf	3,5	;RP0=0, select bank0
  2018     04AB  1303               	bcf	3,6	;RP1=0, select bank0
  2019     04AC  0093               	movwf	19	;volatile
  2020     04AD                     l147:
  2021     04AD  0008               	return
  2022     04AE                     __end_of_spiWrite:
  2023                           
  2024                           	psect	text7
  2025     0491                     __ptext7:	
  2026 ;; *************** function _spiRead *****************
  2027 ;; Defined at:
  2028 ;;		line 47 in file "SPI.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      unsigned char 
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0, pclath, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2042 ;;      Params:         0       0       0       0       0
  2043 ;;      Locals:         0       0       0       0       0
  2044 ;;      Temps:          0       0       0       0       0
  2045 ;;      Totals:         0       0       0       0       0
  2046 ;;Total ram usage:        0 bytes
  2047 ;; Hardware stack levels used: 1
  2048 ;; Hardware stack levels required when called: 2
  2049 ;; This function calls:
  2050 ;;		_spiReceiveWait
  2051 ;; This function is called by:
  2052 ;;		_main
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056     0491                     _spiRead:	
  2057                           ;psect for function _spiRead
  2058                           
  2059     0491                     l1349:	
  2060                           ;incstack = 0
  2061                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2062                           
  2063                           
  2064                           ;SPI.c: 49:     spiReceiveWait();
  2065     0491  120A  118A  249A  120A  118A  	fcall	_spiReceiveWait
  2066     0496                     l1351:
  2067                           
  2068                           ;SPI.c: 50:     return(SSPBUF);
  2069     0496  1283               	bcf	3,5	;RP0=0, select bank0
  2070     0497  1303               	bcf	3,6	;RP1=0, select bank0
  2071     0498  0813               	movf	19,w	;volatile
  2072     0499                     l155:
  2073     0499  0008               	return
  2074     049A                     __end_of_spiRead:
  2075                           
  2076                           	psect	text8
  2077     049A                     __ptext8:	
  2078 ;; *************** function _spiReceiveWait *****************
  2079 ;; Defined at:
  2080 ;;		line 29 in file "SPI.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;		None
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;		None
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  1    wreg      void 
  2087 ;; Registers used:
  2088 ;;		None
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2094 ;;      Params:         0       0       0       0       0
  2095 ;;      Locals:         0       0       0       0       0
  2096 ;;      Temps:          0       0       0       0       0
  2097 ;;      Totals:         0       0       0       0       0
  2098 ;;Total ram usage:        0 bytes
  2099 ;; Hardware stack levels used: 1
  2100 ;; Hardware stack levels required when called: 1
  2101 ;; This function calls:
  2102 ;;		Nothing
  2103 ;; This function is called by:
  2104 ;;		_spiRead
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108     049A                     _spiReceiveWait:	
  2109                           ;psect for function _spiReceiveWait
  2110                           
  2111     049A                     l1223:	
  2112                           ;incstack = 0
  2113                           ; Regs used in _spiReceiveWait: []
  2114                           
  2115     049A                     l141:	
  2116                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  2117                           
  2118     049A  1683               	bsf	3,5	;RP0=1, select bank1
  2119     049B  1303               	bcf	3,6	;RP1=0, select bank1
  2120     049C  1C14               	btfss	20,0	;volatile
  2121     049D  2C9F               	goto	u621
  2122     049E  2CA0               	goto	u620
  2123     049F                     u621:
  2124     049F  2C9A               	goto	l141
  2125     04A0                     u620:
  2126     04A0                     l144:
  2127     04A0  0008               	return
  2128     04A1                     __end_of_spiReceiveWait:
  2129                           
  2130                           	psect	text9
  2131     03EA                     __ptext9:	
  2132 ;; *************** function _setup *****************
  2133 ;; Defined at:
  2134 ;;		line 80 in file "main.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, status,2, status,0, pclath, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2148 ;;      Params:         0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0
  2151 ;;      Totals:         0       0       0       0       0
  2152 ;;Total ram usage:        0 bytes
  2153 ;; Hardware stack levels used: 1
  2154 ;; Hardware stack levels required when called: 2
  2155 ;; This function calls:
  2156 ;;		_spiInit
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162     03EA                     _setup:	
  2163                           ;psect for function _setup
  2164                           
  2165     03EA                     l1299:	
  2166                           ;incstack = 0
  2167                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  2168                           
  2169                           
  2170                           ;main.c: 83:     ANSEL = 0;
  2171     03EA  1683               	bsf	3,5	;RP0=1, select bank3
  2172     03EB  1703               	bsf	3,6	;RP1=1, select bank3
  2173     03EC  0188               	clrf	8	;volatile
  2174                           
  2175                           ;main.c: 84:     ANSELH = 0;
  2176     03ED  0189               	clrf	9	;volatile
  2177                           
  2178                           ;main.c: 88:     TRISB = 0;
  2179     03EE  1683               	bsf	3,5	;RP0=1, select bank1
  2180     03EF  1303               	bcf	3,6	;RP1=0, select bank1
  2181     03F0  0186               	clrf	6	;volatile
  2182     03F1                     l1301:
  2183                           
  2184                           ;main.c: 89:     TRISC2 = 0;
  2185     03F1  1107               	bcf	7,2	;volatile
  2186                           
  2187                           ;main.c: 90:     TRISD = 0;
  2188     03F2  0188               	clrf	8	;volatile
  2189                           
  2190                           ;main.c: 94:     PORTA = 0;
  2191     03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2192     03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2193     03F5  0185               	clrf	5	;volatile
  2194                           
  2195                           ;main.c: 95:     PORTB = 0;
  2196     03F6  0186               	clrf	6	;volatile
  2197                           
  2198                           ;main.c: 96:     PORTC = 0;
  2199     03F7  0187               	clrf	7	;volatile
  2200                           
  2201                           ;main.c: 97:     PORTD = 0;
  2202     03F8  0188               	clrf	8	;volatile
  2203                           
  2204                           ;main.c: 98:     PORTE = 0;
  2205     03F9  0189               	clrf	9	;volatile
  2206     03FA                     l1303:
  2207                           
  2208                           ;main.c: 106:     INTCONbits.GIE = 1;
  2209     03FA  178B               	bsf	11,7	;volatile
  2210     03FB                     l1305:
  2211                           
  2212                           ;main.c: 107:     INTCONbits.PEIE = 1;
  2213     03FB  170B               	bsf	11,6	;volatile
  2214     03FC                     l1307:
  2215                           
  2216                           ;main.c: 120:     OSCCONbits.IRCF = 0b110 ;
  2217     03FC  1683               	bsf	3,5	;RP0=1, select bank1
  2218     03FD  1303               	bcf	3,6	;RP1=0, select bank1
  2219     03FE  080F               	movf	15,w	;volatile
  2220     03FF  398F               	andlw	-113
  2221     0400  3860               	iorlw	96
  2222     0401  008F               	movwf	15	;volatile
  2223     0402                     l1309:
  2224                           
  2225                           ;main.c: 121:     OSCCONbits.SCS = 1;
  2226     0402  140F               	bsf	15,0	;volatile
  2227     0403                     l1311:
  2228                           
  2229                           ;main.c: 124:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LO
      +                          W, SPI_IDLE_2_ACTIVE);
  2230     0403  01F2               	clrf	spiInit@sDataSample
  2231     0404  01F3               	clrf	spiInit@sClockIdle
  2232     0405  01F4               	clrf	spiInit@sTransmitEdge
  2233     0406  3020               	movlw	32
  2234     0407  120A  118A  2447  120A  118A  	fcall	_spiInit
  2235     040C                     l66:
  2236     040C  0008               	return
  2237     040D                     __end_of_setup:
  2238                           
  2239                           	psect	text10
  2240     0447                     __ptext10:	
  2241 ;; *************** function _spiInit *****************
  2242 ;; Defined at:
  2243 ;;		line 12 in file "SPI.c"
  2244 ;; Parameters:    Size  Location     Type
  2245 ;;  sType           1    wreg     enum E1292
  2246 ;;  sDataSample     1    2[COMMON] enum E1300
  2247 ;;  sClockIdle      1    3[COMMON] enum E1304
  2248 ;;  sTransmitEdg    1    4[COMMON] enum E1308
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;  sType           1    5[COMMON] enum E1292
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      void 
  2253 ;; Registers used:
  2254 ;;		wreg, status,2, status,0
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2260 ;;      Params:         3       0       0       0       0
  2261 ;;      Locals:         1       0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0
  2263 ;;      Totals:         4       0       0       0       0
  2264 ;;Total ram usage:        4 bytes
  2265 ;; Hardware stack levels used: 1
  2266 ;; Hardware stack levels required when called: 1
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_setup
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274     0447                     _spiInit:	
  2275                           ;psect for function _spiInit
  2276                           
  2277                           
  2278                           ;incstack = 0
  2279                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2280                           ;spiInit@sType stored from wreg
  2281     0447  00F5               	movwf	spiInit@sType
  2282     0448                     l1193:
  2283                           
  2284                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
  2285     0448  1683               	bsf	3,5	;RP0=1, select bank1
  2286     0449  1303               	bcf	3,6	;RP1=0, select bank1
  2287     044A  1287               	bcf	7,5	;volatile
  2288                           
  2289                           ;SPI.c: 15:     if(sType & 0b00000100)
  2290     044B  1D75               	btfss	spiInit@sType,2
  2291     044C  2C4E               	goto	u611
  2292     044D  2C4F               	goto	u610
  2293     044E                     u611:
  2294     044E  2C53               	goto	l1199
  2295     044F                     u610:
  2296     044F                     l1195:
  2297                           
  2298                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  2299     044F  0874               	movf	spiInit@sTransmitEdge,w
  2300     0450  0094               	movwf	20	;volatile
  2301     0451                     l1197:
  2302                           
  2303                           ;SPI.c: 18:         TRISC3 = 1;
  2304     0451  1587               	bsf	7,3	;volatile
  2305                           
  2306                           ;SPI.c: 19:     }
  2307     0452  2C57               	goto	l137
  2308     0453                     l1199:
  2309                           
  2310                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  2311     0453  0872               	movf	spiInit@sDataSample,w
  2312     0454  0474               	iorwf	spiInit@sTransmitEdge,w
  2313     0455  0094               	movwf	20	;volatile
  2314     0456                     l1201:
  2315                           
  2316                           ;SPI.c: 23:         TRISC3 = 0;
  2317     0456  1187               	bcf	7,3	;volatile
  2318     0457                     l137:	
  2319                           ;SPI.c: 24:     }
  2320                           
  2321                           
  2322                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
  2323     0457  0875               	movf	spiInit@sType,w
  2324     0458  0473               	iorwf	spiInit@sClockIdle,w
  2325     0459  1283               	bcf	3,5	;RP0=0, select bank0
  2326     045A  1303               	bcf	3,6	;RP1=0, select bank0
  2327     045B  0094               	movwf	20	;volatile
  2328     045C                     l138:
  2329     045C  0008               	return
  2330     045D                     __end_of_spiInit:
  2331                           
  2332                           	psect	text11
  2333     02E6                     __ptext11:	
  2334 ;; *************** function _Lcd_Write_String *****************
  2335 ;; Defined at:
  2336 ;;		line 103 in file "LCD.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  a               2    5[COMMON] PTR unsigned char 
  2339 ;;		 -> LCD_ADC_S1(1), STR_1(4), 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;  i               2   10[COMMON] int 
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      void 
  2344 ;; Registers used:
  2345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2351 ;;      Params:         2       0       0       0       0
  2352 ;;      Locals:         2       0       0       0       0
  2353 ;;      Temps:          3       0       0       0       0
  2354 ;;      Totals:         7       0       0       0       0
  2355 ;;Total ram usage:        7 bytes
  2356 ;; Hardware stack levels used: 1
  2357 ;; Hardware stack levels required when called: 3
  2358 ;; This function calls:
  2359 ;;		_Lcd_Write_Char
  2360 ;; This function is called by:
  2361 ;;		_main
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365     02E6                     _Lcd_Write_String:	
  2366                           ;psect for function _Lcd_Write_String
  2367                           
  2368     02E6                     l1339:	
  2369                           ;incstack = 0
  2370                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2371                           
  2372                           
  2373                           ;LCD.c: 104:     int i;;LCD.c: 105:     for (i = 0; a[i] != '\0'; i++)
  2374     02E6  01FA               	clrf	Lcd_Write_String@i
  2375     02E7  01FB               	clrf	Lcd_Write_String@i+1
  2376     02E8  2B0B               	goto	l1345
  2377     02E9                     l1341:
  2378                           
  2379                           ;LCD.c: 106:         Lcd_Write_Char(a[i]);
  2380     02E9  087A               	movf	Lcd_Write_String@i,w
  2381     02EA  0775               	addwf	Lcd_Write_String@a,w
  2382     02EB  00F8               	movwf	??_Lcd_Write_String+1
  2383     02EC  0876               	movf	Lcd_Write_String@a+1,w
  2384     02ED  00F7               	movwf	??_Lcd_Write_String
  2385     02EE  1803               	skipnc
  2386     02EF  0AF7               	incf	??_Lcd_Write_String,f
  2387     02F0  1FFA               	btfss	Lcd_Write_String@i,7
  2388     02F1  2AF3               	goto	u840
  2389     02F2  03F7               	decf	??_Lcd_Write_String,f
  2390     02F3                     u840:
  2391     02F3  0877               	movf	??_Lcd_Write_String,w
  2392     02F4  00F9               	movwf	??_Lcd_Write_String+2
  2393     02F5  0879               	movf	??_Lcd_Write_String+2,w
  2394     02F6  1283               	bcf	3,5	;RP0=0, select bank0
  2395     02F7  1303               	bcf	3,6	;RP1=0, select bank0
  2396     02F8  00FF               	movwf	btemp+1
  2397     02F9  0878               	movf	??_Lcd_Write_String+1,w
  2398     02FA  0084               	movwf	4
  2399     02FB  120A  118A  23C7  120A  118A  	fcall	stringtab
  2400     0300  120A  118A  245D  120A  118A  	fcall	_Lcd_Write_Char
  2401     0305                     l1343:
  2402     0305  3001               	movlw	1
  2403     0306  07FA               	addwf	Lcd_Write_String@i,f
  2404     0307  1803               	skipnc
  2405     0308  0AFB               	incf	Lcd_Write_String@i+1,f
  2406     0309  3000               	movlw	0
  2407     030A  07FB               	addwf	Lcd_Write_String@i+1,f
  2408     030B                     l1345:
  2409     030B  087A               	movf	Lcd_Write_String@i,w
  2410     030C  0775               	addwf	Lcd_Write_String@a,w
  2411     030D  00F8               	movwf	??_Lcd_Write_String+1
  2412     030E  0876               	movf	Lcd_Write_String@a+1,w
  2413     030F  00F7               	movwf	??_Lcd_Write_String
  2414     0310  1803               	skipnc
  2415     0311  0AF7               	incf	??_Lcd_Write_String,f
  2416     0312  1FFA               	btfss	Lcd_Write_String@i,7
  2417     0313  2B15               	goto	u850
  2418     0314  03F7               	decf	??_Lcd_Write_String,f
  2419     0315                     u850:
  2420     0315  0877               	movf	??_Lcd_Write_String,w
  2421     0316  00F9               	movwf	??_Lcd_Write_String+2
  2422     0317  0879               	movf	??_Lcd_Write_String+2,w
  2423     0318  1283               	bcf	3,5	;RP0=0, select bank0
  2424     0319  1303               	bcf	3,6	;RP1=0, select bank0
  2425     031A  00FF               	movwf	btemp+1
  2426     031B  0878               	movf	??_Lcd_Write_String+1,w
  2427     031C  0084               	movwf	4
  2428     031D  120A  118A  23C7  120A  118A  	fcall	stringtab
  2429     0322  3A00               	xorlw	0
  2430     0323  1D03               	skipz
  2431     0324  2B26               	goto	u861
  2432     0325  2B27               	goto	u860
  2433     0326                     u861:
  2434     0326  2AE9               	goto	l1341
  2435     0327                     u860:
  2436     0327                     l115:
  2437     0327  0008               	return
  2438     0328                     __end_of_Lcd_Write_String:
  2439                           
  2440                           	psect	text12
  2441     045D                     __ptext12:	
  2442 ;; *************** function _Lcd_Write_Char *****************
  2443 ;; Defined at:
  2444 ;;		line 95 in file "LCD.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  a               1    wreg     unsigned char 
  2447 ;; Auto vars:     Size  Location     Type
  2448 ;;  a               1    4[COMMON] unsigned char 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  1    wreg      void 
  2451 ;; Registers used:
  2452 ;;		wreg, status,2, status,0, pclath, cstack
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2458 ;;      Params:         0       0       0       0       0
  2459 ;;      Locals:         1       0       0       0       0
  2460 ;;      Temps:          1       0       0       0       0
  2461 ;;      Totals:         2       0       0       0       0
  2462 ;;Total ram usage:        2 bytes
  2463 ;; Hardware stack levels used: 1
  2464 ;; Hardware stack levels required when called: 2
  2465 ;; This function calls:
  2466 ;;		_Lcd_Port
  2467 ;; This function is called by:
  2468 ;;		_Lcd_Write_String
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472     045D                     _Lcd_Write_Char:	
  2473                           ;psect for function _Lcd_Write_Char
  2474                           
  2475                           
  2476                           ;incstack = 0
  2477                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2478                           ;Lcd_Write_Char@a stored from wreg
  2479     045D  00F4               	movwf	Lcd_Write_Char@a
  2480     045E                     l1213:
  2481                           
  2482                           ;LCD.c: 96:     PORTBbits.RB0 = 1;
  2483     045E  1283               	bcf	3,5	;RP0=0, select bank0
  2484     045F  1303               	bcf	3,6	;RP1=0, select bank0
  2485     0460  1406               	bsf	6,0	;volatile
  2486     0461                     l1215:
  2487                           
  2488                           ;LCD.c: 97:     Lcd_Port(a);
  2489     0461  0874               	movf	Lcd_Write_Char@a,w
  2490     0462  120A  118A  2328  120A  118A  	fcall	_Lcd_Port
  2491     0467                     l1217:
  2492                           
  2493                           ;LCD.c: 98:     PORTBbits.RB1 = 1;
  2494     0467  1283               	bcf	3,5	;RP0=0, select bank0
  2495     0468  1303               	bcf	3,6	;RP1=0, select bank0
  2496     0469  1486               	bsf	6,1	;volatile
  2497     046A                     l1219:
  2498                           
  2499                           ;LCD.c: 99:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2500     046A  300D               	movlw	13
  2501     046B  00F3               	movwf	??_Lcd_Write_Char
  2502     046C                     u1087:
  2503     046C  0BF3               	decfsz	??_Lcd_Write_Char,f
  2504     046D  2C6C               	goto	u1087
  2505     046E                     l1221:
  2506                           
  2507                           ;LCD.c: 100:     PORTBbits.RB1 = 0;
  2508     046E  1283               	bcf	3,5	;RP0=0, select bank0
  2509     046F  1303               	bcf	3,6	;RP1=0, select bank0
  2510     0470  1086               	bcf	6,1	;volatile
  2511     0471                     l109:
  2512     0471  0008               	return
  2513     0472                     __end_of_Lcd_Write_Char:
  2514                           
  2515                           	psect	text13
  2516     040D                     __ptext13:	
  2517 ;; *************** function _Lcd_Set_Cursor *****************
  2518 ;; Defined at:
  2519 ;;		line 68 in file "LCD.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  a               1    wreg     unsigned char 
  2522 ;;  b               1    6[COMMON] unsigned char 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  a               1    7[COMMON] unsigned char 
  2525 ;;  temp            1    8[COMMON] unsigned char 
  2526 ;;  y               1    0        unsigned char 
  2527 ;;  z               1    0        unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0, pclath, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2537 ;;      Params:         1       0       0       0       0
  2538 ;;      Locals:         2       0       0       0       0
  2539 ;;      Temps:          0       0       0       0       0
  2540 ;;      Totals:         3       0       0       0       0
  2541 ;;Total ram usage:        3 bytes
  2542 ;; Hardware stack levels used: 1
  2543 ;; Hardware stack levels required when called: 3
  2544 ;; This function calls:
  2545 ;;		_Lcd_Cmd
  2546 ;; This function is called by:
  2547 ;;		_main
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551     040D                     _Lcd_Set_Cursor:	
  2552                           ;psect for function _Lcd_Set_Cursor
  2553                           
  2554                           
  2555                           ;incstack = 0
  2556                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2557                           ;Lcd_Set_Cursor@a stored from wreg
  2558     040D  00F7               	movwf	Lcd_Set_Cursor@a
  2559     040E                     l1327:
  2560                           
  2561                           ;LCD.c: 69:     char temp, z, y;;LCD.c: 70:     if (a == 1) {
  2562     040E  0377               	decf	Lcd_Set_Cursor@a,w
  2563     040F  1D03               	btfss	3,2
  2564     0410  2C12               	goto	u821
  2565     0411  2C13               	goto	u820
  2566     0412                     u821:
  2567     0412  2C1D               	goto	l1333
  2568     0413                     u820:
  2569     0413                     l1329:
  2570                           
  2571                           ;LCD.c: 71:         temp = 0x80 + b - 1;
  2572     0413  0876               	movf	Lcd_Set_Cursor@b,w
  2573     0414  3E7F               	addlw	127
  2574     0415  00F8               	movwf	Lcd_Set_Cursor@temp
  2575     0416                     l1331:
  2576                           
  2577                           ;LCD.c: 72:         Lcd_Cmd(temp);
  2578     0416  0878               	movf	Lcd_Set_Cursor@temp,w
  2579     0417  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2580                           
  2581                           ;LCD.c: 73:     } else if (a == 2) {
  2582     041C  2C2C               	goto	l103
  2583     041D                     l1333:
  2584     041D  3002               	movlw	2
  2585     041E  0677               	xorwf	Lcd_Set_Cursor@a,w
  2586     041F  1D03               	btfss	3,2
  2587     0420  2C22               	goto	u831
  2588     0421  2C23               	goto	u830
  2589     0422                     u831:
  2590     0422  2C2C               	goto	l103
  2591     0423                     u830:
  2592     0423                     l1335:
  2593                           
  2594                           ;LCD.c: 74:         temp = 0xC0 + b - 1;
  2595     0423  0876               	movf	Lcd_Set_Cursor@b,w
  2596     0424  3EBF               	addlw	191
  2597     0425  00F8               	movwf	Lcd_Set_Cursor@temp
  2598     0426                     l1337:
  2599                           
  2600                           ;LCD.c: 75:         Lcd_Cmd(temp);
  2601     0426  0878               	movf	Lcd_Set_Cursor@temp,w
  2602     0427  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2603     042C                     l103:
  2604     042C  0008               	return
  2605     042D                     __end_of_Lcd_Set_Cursor:
  2606                           
  2607                           	psect	text14
  2608     0251                     __ptext14:	
  2609 ;; *************** function _Lcd_Init *****************
  2610 ;; Defined at:
  2611 ;;		line 79 in file "LCD.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;		None
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;		None
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, status,2, status,0, pclath, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2625 ;;      Params:         0       0       0       0       0
  2626 ;;      Locals:         0       0       0       0       0
  2627 ;;      Temps:          2       0       0       0       0
  2628 ;;      Totals:         2       0       0       0       0
  2629 ;;Total ram usage:        2 bytes
  2630 ;; Hardware stack levels used: 1
  2631 ;; Hardware stack levels required when called: 3
  2632 ;; This function calls:
  2633 ;;		_Lcd_Cmd
  2634 ;;		_Lcd_Port
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640     0251                     _Lcd_Init:	
  2641                           ;psect for function _Lcd_Init
  2642                           
  2643     0251                     l1313:	
  2644                           ;incstack = 0
  2645                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2646                           
  2647                           
  2648                           ;LCD.c: 80:     Lcd_Port(0x00);
  2649     0251  3000               	movlw	0
  2650     0252  120A  118A  2328  120A  118A  	fcall	_Lcd_Port
  2651     0257                     l1315:
  2652                           
  2653                           ;LCD.c: 81:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2654     0257  301A               	movlw	26
  2655     0258  00F7               	movwf	??_Lcd_Init+1
  2656     0259  30F8               	movlw	248
  2657     025A  00F6               	movwf	??_Lcd_Init
  2658     025B                     u1097:
  2659     025B  0BF6               	decfsz	??_Lcd_Init,f
  2660     025C  2A5B               	goto	u1097
  2661     025D  0BF7               	decfsz	??_Lcd_Init+1,f
  2662     025E  2A5B               	goto	u1097
  2663     025F  0000               	nop
  2664     0260                     l1317:
  2665                           
  2666                           ;LCD.c: 82:     Lcd_Cmd(0x030);
  2667     0260  3030               	movlw	48
  2668     0261  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2669                           
  2670                           ;LCD.c: 83:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2671     0266  3007               	movlw	7
  2672     0267  00F7               	movwf	??_Lcd_Init+1
  2673     0268  307D               	movlw	125
  2674     0269  00F6               	movwf	??_Lcd_Init
  2675     026A                     u1107:
  2676     026A  0BF6               	decfsz	??_Lcd_Init,f
  2677     026B  2A6A               	goto	u1107
  2678     026C  0BF7               	decfsz	??_Lcd_Init+1,f
  2679     026D  2A6A               	goto	u1107
  2680     026E                     l1319:
  2681                           
  2682                           ;LCD.c: 84:     Lcd_Cmd(0x030);
  2683     026E  3030               	movlw	48
  2684     026F  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2685     0274                     l1321:
  2686                           
  2687                           ;LCD.c: 85:     _delay((unsigned long)((200)*(4000000/4000000.0)));
  2688     0274  3042               	movlw	66
  2689     0275  00F6               	movwf	??_Lcd_Init
  2690     0276                     u1117:
  2691     0276  0BF6               	decfsz	??_Lcd_Init,f
  2692     0277  2A76               	goto	u1117
  2693     0278  0000               	nop
  2694                           
  2695                           ;LCD.c: 86:     Lcd_Cmd(0x030);
  2696     0279  3030               	movlw	48
  2697     027A  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2698                           
  2699                           ;LCD.c: 87:     Lcd_Cmd(0x38);
  2700     027F  3038               	movlw	56
  2701     0280  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2702                           
  2703                           ;LCD.c: 88:     Lcd_Cmd(0x08);
  2704     0285  3008               	movlw	8
  2705     0286  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2706                           
  2707                           ;LCD.c: 89:     Lcd_Cmd(0x01);
  2708     028B  3001               	movlw	1
  2709     028C  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2710                           
  2711                           ;LCD.c: 90:     Lcd_Cmd(0x06);
  2712     0291  3006               	movlw	6
  2713     0292  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2714                           
  2715                           ;LCD.c: 91:     Lcd_Cmd(0x0C);
  2716     0297  300C               	movlw	12
  2717     0298  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2718     029D                     l1323:
  2719                           
  2720                           ;LCD.c: 92:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2721     029D  3021               	movlw	33
  2722     029E  00F6               	movwf	??_Lcd_Init
  2723     029F                     u1127:
  2724     029F  0BF6               	decfsz	??_Lcd_Init,f
  2725     02A0  2A9F               	goto	u1127
  2726     02A1                     l106:
  2727     02A1  0008               	return
  2728     02A2                     __end_of_Lcd_Init:
  2729                           
  2730                           	psect	text15
  2731     0484                     __ptext15:	
  2732 ;; *************** function _Lcd_Clear *****************
  2733 ;; Defined at:
  2734 ;;		line 63 in file "LCD.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;		None
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      void 
  2741 ;; Registers used:
  2742 ;;		wreg, status,2, status,0, pclath, cstack
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2748 ;;      Params:         0       0       0       0       0
  2749 ;;      Locals:         0       0       0       0       0
  2750 ;;      Temps:          0       0       0       0       0
  2751 ;;      Totals:         0       0       0       0       0
  2752 ;;Total ram usage:        0 bytes
  2753 ;; Hardware stack levels used: 1
  2754 ;; Hardware stack levels required when called: 3
  2755 ;; This function calls:
  2756 ;;		_Lcd_Cmd
  2757 ;; This function is called by:
  2758 ;;		_main
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762     0484                     _Lcd_Clear:	
  2763                           ;psect for function _Lcd_Clear
  2764                           
  2765     0484                     l1325:	
  2766                           ;incstack = 0
  2767                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2768                           
  2769                           
  2770                           ;LCD.c: 64:     Lcd_Cmd(0);
  2771     0484  3000               	movlw	0
  2772     0485  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2773                           
  2774                           ;LCD.c: 65:     Lcd_Cmd(1);
  2775     048A  3001               	movlw	1
  2776     048B  120A  118A  242D  120A  118A  	fcall	_Lcd_Cmd
  2777     0490                     l97:
  2778     0490  0008               	return
  2779     0491                     __end_of_Lcd_Clear:
  2780                           
  2781                           	psect	text16
  2782     042D                     __ptext16:	
  2783 ;; *************** function _Lcd_Cmd *****************
  2784 ;; Defined at:
  2785 ;;		line 55 in file "LCD.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  a               1    wreg     unsigned char 
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  a               1    5[COMMON] unsigned char 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, status,0, pclath, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2799 ;;      Params:         0       0       0       0       0
  2800 ;;      Locals:         1       0       0       0       0
  2801 ;;      Temps:          2       0       0       0       0
  2802 ;;      Totals:         3       0       0       0       0
  2803 ;;Total ram usage:        3 bytes
  2804 ;; Hardware stack levels used: 1
  2805 ;; Hardware stack levels required when called: 2
  2806 ;; This function calls:
  2807 ;;		_Lcd_Port
  2808 ;; This function is called by:
  2809 ;;		_Lcd_Clear
  2810 ;;		_Lcd_Set_Cursor
  2811 ;;		_Lcd_Init
  2812 ;;		_Lcd_Shift_Right
  2813 ;;		_Lcd_Shift_Left
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817     042D                     _Lcd_Cmd:	
  2818                           ;psect for function _Lcd_Cmd
  2819                           
  2820                           
  2821                           ;incstack = 0
  2822                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2823                           ;Lcd_Cmd@a stored from wreg
  2824     042D  00F5               	movwf	Lcd_Cmd@a
  2825     042E                     l1203:
  2826                           
  2827                           ;LCD.c: 56:     PORTBbits.RB0 = 0;
  2828     042E  1283               	bcf	3,5	;RP0=0, select bank0
  2829     042F  1303               	bcf	3,6	;RP1=0, select bank0
  2830     0430  1006               	bcf	6,0	;volatile
  2831     0431                     l1205:
  2832                           
  2833                           ;LCD.c: 57:     Lcd_Port(a);
  2834     0431  0875               	movf	Lcd_Cmd@a,w
  2835     0432  120A  118A  2328  120A  118A  	fcall	_Lcd_Port
  2836     0437                     l1207:
  2837                           
  2838                           ;LCD.c: 58:     PORTBbits.RB1 = 1;
  2839     0437  1283               	bcf	3,5	;RP0=0, select bank0
  2840     0438  1303               	bcf	3,6	;RP1=0, select bank0
  2841     0439  1486               	bsf	6,1	;volatile
  2842     043A                     l1209:
  2843                           
  2844                           ;LCD.c: 59:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2845     043A  3006               	movlw	6
  2846     043B  00F4               	movwf	??_Lcd_Cmd+1
  2847     043C  3030               	movlw	48
  2848     043D  00F3               	movwf	??_Lcd_Cmd
  2849     043E                     u1137:
  2850     043E  0BF3               	decfsz	??_Lcd_Cmd,f
  2851     043F  2C3E               	goto	u1137
  2852     0440  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2853     0441  2C3E               	goto	u1137
  2854     0442  0000               	nop
  2855     0443                     l1211:
  2856                           
  2857                           ;LCD.c: 60:     PORTBbits.RB1 = 0;
  2858     0443  1283               	bcf	3,5	;RP0=0, select bank0
  2859     0444  1303               	bcf	3,6	;RP1=0, select bank0
  2860     0445  1086               	bcf	6,1	;volatile
  2861     0446                     l94:
  2862     0446  0008               	return
  2863     0447                     __end_of_Lcd_Cmd:
  2864                           
  2865                           	psect	text17
  2866     0328                     __ptext17:	
  2867 ;; *************** function _Lcd_Port *****************
  2868 ;; Defined at:
  2869 ;;		line 13 in file "LCD.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  a               1    wreg     unsigned char 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  a               1    2[COMMON] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		wreg
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2883 ;;      Params:         0       0       0       0       0
  2884 ;;      Locals:         1       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0
  2886 ;;      Totals:         1       0       0       0       0
  2887 ;;Total ram usage:        1 bytes
  2888 ;; Hardware stack levels used: 1
  2889 ;; Hardware stack levels required when called: 1
  2890 ;; This function calls:
  2891 ;;		Nothing
  2892 ;; This function is called by:
  2893 ;;		_Lcd_Cmd
  2894 ;;		_Lcd_Init
  2895 ;;		_Lcd_Write_Char
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899     0328                     _Lcd_Port:	
  2900                           ;psect for function _Lcd_Port
  2901                           
  2902                           
  2903                           ;incstack = 0
  2904                           ; Regs used in _Lcd_Port: [wreg]
  2905                           ;Lcd_Port@a stored from wreg
  2906     0328  00F2               	movwf	Lcd_Port@a
  2907     0329                     l1175:
  2908                           
  2909                           ;LCD.c: 14:     if (a & 1)
  2910     0329  1C72               	btfss	Lcd_Port@a,0
  2911     032A  2B2C               	goto	u531
  2912     032B  2B2D               	goto	u530
  2913     032C                     u531:
  2914     032C  2B31               	goto	l75
  2915     032D                     u530:
  2916     032D                     l1177:
  2917                           
  2918                           ;LCD.c: 15:         PORTDbits.RD0 = 1;
  2919     032D  1283               	bcf	3,5	;RP0=0, select bank0
  2920     032E  1303               	bcf	3,6	;RP1=0, select bank0
  2921     032F  1408               	bsf	8,0	;volatile
  2922     0330  2B34               	goto	l76
  2923     0331                     l75:	
  2924                           ;LCD.c: 16:     else
  2925                           
  2926                           
  2927                           ;LCD.c: 17:         PORTDbits.RD0 = 0;
  2928     0331  1283               	bcf	3,5	;RP0=0, select bank0
  2929     0332  1303               	bcf	3,6	;RP1=0, select bank0
  2930     0333  1008               	bcf	8,0	;volatile
  2931     0334                     l76:
  2932                           
  2933                           ;LCD.c: 19:     if (a & 2)
  2934     0334  1CF2               	btfss	Lcd_Port@a,1
  2935     0335  2B37               	goto	u541
  2936     0336  2B38               	goto	u540
  2937     0337                     u541:
  2938     0337  2B3A               	goto	l77
  2939     0338                     u540:
  2940     0338                     l1179:
  2941                           
  2942                           ;LCD.c: 20:         PORTDbits.RD1 = 1;
  2943     0338  1488               	bsf	8,1	;volatile
  2944     0339  2B3B               	goto	l78
  2945     033A                     l77:	
  2946                           ;LCD.c: 21:     else
  2947                           
  2948                           
  2949                           ;LCD.c: 22:         PORTDbits.RD1 = 0;
  2950     033A  1088               	bcf	8,1	;volatile
  2951     033B                     l78:
  2952                           
  2953                           ;LCD.c: 24:     if (a & 4)
  2954     033B  1D72               	btfss	Lcd_Port@a,2
  2955     033C  2B3E               	goto	u551
  2956     033D  2B3F               	goto	u550
  2957     033E                     u551:
  2958     033E  2B41               	goto	l79
  2959     033F                     u550:
  2960     033F                     l1181:
  2961                           
  2962                           ;LCD.c: 25:         PORTDbits.RD2 = 1;
  2963     033F  1508               	bsf	8,2	;volatile
  2964     0340  2B42               	goto	l80
  2965     0341                     l79:	
  2966                           ;LCD.c: 26:     else
  2967                           
  2968                           
  2969                           ;LCD.c: 27:         PORTDbits.RD2 = 0;
  2970     0341  1108               	bcf	8,2	;volatile
  2971     0342                     l80:
  2972                           
  2973                           ;LCD.c: 29:     if (a & 8)
  2974     0342  1DF2               	btfss	Lcd_Port@a,3
  2975     0343  2B45               	goto	u561
  2976     0344  2B46               	goto	u560
  2977     0345                     u561:
  2978     0345  2B48               	goto	l81
  2979     0346                     u560:
  2980     0346                     l1183:
  2981                           
  2982                           ;LCD.c: 30:         PORTDbits.RD3 = 1;
  2983     0346  1588               	bsf	8,3	;volatile
  2984     0347  2B49               	goto	l82
  2985     0348                     l81:	
  2986                           ;LCD.c: 31:     else
  2987                           
  2988                           
  2989                           ;LCD.c: 32:         PORTDbits.RD3 = 0;
  2990     0348  1188               	bcf	8,3	;volatile
  2991     0349                     l82:
  2992                           
  2993                           ;LCD.c: 34:     if (a & 16)
  2994     0349  1E72               	btfss	Lcd_Port@a,4
  2995     034A  2B4C               	goto	u571
  2996     034B  2B4D               	goto	u570
  2997     034C                     u571:
  2998     034C  2B4F               	goto	l83
  2999     034D                     u570:
  3000     034D                     l1185:
  3001                           
  3002                           ;LCD.c: 35:         PORTDbits.RD4 = 1;
  3003     034D  1608               	bsf	8,4	;volatile
  3004     034E  2B50               	goto	l84
  3005     034F                     l83:	
  3006                           ;LCD.c: 36:     else
  3007                           
  3008                           
  3009                           ;LCD.c: 37:         PORTDbits.RD4 = 0;
  3010     034F  1208               	bcf	8,4	;volatile
  3011     0350                     l84:
  3012                           
  3013                           ;LCD.c: 39:     if (a & 32)
  3014     0350  1EF2               	btfss	Lcd_Port@a,5
  3015     0351  2B53               	goto	u581
  3016     0352  2B54               	goto	u580
  3017     0353                     u581:
  3018     0353  2B56               	goto	l85
  3019     0354                     u580:
  3020     0354                     l1187:
  3021                           
  3022                           ;LCD.c: 40:         PORTDbits.RD5 = 1;
  3023     0354  1688               	bsf	8,5	;volatile
  3024     0355  2B57               	goto	l86
  3025     0356                     l85:	
  3026                           ;LCD.c: 41:     else
  3027                           
  3028                           
  3029                           ;LCD.c: 42:         PORTDbits.RD5 = 0;
  3030     0356  1288               	bcf	8,5	;volatile
  3031     0357                     l86:
  3032                           
  3033                           ;LCD.c: 44:     if (a & 64)
  3034     0357  1F72               	btfss	Lcd_Port@a,6
  3035     0358  2B5A               	goto	u591
  3036     0359  2B5B               	goto	u590
  3037     035A                     u591:
  3038     035A  2B5D               	goto	l87
  3039     035B                     u590:
  3040     035B                     l1189:
  3041                           
  3042                           ;LCD.c: 45:         PORTDbits.RD6 = 1;
  3043     035B  1708               	bsf	8,6	;volatile
  3044     035C  2B5E               	goto	l88
  3045     035D                     l87:	
  3046                           ;LCD.c: 46:     else
  3047                           
  3048                           
  3049                           ;LCD.c: 47:         PORTDbits.RD6 = 0;
  3050     035D  1308               	bcf	8,6	;volatile
  3051     035E                     l88:
  3052                           
  3053                           ;LCD.c: 49:     if (a & 128)
  3054     035E  1FF2               	btfss	Lcd_Port@a,7
  3055     035F  2B61               	goto	u601
  3056     0360  2B62               	goto	u600
  3057     0361                     u601:
  3058     0361  2B64               	goto	l89
  3059     0362                     u600:
  3060     0362                     l1191:
  3061                           
  3062                           ;LCD.c: 50:         PORTDbits.RD7 = 1;
  3063     0362  1788               	bsf	8,7	;volatile
  3064     0363  2B65               	goto	l91
  3065     0364                     l89:	
  3066                           ;LCD.c: 51:     else
  3067                           
  3068                           
  3069                           ;LCD.c: 52:         PORTDbits.RD7 = 0;
  3070     0364  1388               	bcf	8,7	;volatile
  3071     0365                     l91:
  3072     0365  0008               	return
  3073     0366                     __end_of_Lcd_Port:
  3074                           
  3075                           	psect	text18
  3076     04A1                     __ptext18:	
  3077 ;; *************** function _isr *****************
  3078 ;; Defined at:
  3079 ;;		line 75 in file "main.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;		None
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;		None
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  1    wreg      void 
  3086 ;; Registers used:
  3087 ;;		None
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3093 ;;      Params:         0       0       0       0       0
  3094 ;;      Locals:         0       0       0       0       0
  3095 ;;      Temps:          2       0       0       0       0
  3096 ;;      Totals:         2       0       0       0       0
  3097 ;;Total ram usage:        2 bytes
  3098 ;; Hardware stack levels used: 1
  3099 ;; This function calls:
  3100 ;;		Nothing
  3101 ;; This function is called by:
  3102 ;;		Interrupt level 1
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106     04A1                     _isr:	
  3107                           ;psect for function _isr
  3108                           
  3109     04A1                     i1l63:
  3110     04A1  0871               	movf	??_isr+1,w
  3111     04A2  008A               	movwf	10
  3112     04A3  0E70               	swapf	??_isr,w
  3113     04A4  0083               	movwf	3
  3114     04A5  0EFE               	swapf	btemp,f
  3115     04A6  0E7E               	swapf	btemp,w
  3116     04A7  0009               	retfie
  3117     04A8                     __end_of_isr:
  3118     007E                     btemp	set	126	;btemp
  3119     007E                     wtemp0	set	126
  3120                           
  3121                           	psect	intentry
  3122     0004                     __pintentry:	
  3123                           ;incstack = 0
  3124                           ; Regs used in _isr: []
  3125                           
  3126     0004                     interrupt_function:
  3127     007E                     saved_w	set	btemp
  3128     0004  00FE               	movwf	btemp
  3129     0005  0E03               	swapf	3,w
  3130     0006  00F0               	movwf	??_isr
  3131     0007  080A               	movf	10,w
  3132     0008  00F1               	movwf	??_isr+1
  3133     0009  120A  118A  2CA1   	ljmp	_isr
  3134                           
  3135                           	psect	idloc
  3136                           
  3137                           ;Config register IDLOC0 @ 0x2000
  3138                           ;	unspecified, using default values
  3139     2000                     	org	8192
  3140     2000  3FFF               	dw	16383
  3141                           
  3142                           ;Config register IDLOC1 @ 0x2001
  3143                           ;	unspecified, using default values
  3144     2001                     	org	8193
  3145     2001  3FFF               	dw	16383
  3146                           
  3147                           ;Config register IDLOC2 @ 0x2002
  3148                           ;	unspecified, using default values
  3149     2002                     	org	8194
  3150     2002  3FFF               	dw	16383
  3151                           
  3152                           ;Config register IDLOC3 @ 0x2003
  3153                           ;	unspecified, using default values
  3154     2003                     	org	8195
  3155     2003  3FFF               	dw	16383
  3156                           
  3157                           	psect	config
  3158                           
  3159                           ;Config register CONFIG1 @ 0x2007
  3160                           ;	Oscillator Selection bits
  3161                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3162                           ;	Watchdog Timer Enable bit
  3163                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3164                           ;	Power-up Timer Enable bit
  3165                           ;	PWRTE = OFF, PWRT disabled
  3166                           ;	RE3/MCLR pin function select bit
  3167                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3168                           ;	Code Protection bit
  3169                           ;	CP = OFF, Program memory code protection is disabled
  3170                           ;	Data Code Protection bit
  3171                           ;	CPD = OFF, Data memory code protection is disabled
  3172                           ;	Brown Out Reset Selection bits
  3173                           ;	BOREN = OFF, BOR disabled
  3174                           ;	Internal External Switchover bit
  3175                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3176                           ;	Fail-Safe Clock Monitor Enabled bit
  3177                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3178                           ;	Low Voltage Programming Enable bit
  3179                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3180                           ;	In-Circuit Debugger Mode bit
  3181                           ;	DEBUG = 0x1, unprogramme  3182     2007                     	org	8199
  3183     2007  20D4               	dw	8404
  3184                           
  3185                           ;Config register CONFIG2 @ 0x2008
  3186                           ;	Brown-out Reset Selection bit
  3187                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3188                           ;	Flash Program Memory Self Write Enable bits
  3189                           ;	WRT = OFF, Write protection off
  3190     2008                     	org	8200
  3191     2008  3FFF               	dw	16383

Data Sizes:
    Strings     9
    Constant    10
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     21      24
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 1
		 -> LCD_ADC_S1(BANK0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 4
		 -> LCD_ADC_S1(BANK0[1]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_spiInit
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3832
                                             19 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _setup
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    20      3    1954
                                              4 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                             10 COMMON     2     2      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     440
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0     198
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     484
                                              6 COMMON     3     2      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     374
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     198
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     198
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     176
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      24       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      18       5       30.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      24      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Aug 01 00:09:00 2023

                       pc 0002               _SSPSTATbits 0094                        l80 0342  
                      l81 0348                        l82 0349                        l66 040C  
                      l91 0365                        l83 034F                        l75 0331  
                      l84 0350                        l76 0334                        l85 0356  
                      l77 033A                        l86 0357                        l78 033B  
                      l94 0446                        l87 035D                        l79 0341  
                      l88 035E                        l89 0364                        l97 0490  
                      fsr 0004       ___wmul@multiplicand 0074                       l103 042C  
                     l106 02A1                       l115 0327                       l109 0471  
                     l141 049A                       l144 04A0                       l137 0457  
                     l138 045C                       l155 0499                       l147 04AD  
                     l253 0032                       l271 010C                       l292 03AE  
                     l294 03C6                       l288 01D7                       l564 02E5  
                     l574 03A1                       l745 0483                       u600 0362  
                     u601 0361                       u530 032D                       u610 044F  
                     u531 032C                       u611 044E                       u540 0338  
                     u620 04A0                       u541 0337                       u621 049F  
                     u550 033F                       u710 02BC                       u630 047A  
                     u551 033E                       u711 02BB                       u631 0479  
                     u560 0346                       u640 0480                       u561 0345  
                     u705 02AE                       u641 047F                       u570 034D  
                     u730 02CD                       u810 039D                       u650 03A8  
                     u571 034C                       u731 02CC                       u811 039C  
                     u651 03A7                       u580 0354                       u820 0413  
                     u900 00C9                       u581 0353                       u821 0412  
                     u725 02BD                       u805 0391                       u901 00C8  
                     u590 035B                       u830 0423                       u750 02E1  
                     u910 00EF                       u591 035A                       u831 0422  
                     u751 02E0                       u735 02C9                       u911 00EE  
                     u840 02F3                       u760 036E                       u680 03C2  
                     u920 00FA                       u745 02D5                       u761 036D  
                     u681 03C1                       u665 03AF                       u921 00F9  
                     u850 0315                       u690 02AA                       u930 0100  
                     u691 02A9                       u675 03B6                       u931 00FF  
                     u915 00EB                       u860 0327                       u780 0380  
                     u940 0106                       u861 0326                       u781 037F  
                     u941 0105                       u790 038A                       u950 0117  
                     u870 0024                       u791 0389                       u775 0372  
                     u951 0116                       u871 0023                       u960 012B  
                     u880 005A                       u961 012A                       u881 0059  
                     u970 0131                       u890 009A                       u795 0386  
                     u971 0130                       u955 0113                       u891 0099  
                     u980 0140                       u981 013F                       u990 0155  
                     u991 0154                       _isr 04A1                       fsr0 0004  
                     indf 0000                      l1201 0456                      l1211 0443  
                    l1203 042E                      l1205 0431                      l1221 046E  
                    l1213 045E                      l1301 03F1                      l1207 0437  
                    l1215 0461                      l1311 0403                      l1303 03FA  
                    l1223 049A                      l1231 0480                      l1209 043A  
                    l1321 0274                      l1313 0251                      l1217 0467  
                    l1305 03FB                      l1241 03A8                      l1233 0482  
                    l1225 0473                      l1323 029D                      l1315 0257  
                    l1331 0416                      l1219 046A                      l1307 03FC  
                    l1251 02A2                      l1243 03B5                      l1227 0474  
                    l1411 0100                      l1403 00D4                      l1181 033F  
                    l1325 0484                      l1317 0260                      l1333 041D  
                    l1341 02E9                      l1309 0402                      l1261 02B8  
                    l1253 02A4                      l1245 03BC                      l1237 03A2  
                    l1229 047A                      l1421 012B                      l1413 0106  
                    l1191 0362                      l1183 0346                      l1175 0329  
                    l1319 026E                      l1335 0423                      l1327 040E  
                    l1343 0305                      l1351 0496                      l1271 02DB  
                    l1263 02BC                      l1255 02AA                      l1247 03C2  
                    l1239 03A4                      l1431 0145                      l1423 0131  
                    l1415 0117                      l1407 00F0                      l1185 034D  
                    l1177 032D                      l1337 0426                      l1329 0413  
                    l1345 030B                      l1193 0448                      l1265 02CD  
                    l1257 02AD                      l1273 02E1                      l1281 0371  
                    l1441 0165                      l1433 0149                      l1425 0136  
                    l1417 0123                      l1409 00FA                      l1361 0029  
                    l1187 0354                      l1179 0338                      l1339 02E6  
                    l1195 044F                      l1347 04A9                      l1267 02D3  
                    l1259 02B4                      l1291 0390                      l1283 0378  
                    l1451 0183                      l1443 0171                      l1427 013A  
                    l1435 0156                      l1419 0127                      l1371 004A  
                    l1363 002E                      l1355 001B                      l1189 035B  
                    l1197 0451                      l1349 0491                      l1269 02D4  
                    l1293 0397                      l1285 037C                      l1277 0366  
                    l1453 01B1                      l1445 0177                      l1437 015C  
                    l1429 0140                      l1461 01D3                      l1381 008A  
                    l1373 005A                      l1541 0045                      l1365 0033  
                    l1357 001E                      l1199 0453                      l1287 0380  
                    l1279 036E                      l1295 039D                      l1455 01B6  
                    l1447 017C                      l1439 0161                      l1391 00C5  
                    l1543 00AE                      l1375 005E                      l1359 0024  
                    l1289 038A                      l1457 01BA                      l1449 0180  
                    l1393 00C9                      l1377 0073                      l1385 009A  
                    l1369 0037                      l1481 0203                      l1473 01D8  
                    l1299 03EA                      l1395 00CD                      l1387 00B9  
                    l1379 0086                      l1459 01C3                      l1491 0237  
                    l1483 020B                      l1475 01EF                      l1397 00D2  
                    l1389 00C1                      l1493 023F                      l1485 0218  
                    l1477 01F8                      l1495 0242                      l1487 0220  
                    l1479 01FB                      l1489 022E                      ?_isr 0070  
                    STR_1 03E6                      STR_2 03E1                      u1000 015C  
                    u1001 015B                      u1010 0171                      u1011 0170  
                    u1020 0177                      u1021 0176                      u1030 01C3  
                    u1031 01C2                      u1040 01D3                      u1041 01D2  
                    u1107 026A                      u1117 0276                      u1127 029F  
                    u1137 043E                      u1057 01FF                      u1067 023B  
                    u1077 0248                      u1087 046C                      u1097 025B  
                    i1l63 04A1         ?_Lcd_Write_String 0075                      _main 01D8  
                    btemp 007E                      start 000C        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 0447                     ??_isr 0070                     ?_main 0070  
                   _ANSEL 0188           __end_of___lwdiv 02E6           __end_of___lwmod 03A2  
                   _PORTA 0005                     _PORTB 0006                     _PORTC 0007  
                   _PORTD 0008                     _PORTE 0009                     _TRISB 0086  
                   _TRISD 0088           __end_of_dpowers 03E1           __end_of_isdigit 0484  
                   _setup 03EA                     pclath 000A           __end_of_spiInit 045D  
         __end_of_spiRead 049A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 01D8          __end_of_Lcd_Init 02A2          __end_of_Lcd_Port 0366  
         __initialization 000F              __end_of_main 0251                    ??_main 0033  
                  ?_setup 0070                    _ANSELH 0189                 ??_Lcd_Cmd 0073  
                  _TRISC2 043A                    _TRISC3 043B                    _TRISC5 043D  
                  _SSPCON 0014                    _SSPBUF 0013                    ___wmul 03A2  
               ??___lwdiv 0076                 ??___lwmod 007A                 ??_isdigit 0072  
                  saved_w 007E          __end_of_spiWrite 04AE                 ??_spiInit 0075  
               ??_spiRead 0072                 ??_sprintf 0027           Lcd_Set_Cursor@a 0077  
         Lcd_Set_Cursor@b 0076   __end_of__initialization 0014         __end_of_Lcd_Clear 0491  
          __pcstackCOMMON 0070             __end_of_setup 040D            _Lcd_Set_Cursor 040D  
               ?_Lcd_Init 0070                 ?_Lcd_Port 0070              sprintf@width 002F  
                 ??_setup 0076                __pbssBANK0 0035                __pmaintext 01D8  
                 ?___wmul 0072                __pintentry 0004    __end_of_Lcd_Set_Cursor 042D  
              ??_Lcd_Init 0076                ??_Lcd_Port 0072                   _SSPSTAT 0094  
              __stringtab 03C7            _Lcd_Write_Char 045D                   _Lcd_Cmd 042D  
               ?_spiWrite 0070                   ___lwdiv 02A2                   ___lwmod 0366  
         ?_Lcd_Set_Cursor 0076                   __ptext1 0018                   __ptext2 0472  
                 __ptext3 03A2                   __ptext4 0366                   __ptext5 02A2  
                 __ptext6 04A8                   __ptext7 0491                   __ptext8 049A  
                 __ptext9 03EA                   _dpowers 03D7                   _isdigit 0472  
                 _spiInit 0447                   _spiRead 0491                   _sprintf 0018  
  __end_of_Lcd_Write_Char 0472      end_of_initialization 0014                ??_spiWrite 0072  
               Lcd_Port@a 0072                 _PORTBbits 0006                 _PORTCbits 0007  
               _PORTDbits 0008               spiWrite@dat 0072           ?_Lcd_Write_Char 0070  
       Lcd_Write_String@a 0075         Lcd_Write_String@i 007A                 _Lcd_Clear 0484  
          _spiReceiveWait 049A            __end_of___wmul 03C7          _Lcd_Write_String 02E6  
     start_initialization 000F               __end_of_isr 04A8    __end_of_spiReceiveWait 04A1  
              ?_Lcd_Clear 0070                  ??___wmul 0076           Lcd_Write_Char@a 0074  
               ___latbits 0002             __pcstackBANK0 0020                  ?_Lcd_Cmd 0070  
             sprintf@flag 002E               sprintf@prec 002B          ___lwdiv@dividend 0074  
         ?_spiReceiveWait 0070          ??_Lcd_Set_Cursor 0077                  ?___lwdiv 0072  
                ?___lwmod 0020                 __pstrings 03C7                  ?_isdigit 0070  
                ?_spiInit 0072                  ?_spiRead 0070          ___lwdiv@quotient 0077  
                ?_sprintf 0024      spiInit@sTransmitEdge 0074         interrupt_function 0004  
          ___wmul@product 0076                  _LCD_var1 0035        spiInit@sDataSample 0072  
                Lcd_Cmd@a 0075               ??_Lcd_Clear 0076               __stringbase 03D6  
       ___wmul@multiplier 0072          ??_Lcd_Write_Char 0073                  _Lcd_Init 0251  
                _Lcd_Port 0328  __end_of_Lcd_Write_String 0328        __end_of__stringtab 03D7  
             _isdigit$879 0072                sprintf@val 002C           ___lwdiv@divisor 0072  
         ___lwdiv@counter 0079                  __ptext10 0447                  __ptext11 02E6  
                __ptext12 045D                  __ptext13 040D                  __ptext14 0251  
                __ptext15 0484                  __ptext16 042D                  __ptext17 0328  
                __ptext18 04A1                _LCD_ADC_S1 0037                  _spiWrite 04A8  
            spiInit@sType 0075         spiInit@sClockIdle 0073                _INTCONbits 000B  
                isdigit@c 0073                  intlevel1 0000                 sprintf@ap 002A  
               sprintf@sp 0031          ___lwmod@dividend 0022          ??_spiReceiveWait 0072  
               stringcode 03D1                _OSCCONbits 008F        Lcd_Set_Cursor@temp 0078  
                sprintf@c 0032                  sprintf@f 0024           ___lwmod@divisor 0020  
         ___lwmod@counter 007B                  stringdir 03D1                  stringtab 03C7  
